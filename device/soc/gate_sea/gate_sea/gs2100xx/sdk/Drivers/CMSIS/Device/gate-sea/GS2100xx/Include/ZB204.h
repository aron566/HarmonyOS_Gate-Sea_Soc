/*
 * ARM Limited (ARM) is supplying this software for use with Cortex-M
 * processor based microcontroller, but can be equally used for other
 * suitable processor architectures. This file can be freely distributed.
 * Modifications to this file shall be clearly marked.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS". NO WARRANTIES, WHETHER EXPRESS, IMPLIED
 * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
 * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * @file     ZB204.h
 * @brief    CMSIS HeaderFile
 * @version  1.2
 * @date     15. February 2023
 * @note     Generated by SVDConv V3.3.18 on Wednesday, 15.02.2023 11:03:53
 *           from File 'ZB204.svd',
 *           last modified on Wednesday, 15.02.2023 03:03:42
 */



/** @addtogroup GS
  * @{
  */


/** @addtogroup ZB204
  * @{
  */


#ifndef ZB204_H
#define ZB204_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M3 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  MemoryManagement_IRQn     = -12,              /*!< -12  Memory Management, MPU mismatch, including Access Violation
                                                     and No Match                                                              */
  BusFault_IRQn             = -11,              /*!< -11  Bus Fault, Pre-Fetch-, Memory Access Fault, other address/memory
                                                     related Fault                                                             */
  UsageFault_IRQn           = -10,              /*!< -10  Usage Fault, i.e. Undef Instruction, Illegal State Transition        */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  DebugMonitor_IRQn         =  -4,              /*!< -4 Debug Monitor                                                          */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* ===========================================  ZB204 Specific Interrupt Numbers  ============================================ */
  DMA_IRQn                  =   0,              /*!< 0  DMA interrupt                                                          */
  BPLC_NTB_TIMER_IRQn       =   1,              /*!< 1  BPLC_NTB_TIMER                                                         */
  BPLC_IRQn                 =   2,              /*!< 2  BPLC interrupt                                                         */
  SPI0_IRQn                 =   3,              /*!< 3  SPI interrupt                                                          */
  SPI1_IRQn                 =   4,              /*!< 4  SPI1 interrupt                                                         */
  I2C0_IRQn                 =   5,              /*!< 5  I2C interrupt                                                          */
  SCI0_IRQn                 =   6,              /*!< 6  UART interrupt                                                         */
  SCI1_IRQn                 =   7,              /*!< 7  UART interrupt                                                         */
  SCI2_IRQn                 =   8,              /*!< 8  UART interrupt                                                         */
  SCI3_IRQn                 =   9,              /*!< 9  UART interrupt                                                         */
  PWM0_IRQn                 =  10,              /*!< 10 PWM interrupt                                                          */
  PWM1_IRQn                 =  11,              /*!< 11 PWM interrupt                                                          */
  AES_IRQn                  =  13,              /*!< 13 AES interrupt                                                          */
  HRF_IRQn                  =  15,              /*!< 15 HRF interrupt                                                          */
  SWT_IRQn                  =  16,              /*!< 16 SWT interrupt                                                          */
  QSPI_IRQn                 =  17,              /*!< 17 QSPI interrupt                                                         */
  EPORT0_IRQn               =  20,              /*!< 20 EOPRT interrupt                                                        */
  EPORT1_IRQn               =  21,              /*!< 21 EOPRT interrupt                                                        */
  EPORT2_IRQn               =  22,              /*!< 22 EOPRT interrupt                                                        */
  EPORT3_IRQn               =  23,              /*!< 23 EOPRT interrupt                                                        */
  EPORT4_IRQn               =  24,              /*!< 24 EOPRT interrupt                                                        */
  EPORT5_IRQn               =  25,              /*!< 25 EOPRT interrupt                                                        */
  EPORT6_IRQn               =  26,              /*!< 26 EOPRT interrupt                                                        */
  EPORT7_IRQn               =  27,              /*!< 27 EOPRT interrupt                                                        */
  EPORT8_IRQn               =  28,              /*!< 28 EOPRT interrupt                                                        */
  EPORT9_IRQn               =  29,              /*!< 29 EOPRT interrupt                                                        */
  PIT0_IRQn                 =  30,              /*!< 30 PIT interrupt                                                          */
  PIT1_IRQn                 =  31,              /*!< 31 PIT interrupt                                                          */
  PIT2_IRQn                 =  32,              /*!< 32 PIT interrupt                                                          */
  PIT3_IRQn                 =  33,              /*!< 33 PIT interrupt                                                          */
  PIT4_IRQn                 =  34,              /*!< 34 PIT interrupt                                                          */
  PIT5_IRQn                 =  35,              /*!< 35 PIT interrupt                                                          */
  PIT6_IRQn                 =  36,              /*!< 36 PIT interrupt                                                          */
  PIT7_IRQn                 =  37,              /*!< 37 PIT interrupt                                                          */
  PIT8_IRQn                 =  38,              /*!< 38 PIT interrupt                                                          */
  PIT9_IRQn                 =  39,              /*!< 39 PIT interrupt                                                          */
  PIT10_IRQn                =  40,              /*!< 40 PIT interrupt                                                          */
  PIT11_IRQn                =  41,              /*!< 41 PIT interrupt                                                          */
  CMP_IRQn                  =  42,              /*!< 42 CMP interrupt                                                          */
  LVD_IRQn                  =  43               /*!< 43 LVD interrupt                                                          */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM Cortex-M3 Processor and Core Peripherals  =========================== */
#define __CM3_REV                 0x0200U       /*!< CM3 Core Revision                                                         */
#define __NVIC_PRIO_BITS               3        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */
#define __MPU_PRESENT                  1        /*!< MPU present or not                                                        */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm3.h"                           /*!< ARM Cortex-M3 processor and core peripherals                              */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                           RESET                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Reset Controller Module (RESET)
  */

typedef struct {                                /*!< (@ 0x40020000) RESET Structure                                            */
  __IM  uint8_t   RESERVED;

  union {
    __IOM uint8_t RTR;                          /*!< (@ 0x00000001) Reset Test Register                                        */

    struct {
      __IOM uint8_t FPOR        : 1;            /*!< [0..0] Force Power On Reset                                               */
      __IM  uint8_t             : 5;
      __IOM uint8_t TEST        : 2;            /*!< [7..6] Write Access Enable Sequence Input                                 */
    } RTR_b;
  } ;

  union {
    __IOM uint8_t RSR;                          /*!< (@ 0x00000002) Reset Status Register                                      */

    struct {
      __IM  uint8_t             : 1;
      __IM  uint8_t POR         : 1;            /*!< [1..1] Watchdog Enable Bit                                                */
      __IM  uint8_t STDBYWKR    : 1;            /*!< [2..2] Standby Wakeup Reset Flag                                          */
      __IM  uint8_t FPOR        : 1;            /*!< [3..3] Force Power-On Reset Flag                                          */
      __IM  uint8_t WDR         : 1;            /*!< [4..4] Watchdog Change Update Bit                                         */
      __IM  uint8_t SOFT        : 1;            /*!< [5..5] Watchdog Change Update Bit                                         */
      __IM  uint8_t PVD         : 1;            /*!< [6..6] Watchdog Interrupt Flag Bit                                        */
      __IOM uint8_t ERST        : 1;            /*!< [7..7] Watchdog Timer Prescaler                                           */
    } RSR_b;
  } ;

  union {
    __IOM uint8_t RCR;                          /*!< (@ 0x00000003) Reset Control Register                                     */

    struct {
      __IOM uint8_t FRCRSTOUT   : 1;            /*!< [0..0] Force RESET PIN                                                    */
    } RCR_b;
  } ;
} RESET_Type;                                   /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                            SWT                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Software Watchdog Timer (SWT)
  */

typedef struct {                                /*!< (@ 0x401E0000) SWT Structure                                              */

  union {
    __IOM uint32_t SWTCR;                       /*!< (@ 0x00000000) SWT Control Register                                       */

    struct {
      __IOM uint32_t WEN        : 1;            /*!< [0..0] Watchdog Enable Bit                                                */
      __IOM uint32_t FRZ        : 1;            /*!< [1..1] Watchdog Change Update Bit                                         */
      __IOM uint32_t STP        : 1;            /*!< [2..2] Watchdog Change Update Bit                                         */
      __IOM uint32_t CSL        : 1;            /*!< [3..3] Watchdog Interrupt Flag Bit                                        */
      __IOM uint32_t SLK        : 1;            /*!< [4..4] Watchdog Timer Prescaler                                           */
      __IOM uint32_t HLK        : 1;            /*!< [5..5] Watchdog Clock Domain Interrupt Status Bit                         */
      __IOM uint32_t ITR        : 1;            /*!< [6..6] Debug Mode Bit                                                     */
      __IOM uint32_t WND        : 1;            /*!< [7..7] STOP Mode Bit                                                      */
      __IOM uint32_t RIA        : 1;            /*!< [8..8] Doze Mode Bit                                                      */
      __IOM uint32_t KEY        : 1;            /*!< [9..9] Wait Mode Bit                                                      */
      __IM  uint32_t            : 14;
      __IOM uint32_t MAP        : 8;            /*!< [31..24] Wait Mode Bit                                                    */
    } SWTCR_b;
  } ;

  union {
    __IOM uint32_t SWTIR;                       /*!< (@ 0x00000004) SWT Interrupt Register                                     */

    struct {
      __IOM uint32_t TIF        : 1;            /*!< [0..0] Timeout Interrupt Flag                                             */
    } SWTIR_b;
  } ;
  __IOM uint32_t  SWTTO;                        /*!< (@ 0x00000008) SWT Timeout Register                                       */
  __IOM uint32_t  SWTWN;                        /*!< (@ 0x0000000C) SWT Window Register                                        */

  union {
    __IOM uint32_t SWTSR;                       /*!< (@ 0x00000010) SWT Service Register                                       */

    struct {
      __IOM uint32_t WSC        : 16;           /*!< [15..0] Watchdog Service Code                                             */
    } SWTSR_b;
  } ;
  __IOM uint32_t  SWTCO;                        /*!< (@ 0x00000014) SWT Counter Output Register                                */

  union {
    __IOM uint32_t SWTSK;                       /*!< (@ 0x00000018) SWT Service Key Register                                   */

    struct {
      __IOM uint32_t SK         : 16;           /*!< [15..0] Service Key                                                       */
    } SWTSK_b;
  } ;
} SWT_Type;                                     /*!< Size = 28 (0x1c)                                                          */



/* =========================================================================================================================== */
/* ================                                            AES                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief AES (AES)
  */

typedef struct {                                /*!< (@ 0x40600000) AES Structure                                              */
  __IOM uint32_t  DIOR;                         /*!< (@ 0x00000000) DIOR                                                       */
  __IM  uint32_t  RESERVED[3];
  __IOM uint32_t  KEY[8];                       /*!< (@ 0x00000010) KEY[0..7]                                                  */
  __IOM uint32_t  CSR;                          /*!< (@ 0x00000030) CSR                                                        */
  __IOM uint32_t  COUNTER[4];                   /*!< (@ 0x00000034) COUNTER[0..3]                                              */
} AES_Type;                                     /*!< Size = 68 (0x44)                                                          */



/* =========================================================================================================================== */
/* ================                                            CRC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief CRC (CRC)
  */

typedef struct {                                /*!< (@ 0x40400000) CRC Structure                                              */
  __IOM uint32_t  CTR;                          /*!< (@ 0x00000000) CTR                                                        */
  __IOM uint32_t  RES;                          /*!< (@ 0x00000004) RES                                                        */
  __IOM uint32_t  INI;                          /*!< (@ 0x00000008) INI                                                        */
  __IOM uint32_t  DATI;                         /*!< (@ 0x0000000C) DATI                                                       */
} CRC_Type;                                     /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                            ADC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Analog-to-digital converter (ADC)
  */

typedef struct {                                /*!< (@ 0x40060000) ADC Structure                                              */

  union {
    __IOM uint32_t ADCISR;                      /*!< (@ 0x00000000) ADC interrupt and status register                          */

    struct {
      __IOM uint32_t ADRDY      : 1;            /*!< [0..0] ADC ready                                                          */
      __IOM uint32_t EOSMP      : 1;            /*!< [1..1] End of sampling flag                                               */
      __IOM uint32_t EOC        : 1;            /*!< [2..2] End of conversion flag                                             */
      __IOM uint32_t EOSEQ      : 1;            /*!< [3..3] End of sequence flag                                               */
      __IOM uint32_t OVR        : 1;            /*!< [4..4] ADC overrun                                                        */
      __IOM uint32_t FULL       : 1;            /*!< [5..5] FIFO full status                                                   */
      __IOM uint32_t EMPTY      : 1;            /*!< [6..6] FIFO empty status                                                  */
      __IOM uint32_t AWD        : 1;            /*!< [7..7] Analog watchdog flag                                               */
    } ADCISR_b;
  } ;

  union {
    __IOM uint32_t ADCIER;                      /*!< (@ 0x00000004) ADC interrupt enable register                              */

    struct {
      __IOM uint32_t ADRDYIE    : 1;            /*!< [0..0] ADC ready interrupt enable                                         */
      __IOM uint32_t EOSMPIE    : 1;            /*!< [1..1] End of sampling flag interrupt enable                              */
      __IOM uint32_t EOCIE      : 1;            /*!< [2..2] End of conversion interrupt enable                                 */
      __IOM uint32_t EOSEQIE    : 1;            /*!< [3..3] End of conversion sequence interrupt enable                        */
      __IOM uint32_t OVRIE      : 1;            /*!< [4..4] Overrun interrupt enable                                           */
      __IM  uint32_t            : 2;
      __IOM uint32_t AWDIE      : 1;            /*!< [7..7] Analog watchdog interrupt enable                                   */
    } ADCIER_b;
  } ;

  union {
    __IOM uint32_t ADCCR;                       /*!< (@ 0x00000008) ADC control register                                       */

    struct {
      __IOM uint32_t ADEN       : 1;            /*!< [0..0] ADC enable command                                                 */
      __IOM uint32_t ADDIS      : 1;            /*!< [1..1] ADC disable command                                                */
      __IOM uint32_t ADSTART    : 1;            /*!< [2..2] ADC start conversion command                                       */
      __IOM uint32_t ADSTP      : 1;            /*!< [3..3] ADC stop conversion command                                        */
    } ADCCR_b;
  } ;

  union {
    __IOM uint32_t ADCCFGR1;                    /*!< (@ 0x0000000C) ADC configuration register 1                               */

    struct {
      __IOM uint32_t DMAEN      : 1;            /*!< [0..0] Direct memory access enable                                        */
      __IM  uint32_t            : 7;
      __IOM uint32_t RES        : 2;            /*!< [9..8] Data resolution                                                    */
      __IOM uint32_t ALIGN      : 1;            /*!< [10..10] Data alignment                                                   */
      __IOM uint32_t TRIGMODE   : 3;            /*!< [13..11] Trigger mode select                                              */
      __IM  uint32_t            : 2;
      __IOM uint32_t TRIGSCR    : 3;            /*!< [18..16] External trigger source                                          */
      __IM  uint32_t            : 1;
      __IOM uint32_t CONT       : 1;            /*!< [20..20] Single / continuous conversion mode                              */
      __IOM uint32_t WAIT       : 1;            /*!< [21..21] Wait conversion mode                                             */
      __IOM uint32_t AUTOFF     : 1;            /*!< [22..22] Auto-off mode                                                    */
      __IOM uint32_t DISCEN     : 1;            /*!< [23..23] Discontinuous mode                                               */
      __IOM uint32_t SEQ_LEN    : 3;            /*!< [26..24] Sequence length                                                  */
      __IM  uint32_t            : 3;
      __IOM uint32_t OVRMOD     : 1;            /*!< [30..30] Overrun management mode                                          */
      __IOM uint32_t DIFF       : 1;            /*!< [31..31] Select differential-input                                        */
    } ADCCFGR1_b;
  } ;

  union {
    __IOM uint32_t ADCCFGR2;                    /*!< (@ 0x00000010) ADC configuration register 2                               */

    struct {
      __IOM uint32_t STCNT      : 8;            /*!< [7..0] ADC startup counter bits                                           */
      __IOM uint32_t QPR        : 4;            /*!< [11..8] Prescaler Clock Divider Bits                                      */
    } ADCCFGR2_b;
  } ;

  union {
    __IOM uint32_t ADCSMPR;                     /*!< (@ 0x00000014) ADC sampling time register                                 */

    struct {
      __IOM uint32_t SMP        : 8;            /*!< [7..0] Sampling time selection                                            */
    } ADCSMPR_b;
  } ;

  union {
    __IOM uint32_t ADCWDG;                      /*!< (@ 0x00000018) ADC watch dog register                                     */

    struct {
      __IOM uint32_t AWDCH      : 4;            /*!< [3..0] Analog watchdog channel selection                                  */
      __IM  uint32_t            : 2;
      __IOM uint32_t AWDSGL     : 1;            /*!< [6..6] Enable the watchdog on a single channel or on all channels         */
      __IOM uint32_t AWDEN      : 1;            /*!< [7..7] End of conversion flag                                             */
    } ADCWDG_b;
  } ;

  union {
    __IOM uint32_t ADCTR;                       /*!< (@ 0x0000001C) ADC watchdog threshold register                            */

    struct {
      __IOM uint32_t LT         : 12;           /*!< [11..0] Analog watchdog lower threshold                                   */
      __IM  uint32_t            : 4;
      __IOM uint32_t HT         : 12;           /*!< [27..16] Analog watchdog higher threshold                                 */
    } ADCTR_b;
  } ;
  __IM  uint32_t  RESERVED[3];

  union {
    __IOM uint8_t ADCCHSELR_CCW[8];             /*!< (@ 0x0000002C) ADC channel selection register                             */

    struct {
      __IOM uint8_t CCW         : 4;            /*!< [3..0] ADC ready                                                          */
    } ADCCHSELR_CCW_b[8];
  } ;
  __IM  uint32_t  RESERVED1[6];

  union {
    __IOM uint32_t ADCFIFO;                     /*!< (@ 0x0000004C) ADC FIFO access register                                   */

    struct {
      __IOM uint32_t DATA       : 16;           /*!< [15..0] Converted data                                                    */
    } ADCFIFO_b;
  } ;
} ADC_Type;                                     /*!< Size = 80 (0x50)                                                          */



/* =========================================================================================================================== */
/* ================                                            HRF                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief HRF (HRF)
  */

typedef struct {                                /*!< (@ 0x40900000) HRF Structure                                              */

  union {
    __IOM uint32_t BBP_CONTROL;                 /*!< (@ 0x00000000) BBP_Control                                                */

    struct {
      __IOM uint32_t HRF_ENABLE : 1;            /*!< [0..0] hrf_enable                                                         */
      __IOM uint32_t SOFT_RST_REG : 1;          /*!< [1..1] soft_rst_reg                                                       */
      __IOM uint32_t TX_IMME_START : 1;         /*!< [2..2] tx_imme_start                                                      */
      __IOM uint32_t INI_LTF    : 1;            /*!< [3..3] ini_ltf                                                            */
      __IOM uint32_t AUTO_GET_PSDU_PARAM : 1;   /*!< [4..4] auto_get_psdu_param                                                */
      __IOM uint32_t RX_HMASTLOCKEN : 1;        /*!< [5..5] RX_HMASTLOCKEN                                                     */
      __IOM uint32_t TX_HMASTLOCKEN : 1;        /*!< [6..6] TX_HMASTLOCKEN                                                     */
      __IOM uint32_t WDT_ENABLE : 1;            /*!< [7..7] wdt_enable                                                         */
      __IOM uint32_t RX_OVERWRITE_MEM_EN : 1;   /*!< [8..8] rx_overwrite_mem_en                                                */
      __IOM uint32_t RX_IQ_SWAP : 1;            /*!< [9..9] rx_iq_swap                                                         */
      __IOM uint32_t TX_IQ_SWAP : 1;            /*!< [10..10] tx_iq_swap                                                       */
      __IOM uint32_t FORCE_CLK_EN : 1;          /*!< [11..11] force_clk_en                                                     */
      __IOM uint32_t HCLK_EN    : 1;            /*!< [12..12] hclk_en                                                          */
      __IOM uint32_t OPTION     : 2;            /*!< [14..13] option                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t NEG_SMP_DELAY : 6;         /*!< [21..16] neg_smp_delay                                                    */
      __IM  uint32_t            : 2;
      __IOM uint32_t POS_SMP_DELAY : 6;         /*!< [29..24] pos_smp_delay                                                    */
    } BBP_CONTROL_b;
  } ;

  union {
    __IOM uint32_t BBP_CORR_CFG0;               /*!< (@ 0x00000004) BBP_CORR_CFG0                                              */

    struct {
      __IOM uint32_t CORR_PN_SEQ0 : 32;         /*!< [31..0] corr_pn_seq0                                                      */
    } BBP_CORR_CFG0_b;
  } ;

  union {
    __IOM uint32_t BBP_CORR_CFG1;               /*!< (@ 0x00000008) BBP_CORR_CFG1                                              */

    struct {
      __IOM uint32_t CORR_PN_SEQ1 : 7;          /*!< [6..0] corr_pn_seq1                                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t CORR_RSHFT_ACC : 3;        /*!< [10..8] corr_rshft_acc                                                    */
      __IM  uint32_t            : 1;
      __IOM uint32_t CORR_RSHFT_IN : 3;         /*!< [14..12] corr_rshft_in                                                    */
      __IM  uint32_t            : 1;
      __IOM uint32_t CORR_MAX_THR : 16;         /*!< [31..16] corr_max_thr                                                     */
    } BBP_CORR_CFG1_b;
  } ;

  union {
    __IOM uint32_t BBP_CORR_CFG2;               /*!< (@ 0x0000000C) BBP_CORR_CFG2                                              */

    struct {
      __IOM uint32_t CORR_PN_LEN : 6;           /*!< [5..0] corr_pn_len                                                        */
      __IOM uint32_t CORR_ENABLE : 1;           /*!< [6..6] corr_enable                                                        */
      __IOM uint32_t LOCK_GAIN_ENABLE : 1;      /*!< [7..7] lock_gain_enable                                                   */
      __IOM uint32_t CORR_DEBOUND : 9;          /*!< [16..8] corr_debound                                                      */
      __IOM uint32_t CORR_SEG_LEN : 2;          /*!< [18..17] corr_seg_len                                                     */
      __IM  uint32_t            : 5;
      __IOM uint32_t CORR_PK_OFFSET : 8;        /*!< [31..24] corr_pk_offset                                                   */
    } BBP_CORR_CFG2_b;
  } ;

  union {
    __IOM uint32_t BBP_CORR_CFG3;               /*!< (@ 0x00000010) BBP_CORR_CFG3                                              */

    struct {
      __IOM uint32_t CORR_MIN_THR : 16;         /*!< [15..0] corr_min_thr                                                      */
      __IOM uint32_t CORR_AMP_ALPHA : 3;         /*!< [18..16] CORR_AMP_ALPHA                                                    */
      __IM  uint32_t            : 5;
      __IOM uint32_t CORR_AMP_RATIO : 8;         /*!< [31..24] CORR_AMP_RATIO                                                    */
    } BBP_CORR_CFG3_b;
  } ;

  union {
    __IOM uint32_t BBP_FEC_CFG0;                /*!< (@ 0x00000014) BBP_FEC_CFG0                                               */

    struct {
      __IOM uint32_t TURBO_ITR_NUM : 4;         /*!< [3..0] turbo_itr_num                                                      */
      __IOM uint32_t CRC_ERR_INSERT : 2;        /*!< [5..4] crc_err_insert                                                     */
      __IOM uint32_t DISABLE_PSDU_CRC : 1;      /*!< [6..6] disable_psdu_crc                                                   */
      __IOM uint32_t PUNCMODE_DIR_OPT : 1;      /*!< [7..7] puncmode_dir_opt                                                   */
      __IOM uint32_t NIBBLE_ROT_MODE : 1;       /*!< [8..8] nibble_rot_mode                                                    */
    } BBP_FEC_CFG0_b;
  } ;

  union {
    __IOM uint32_t BBP_PHY_PARAM0;              /*!< (@ 0x00000018) BBP_PHY_PARAM0                                             */

    struct {
      __IOM uint32_t OFDM_POS_PRE : 6;          /*!< [5..0] ofdm_pos_pre                                                       */
      __IOM uint32_t STF_PN     : 10;           /*!< [15..6] stf_pn                                                            */
      __IOM uint32_t TX_PRE_ZEROS_CNT : 8;      /*!< [23..16] tx_pre_zeros_cnt                                                 */
      __IOM uint32_t TX_POST_ZEROS_CNT : 8;     /*!< [31..24] tx_post_zeros_cnt                                                */
    } BBP_PHY_PARAM0_b;
  } ;

  union {
    __IOM uint32_t BBP_PHY_PARAM1;              /*!< (@ 0x0000001C) BBP_PHY_PARAM1                                             */

    struct {
      __IOM uint32_t RX_MASK_CNT : 8;           /*!< [7..0] rx_mask_cnt                                                        */
      __IOM uint32_t RX_CLK_RATIO : 8;          /*!< [15..8] rx_clk_ratio                                                      */
      __IOM uint32_t TX_CLK_RATIO : 8;          /*!< [23..16] tx_clk_ratio                                                     */
    } BBP_PHY_PARAM1_b;
  } ;

  union {
    __IOM uint32_t BIQ_CFG0;                    /*!< (@ 0x00000020) BIQ_CFG0                                                   */

    struct {
      __IOM uint32_t RX_BIQ_SHFT_OPT : 4;       /*!< [3..0] rx_biq_shft_opt                                                    */
      __IOM uint32_t RX_BIQ_BYPASS : 4;         /*!< [7..4] rx_biq_bypass                                                      */
      __IOM uint32_t RX_ACF_ENABLE : 1;         /*!< [8..8] rx_acf_enable                                                      */
      __IOM uint32_t RX_ACF_MOD_UP : 1;         /*!< [9..9] rx_acf_mod_up                                                      */
      __IOM uint32_t RX_ACF_ODSR : 1;           /*!< [10..10] rx_acf_odsr                                                      */
      __IM  uint32_t            : 5;
      __IOM uint32_t TX_BIQ_SHFT_OPT : 4;       /*!< [19..16] tx_biq_shft_opt                                                  */
      __IOM uint32_t TX_BIQ_BYPASS : 4;         /*!< [23..20] tx_biq_bypass                                                    */
      __IOM uint32_t TX_ACF_ENABLE : 1;         /*!< [24..24] tx_acf_enable                                                    */
      __IOM uint32_t TX_ACF_MOD_UP : 1;         /*!< [25..25] tx_acf_mod_up                                                    */
      __IOM uint32_t TX_ACF_ODSR : 1;           /*!< [26..26] tx_acf_odsr                                                      */
    } BIQ_CFG0_b;
  } ;

  union {
    __IOM uint32_t BIQ_CFG1;                    /*!< (@ 0x00000024) BIQ_CFG1                                                   */

    struct {
      __IOM uint32_t RX_BIQ0_COEF1 : 14;        /*!< [13..0] rx_biq0_coef1                                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_BIQ0_COEF0 : 14;        /*!< [29..16] rx_biq0_coef0                                                    */
    } BIQ_CFG1_b;
  } ;

  union {
    __IOM uint32_t BIQ_CFG2;                    /*!< (@ 0x00000028) BIQ_CFG2                                                   */

    struct {
      __IOM uint32_t RX_BIQ0_COEF3 : 14;        /*!< [13..0] rx_biq0_coef3                                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_BIQ0_COEF2 : 14;        /*!< [29..16] rx_biq0_coef2                                                    */
    } BIQ_CFG2_b;
  } ;

  union {
    __IOM uint32_t BIQ_CFG3;                    /*!< (@ 0x0000002C) BIQ_CFG3                                                   */

    struct {
      __IOM uint32_t RX_BIQ1_COEF1 : 14;        /*!< [13..0] rx_biq1_coef1                                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_BIQ1_COEF0 : 14;        /*!< [29..16] rx_biq1_coef0                                                    */
    } BIQ_CFG3_b;
  } ;

  union {
    __IOM uint32_t BIQ_CFG4;                    /*!< (@ 0x00000030) BIQ_CFG4                                                   */

    struct {
      __IOM uint32_t RX_BIQ1_COEF3 : 14;        /*!< [13..0] rx_biq1_coef3                                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_BIQ1_COEF2 : 14;        /*!< [29..16] rx_biq1_coef2                                                    */
    } BIQ_CFG4_b;
  } ;

  union {
    __IOM uint32_t BIQ_CFG5;                    /*!< (@ 0x00000034) BIQ_CFG5                                                   */

    struct {
      __IOM uint32_t RX_BIQ2_COEF1 : 14;        /*!< [13..0] rx_biq2_coef1                                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_BIQ2_COEF0 : 14;        /*!< [29..16] rx_biq2_coef0                                                    */
    } BIQ_CFG5_b;
  } ;

  union {
    __IOM uint32_t BIQ_CFG6;                    /*!< (@ 0x00000038) BIQ_CFG6                                                   */

    struct {
      __IOM uint32_t RX_BIQ2_COEF3 : 14;        /*!< [13..0] rx_biq2_coef3                                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_BIQ2_COEF2 : 14;        /*!< [29..16] rx_biq2_coef2                                                    */
    } BIQ_CFG6_b;
  } ;

  union {
    __IOM uint32_t BIQ_CFG7;                    /*!< (@ 0x0000003C) BIQ_CFG7                                                   */

    struct {
      __IOM uint32_t RX_BIQ3_COEF1 : 14;        /*!< [13..0] rx_biq3_coef1                                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_BIQ3_COEF0 : 14;        /*!< [29..16] rx_biq3_coef0                                                    */
    } BIQ_CFG7_b;
  } ;

  union {
    __IOM uint32_t BIQ_CFG8;                    /*!< (@ 0x00000040) BIQ_CFG8                                                   */

    struct {
      __IOM uint32_t RX_BIQ3_COEF3 : 14;        /*!< [13..0] rx_biq3_coef3                                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_BIQ3_COEF2 : 14;        /*!< [29..16] rx_biq3_coef2                                                    */
    } BIQ_CFG8_b;
  } ;

  union {
    __IOM uint32_t CF_CFG0;                     /*!< (@ 0x00000044) CF_CFG0                                                    */

    struct {
      __IOM uint32_t CF0_BC     : 14;           /*!< [13..0] cf0_bc                                                            */
      __IOM uint32_t CF0_RSHFT  : 2;            /*!< [15..14] cf0_rshft                                                        */
      __IOM uint32_t CF0_A      : 14;           /*!< [29..16] cf0_a                                                            */
      __IOM uint32_t CF0_LSHFT  : 2;            /*!< [31..30] cf0_lshft                                                        */
    } CF_CFG0_b;
  } ;

  union {
    __IOM uint32_t CF_CFG1;                     /*!< (@ 0x00000048) CF_CFG1                                                    */

    struct {
      __IOM uint32_t CF0_BS     : 14;           /*!< [13..0] cf0_bs                                                            */
      __IM  uint32_t            : 2;
      __IOM uint32_t CF1_BS     : 14;           /*!< [29..16] cf1_bs                                                           */
      __IOM uint32_t CF_ENABLE  : 2;            /*!< [31..30] cf_enable                                                        */
    } CF_CFG1_b;
  } ;

  union {
    __IOM uint32_t CF_CFG2;                     /*!< (@ 0x0000004C) CF_CFG2                                                    */

    struct {
      __IOM uint32_t CF1_BC     : 14;           /*!< [13..0] cf1_bc                                                            */
      __IOM uint32_t CF1_RSHFT  : 2;            /*!< [15..14] cf1_rshft                                                        */
      __IOM uint32_t CF1_A      : 14;           /*!< [29..16] cf1_a                                                            */
      __IOM uint32_t CF1_LSHFT  : 2;            /*!< [31..30] cf1_lshft                                                        */
    } CF_CFG2_b;
  } ;

  union {
    __IOM uint32_t BBP_TONEMASK[4];             /*!< (@ 0x00000050) BBP_TONEMASK0                                              */

    struct {
      __IOM uint32_t TONE_MASK0 : 32;           /*!< [31..0] tone_mask0                                                        */
    } BBP_TONEMASK_b[4];
  } ;

  union {
    __IOM uint32_t BBP_LTF_FREQ[4];             /*!< (@ 0x00000060) BBP_LTF_FREQ1                                              */

    struct {
      __IOM uint32_t LTF_FREQ1  : 32;           /*!< [31..0] ltf_freq1                                                         */
    } BBP_LTF_FREQ_b[4];
  } ;

  union {
    __IOM uint32_t BBP_STF_DATA[16];            /*!< (@ 0x00000070) BBP_STF_DATA0                                              */

    struct {
      __IOM uint32_t STF_DATA0  : 24;           /*!< [23..0] stf_data0                                                         */
    } BBP_STF_DATA_b[16];
  } ;

  union {
    __IOM uint32_t BBP_PILOT_TONE[4];           /*!< (@ 0x000000B0) BBP_PILOT_TONE0                                            */

    struct {
      __IOM uint32_t PILOT_TONE0 : 32;          /*!< [31..0] pilot_tone0                                                       */
    } BBP_PILOT_TONE_b[4];
  } ;

  union {
    __IOM uint32_t CT_CFG0;                     /*!< (@ 0x000000C0) CT_CFG0                                                    */

    struct {
      __IOM uint32_t PHR_CT_AL  : 12;           /*!< [11..0] phr_ct_al                                                         */
      __IM  uint32_t            : 4;
      __IOM uint32_t PHR_CT_AI  : 12;           /*!< [27..16] phr_ct_ai                                                        */
    } CT_CFG0_b;
  } ;

  union {
    __IOM uint32_t CT_CFG1;                     /*!< (@ 0x000000C4) CT_CFG1                                                    */

    struct {
      __IOM uint32_t PSDU_CT_AL : 12;           /*!< [11..0] psdu_ct_al                                                        */
      __IM  uint32_t            : 4;
      __IOM uint32_t PSDU_CT_AI : 12;           /*!< [27..16] psdu_ct_ai                                                       */
    } CT_CFG1_b;
  } ;

  union {
    __IOM uint32_t CFR_EDGE_CFG[12];            /*!< (@ 0x000000C8) CFR_EDGE0_CFG0                                             */

    struct {
      __IOM uint32_t CFR_COEF_F0_0 : 12;        /*!< [11..0] cfr_coef_f0_0                                                     */
      __IM  uint32_t            : 4;
      __IOM uint32_t CFR_COEF_F0_1 : 12;        /*!< [27..16] cfr_coef_f0_1                                                    */
    } CFR_EDGE_CFG_b[12];
  } ;

  union {
    __IOM uint32_t BBP_SIG_MAP[16];             /*!< (@ 0x000000F8) BBP_SIG_MAP0_0                                             */

    struct {
      __IOM uint32_t SIG_MAP0_0 : 32;           /*!< [31..0] sig_map0_0                                                        */
    } BBP_SIG_MAP_b[16];
  } ;

  union {
    __IOM uint32_t GAD_CFG0;                    /*!< (@ 0x00000138) GAD_CFG0                                                   */

    struct {
      __IOM uint32_t GAD_ENABLE : 1;            /*!< [0..0] gad_enable                                                         */
      __IOM uint32_t GAD_BLK_EN : 1;            /*!< [1..1] gad_blk_en                                                         */
      __IOM uint32_t GAD_CLP_EN : 1;            /*!< [2..2] gad_clp_en                                                         */
      __IOM uint32_t GAD_MUA    : 2;            /*!< [4..3] gad_mua                                                            */
      __IOM uint32_t GAD_ERR_MU : 3;            /*!< [7..5] gad_err_mu                                                         */
      __IM  uint32_t            : 8;
      __IOM uint32_t GAD_REF    : 16;           /*!< [31..16] gad_ref                                                          */
    } GAD_CFG0_b;
  } ;

  union {
    __IOM uint32_t GAD_CFG1;                    /*!< (@ 0x0000013C) GAD_CFG1                                                   */

    struct {
      __IOM uint32_t GAD_TH_BLK : 16;           /*!< [15..0] gad_th_blk                                                        */
      __IOM uint32_t GAD_TH_CLP : 16;           /*!< [31..16] gad_th_clp                                                       */
    } GAD_CFG1_b;
  } ;

  union {
    __IOM uint32_t GAD_CFG2;                    /*!< (@ 0x00000140) GAD_CFG2                                                   */

    struct {
      __IOM uint32_t GAD_CFG_GAIN : 16;         /*!< [15..0] gad_cfg_gain                                                      */
      __IOM uint32_t FORCE_GAD_GAIN : 1;        /*!< [16..16] force_gad_gain                                                   */
    } GAD_CFG2_b;
  } ;

  union {
    __IOM uint32_t GAD_GAIN;                    /*!< (@ 0x00000144) GAD_GAIN                                                   */

    struct {
      __IOM uint32_t GAD_GAIN   : 24;           /*!< [23..0] gad_gain                                                          */
    } GAD_GAIN_b;
  } ;

  union {
    __IOM uint32_t CFOC_CFG0;                   /*!< (@ 0x00000148) CFOC_CFG0                                                  */

    struct {
      __IOM uint32_t CFOC_FCW   : 24;           /*!< [23..0] cfoc_fcw                                                          */
      __IM  uint32_t            : 7;
      __IOM uint32_t CFOC_ENABLE : 1;           /*!< [31..31] cfoc_enable                                                      */
    } CFOC_CFG0_b;
  } ;

  union {
    __IOM uint32_t HF_CFG0;                     /*!< (@ 0x0000014C) HF_CFG0                                                    */

    struct {
      __IOM uint32_t RX_HF_ENABLE : 1;          /*!< [0..0] rx_hf_enable                                                       */
      __IOM uint32_t RX_HF_UP_IST_POS : 5;      /*!< [5..1] rx_hf_up_ist_pos                                                   */
      __IOM uint32_t RX_HF_UP_MODE : 1;         /*!< [6..6] rx_hf_up_mode                                                      */
      __IM  uint32_t            : 1;
      __IOM uint32_t TX_HF_ENABLE : 1;          /*!< [8..8] tx_hf_enable                                                       */
      __IOM uint32_t TX_HF_UP_IST_POS : 5;      /*!< [13..9] tx_hf_up_ist_pos                                                  */
      __IOM uint32_t TX_HF_UP_MODE : 1;         /*!< [14..14] tx_hf_up_mode                                                    */
    } HF_CFG0_b;
  } ;

  union {
    __IOM uint32_t HF_CFG1;                     /*!< (@ 0x00000150) HF_CFG1                                                    */

    struct {
      __IOM uint32_t RX_HF_COEF0 : 14;          /*!< [13..0] rx_hf_coef0                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_HF_COEF1 : 14;          /*!< [29..16] rx_hf_coef1                                                      */
    } HF_CFG1_b;
  } ;

  union {
    __IOM uint32_t HF_CFG2;                     /*!< (@ 0x00000154) HF_CFG2                                                    */

    struct {
      __IOM uint32_t RX_HF_COEF2 : 14;          /*!< [13..0] rx_hf_coef2                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_HF_COEF3 : 14;          /*!< [29..16] rx_hf_coef3                                                      */
    } HF_CFG2_b;
  } ;

  union {
    __IOM uint32_t HF_CFG3;                     /*!< (@ 0x00000158) HF_CFG3                                                    */

    struct {
      __IOM uint32_t RX_HF_COEF4 : 14;          /*!< [13..0] rx_hf_coef4                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_HF_COEF5 : 14;          /*!< [29..16] rx_hf_coef5                                                      */
    } HF_CFG3_b;
  } ;

  union {
    __IOM uint32_t HF_CFG4;                     /*!< (@ 0x0000015C) HF_CFG4                                                    */

    struct {
      __IOM uint32_t RX_HF_COEF6 : 14;          /*!< [13..0] rx_hf_coef6                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_HF_COEF7 : 14;          /*!< [29..16] rx_hf_coef7                                                      */
    } HF_CFG4_b;
  } ;

  union {
    __IOM uint32_t SRC_CFG0;                    /*!< (@ 0x00000160) SRC_CFG0                                                   */

    struct {
      __IOM uint32_t RX_SRC_ENABLE : 1;         /*!< [0..0] rx_src_enable                                                      */
      __IOM uint32_t TX_SRC_ENABLE : 1;         /*!< [1..1] tx_src_enable                                                      */
      __IOM uint32_t RX_USE_CONST_SFO : 1;      /*!< [2..2] rx_use_const_sfo                                                   */
      __IOM uint32_t TX_USE_CONST_SFO : 1;      /*!< [3..3] tx_use_const_sfo                                                   */
    } SRC_CFG0_b;
  } ;

  union {
    __IOM uint32_t SRC_CFG1;                    /*!< (@ 0x00000164) SRC_CFG1                                                   */

    struct {
      __IOM uint32_t TX_CONST_SFO : 24;         /*!< [23..0] tx_const_sfo                                                      */
    } SRC_CFG1_b;
  } ;

  union {
    __IOM uint32_t SRC_CFG2;                    /*!< (@ 0x00000168) SRC_CFG2                                                   */

    struct {
      __IOM uint32_t RX_CONST_SFO : 24;         /*!< [23..0] rx_const_sfo                                                      */
    } SRC_CFG2_b;
  } ;

  union {
    __IOM uint32_t FI_FQ_CFG0;                  /*!< (@ 0x0000016C) FI_FQ_CFG0                                                 */

    struct {
      __IOM uint32_t PILOT_UPP_MU : 12;         /*!< [11..0] pilot_upp_mu                                                      */
      __IOM uint32_t LR_SHFT    : 3;            /*!< [14..12] lr_shft                                                          */
      __IM  uint32_t            : 1;
      __IOM uint32_t PILOT_UPD_MU : 12;         /*!< [27..16] pilot_upd_mu                                                     */
      __IOM uint32_t FQ_RSHFT   : 3;            /*!< [30..28] fq_rshft                                                         */
    } FI_FQ_CFG0_b;
  } ;

  union {
    __IOM uint32_t CSO_CFG0;                    /*!< (@ 0x00000170) CSO_CFG0                                                   */

    struct {
      __IOM uint32_t CSO_RATE   : 14;           /*!< [13..0] cso_rate                                                          */
      __IM  uint32_t            : 2;
      __IOM uint32_t CSO_RSHFT  : 3;            /*!< [18..16] cso_rshft                                                        */
      __IM  uint32_t            : 5;
      __IOM uint32_t CSO_ICO_OFFSET_VALID : 7;  /*!< [30..24] cso_ico_offset_valid                                             */
    } CSO_CFG0_b;
  } ;

  union {
    __IOM uint32_t BBP_STATUS;                  /*!< (@ 0x00000174) BBP_STATUS                                                 */

    struct {
      __IOM uint32_t TX_RX_MODE : 1;            /*!< [0..0] tx_rx_mode                                                         */
      __IOM uint32_t RX_PHR_CRC_RES : 1;        /*!< [1..1] rx_phr_crc_res                                                     */
      __IOM uint32_t RX_PSDU_CRC_RES : 1;       /*!< [2..2] rx_psdu_crc_res                                                    */
      __IM  uint32_t            : 5;
      __IOM uint32_t TX_BUSY    : 1;            /*!< [8..8] tx_busy                                                            */
      __IOM uint32_t TX_IMME_BUSY : 1;          /*!< [9..9] tx_imme_busy                                                       */
      __IOM uint32_t TX_NTB_BUSY : 1;           /*!< [10..10] tx_ntb_busy                                                      */
      __IM  uint32_t            : 2;
      __IOM uint32_t FRAMESYNCED : 1;           /*!< [13..13] framesynced                                                      */
      __IM  uint32_t            : 2;
      __IOM uint32_t CPU_GET_PHR_END : 1;       /*!< [16..16] cpu_get_phr_end                                                  */
    } BBP_STATUS_b;
  } ;

  union {
    __IOM uint32_t BBP_FLAG;                    /*!< (@ 0x00000178) BBP_FLAG                                                   */

    struct {
      __IOM uint32_t TX_END_FLAG : 1;           /*!< [0..0] tx_end_flag                                                        */
      __IOM uint32_t RX_END_FLAG : 1;           /*!< [1..1] rx_end_flag                                                        */
      __IOM uint32_t RX_PHR_END_FLAG : 1;       /*!< [2..2] rx_phr_end_flag                                                    */
      __IOM uint32_t RX_PSDU_END_FLAG : 1;      /*!< [3..3] rx_psdu_end_flag                                                   */
      __IM  uint32_t            : 4;
      __IOM uint32_t INI_LTF_DONE_FLAG : 1;     /*!< [8..8] ini_ltf_done_flag                                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t RX_FRAMESYNCED_RISE_FLAG : 1;/*!< [10..10] rx_framesynced_rise_flag                                       */
      __IM  uint32_t            : 5;
      __IOM uint32_t TX_DMA_DONE_FLAG : 1;      /*!< [16..16] tx_dma_done_flag                                                 */
      __IOM uint32_t RX_OVERFLOW_FLAG : 1;      /*!< [17..17] rx_overflow_flag                                                 */
      __IOM uint32_t TX_RX_COLLISION_FLAG : 1;  /*!< [18..18] tx_rx_collision_flag                                             */
      __IOM uint32_t TX_FAIL_FLAG : 1;          /*!< [19..19] tx_fail_flag                                                     */
      __IM  uint32_t            : 4;
      __IOM uint32_t RX_SYM_BIT_COLLISION_FLAG : 1;/*!< [24..24] rx_sym_bit_collision_flag                                     */
    } BBP_FLAG_b;
  } ;

  union {
    __IOM uint32_t BBP_INT_EN;                  /*!< (@ 0x0000017C) BBP_INT_EN                                                 */

    struct {
      __IOM uint32_t TX_END_INT_EN : 1;         /*!< [0..0] tx_end_int_en                                                      */
      __IOM uint32_t RX_END_INT_EN : 1;         /*!< [1..1] rx_end_int_en                                                      */
      __IOM uint32_t RX_PHR_END_INT_EN : 1;     /*!< [2..2] rx_phr_end_int_en                                                  */
      __IOM uint32_t RX_PSDU_END_INT_EN : 1;    /*!< [3..3] rx_psdu_end_int_en                                                 */
      __IM  uint32_t            : 4;
      __IOM uint32_t INI_LTF_DONE_INT_EN : 1;   /*!< [8..8] ini_ltf_done_int_en                                                */
      __IM  uint32_t            : 1;
      __IOM uint32_t RX_FRAMESYNCED_RISE_INT_EN : 1;/*!< [10..10] rx_framesynced_rise_int_en                                   */
      __IM  uint32_t            : 5;
      __IOM uint32_t TX_DMA_DONE_INT_EN : 1;    /*!< [16..16] tx_dma_done_int_en                                               */
      __IOM uint32_t RX_OVERFLOW_INT_EN : 1;    /*!< [17..17] rx_overflow_int_en                                               */
      __IOM uint32_t TX_RX_COLLISION_INT_EN : 1;/*!< [18..18] tx_rx_collision_int_en                                           */
      __IOM uint32_t TX_FAIL_INT_EN : 1;        /*!< [19..19] tx_fail_int_en                                                   */
      __IM  uint32_t            : 4;
      __IOM uint32_t RX_SYM_BIT_COLLISION_INT_EN : 1;/*!< [24..24] rx_sym_bit_collision_int_en                                 */
      __IM  uint32_t            : 4;
      __IOM uint32_t RX_FRAMESYNCED_WAKE_EN : 1;/*!< [29..29] rx_framesynced_wake_en                                           */
    } BBP_INT_EN_b;
  } ;

  union {
    __IOM uint32_t BBP_TX_PARAM;                /*!< (@ 0x00000180) BBP_TX_PARAM                                               */

    struct {
      __IOM uint32_t TX_PHR_MCS : 3;            /*!< [2..0] tx_phr_mcs                                                         */
      __IM  uint32_t            : 1;
      __IOM uint32_t TX_PBNUM   : 3;            /*!< [6..4] tx_pbnum                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t TX_PBSIZE_INDEX : 3;       /*!< [10..8] tx_pbsize_index                                                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t TX_PSDU_MCS : 3;           /*!< [14..12] tx_psdu_mcs                                                      */
    } BBP_TX_PARAM_b;
  } ;

  union {
    __IOM uint32_t BBP_RX_PARAM;                /*!< (@ 0x00000184) BBP_RX_PARAM                                               */

    struct {
      __IOM uint32_t RX_PHR_MCS : 3;            /*!< [2..0] rx_phr_mcs                                                         */
      __IM  uint32_t            : 1;
      __IOM uint32_t RX_PBNUM   : 3;            /*!< [6..4] rx_pbnum                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t RX_PBSIZE_INDEX : 3;       /*!< [10..8] rx_pbsize_index                                                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t RX_PSDU_MCS : 3;           /*!< [14..12] rx_psdu_mcs                                                      */
    } BBP_RX_PARAM_b;
  } ;

  union {
    __IOM uint32_t BBP_RX_BASE_ADDR;            /*!< (@ 0x00000188) BBP_RX_BASE_ADDR                                           */

    struct {
      __IOM uint32_t RX_BASE_ADDR : 32;         /*!< [31..0] rx_base_addr                                                      */
    } BBP_RX_BASE_ADDR_b;
  } ;

  union {
    __IOM uint32_t BBP_TX_BASE_ADDR;            /*!< (@ 0x0000018C) BBP_TX_BASE_ADDR                                           */

    struct {
      __IOM uint32_t TX_BASE_ADDR : 32;         /*!< [31..0] tx_base_addr                                                      */
    } BBP_TX_BASE_ADDR_b;
  } ;

  union {
    __IOM uint32_t ENCRYPT0;                    /*!< (@ 0x00000190) ENCRYPT0                                                   */

    struct {
      __IOM uint32_t ENCRYPT_CODE0 : 32;        /*!< [31..0] encrypt_code0                                                     */
    } ENCRYPT0_b;
  } ;

  union {
    __IOM uint32_t ENCRYPT1;                    /*!< (@ 0x00000194) ENCRYPT1                                                   */

    struct {
      __IOM uint32_t ENCRYPT_CODE1 : 32;        /*!< [31..0] encrypt_code1                                                     */
    } ENCRYPT1_b;
  } ;

  union {
    __IOM uint32_t RXWDTCFG;                    /*!< (@ 0x00000198) RXWDTCFG                                                   */

    struct {
      __IOM uint32_t WDT_TIMEOUT_THR : 32;      /*!< [31..0] wdt_timeout_thr                                                   */
    } RXWDTCFG_b;
  } ;

  union {
    __IOM uint32_t SIG_PWR;                     /*!< (@ 0x0000019C) SIG_PWR                                                    */

    struct {
      __IOM uint32_t SIG_POW    : 32;           /*!< [31..0] sig_pow                                                           */
    } SIG_PWR_b;
  } ;

  union {
    __IOM uint32_t NOISE_PWR;                   /*!< (@ 0x000001A0) NOISE_PWR                                                  */

    struct {
      __IOM uint32_t NOS_POW    : 32;           /*!< [31..0] nos_pow                                                           */
    } NOISE_PWR_b;
  } ;

  union {
    __IOM uint32_t FSM_STATE;                   /*!< (@ 0x000001A4) FSM_STATE                                                  */

    struct {
      __IOM uint32_t COPIER_CS  : 4;            /*!< [3..0] copier_cs                                                          */
      __IOM uint32_t CHE_CS     : 4;            /*!< [7..4] che_cs                                                             */
      __IOM uint32_t RX_CTR_CS  : 3;            /*!< [10..8] rx_ctr_cs                                                         */
      __IM  uint32_t            : 1;
      __IOM uint32_t TURBO_DEC_CS : 4;          /*!< [15..12] turbo_dec_cs                                                     */
      __IOM uint32_t TX_CTR_CS  : 5;            /*!< [20..16] tx_ctr_cs                                                        */
      __IOM uint32_t FI_FQ_CS   : 3;            /*!< [23..21] fi_fq_cs                                                         */
    } FSM_STATE_b;
  } ;

  union {
    __IOM uint32_t LTF_FFT_COEFF;               /*!< (@ 0x000001A8) LTF_FFT_COEFF                                              */

    struct {
      __IOM uint32_t LTF_FFT_COEFF : 14;        /*!< [13..0] ltf_fft_coeff                                                     */
    } LTF_FFT_COEFF_b;
  } ;

  union {
    __IOM uint32_t LTF_IFFT_COEFF;              /*!< (@ 0x000001AC) LTF_IFFT_COEFF                                             */

    struct {
      __IOM uint32_t LTF_IFFT_COEFF : 14;       /*!< [13..0] ltf_ifft_coeff                                                    */
    } LTF_IFFT_COEFF_b;
  } ;

  union {
    __IOM uint32_t RX_FFT_COEFF;                /*!< (@ 0x000001B0) RX_FFT_COEFF                                               */

    struct {
      __IOM uint32_t RX_FFT_COEFF : 14;         /*!< [13..0] rx_fft_coeff                                                      */
    } RX_FFT_COEFF_b;
  } ;

  union {
    __IOM uint32_t TX_IFFT_COEFF;               /*!< (@ 0x000001B4) TX_IFFT_COEFF                                              */

    struct {
      __IOM uint32_t TX_IFFT_COEFF : 14;        /*!< [13..0] tx_ifft_coeff                                                     */
    } TX_IFFT_COEFF_b;
  } ;

  union {
    __IOM uint32_t FI_FLT00_COEF[9];            /*!< (@ 0x000001B8) FI_FLT00_COEF                                              */

    struct {
      __IOM uint32_t FI_F00_COEF0 : 12;         /*!< [11..0] fi_f00_coef0                                                      */
      __IM  uint32_t            : 4;
      __IOM uint32_t FI_F00_COEF1 : 12;         /*!< [27..16] fi_f00_coef1                                                     */
    } FI_FLT00_COEF_b[9];
  } ;

  union {
    __IOM uint32_t FI_FLT10_COEF[9];            /*!< (@ 0x000001DC) FI_FLT10_COEF0                                             */

    struct {
      __IOM uint32_t FI_F10_COEF0 : 12;         /*!< [11..0] fi_f10_coef0                                                      */
      __IM  uint32_t            : 4;
      __IOM uint32_t FI_F10_COEF1 : 12;         /*!< [27..16] fi_f10_coef1                                                     */
    } FI_FLT10_COEF_b[9];
  } ;

  union {
    __IOM uint32_t FI_FLT20_COEF[9];            /*!< (@ 0x00000200) FI_FLT20_COEF[0..8]                                        */

    struct {
      __IOM uint32_t FI_F20_COEF0 : 12;         /*!< [11..0] fi_f20_coef0                                                      */
      __IM  uint32_t            : 4;
      __IOM uint32_t FI_F20_COEF1 : 12;         /*!< [27..16] fi_f20_coef1                                                     */
    } FI_FLT20_COEF_b[9];
  } ;

  union {
    __IOM uint32_t RX_CFO_OFFSET;               /*!< (@ 0x00000224) RX_CFO_OFFSET                                              */

    struct {
      __IOM uint32_t CORR_CFO_OFFSET : 20;      /*!< [19..0] corr_cfo_offset                                                   */
      __IM  uint32_t            : 4;
      __IOM uint32_t ICO        : 5;            /*!< [28..24] ico                                                              */
    } RX_CFO_OFFSET_b;
  } ;

  union {
    __IOM uint32_t CO_TOT;                      /*!< (@ 0x00000228) CO_TOT                                                     */

    struct {
      __IOM uint32_t CO_TOT     : 24;           /*!< [23..0] co_tot                                                            */
    } CO_TOT_b;
  } ;

  union {
    __IOM uint32_t HF_CFG5;                     /*!< (@ 0x0000022C) HF_CFG5                                                    */

    struct {
      __IOM uint32_t TX_HF_COEF0 : 14;          /*!< [13..0] tx_hf_coef0                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t TX_HF_COEF1 : 14;          /*!< [29..16] tx_hf_coef1                                                      */
    } HF_CFG5_b;
  } ;

  union {
    __IOM uint32_t HF_CFG6;                     /*!< (@ 0x00000230) HF_CFG6                                                    */

    struct {
      __IOM uint32_t TX_HF_COEF2 : 14;          /*!< [13..0] tx_hf_coef2                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t TX_HF_COEF3 : 14;          /*!< [29..16] tx_hf_coef3                                                      */
    } HF_CFG6_b;
  } ;

  union {
    __IOM uint32_t HF_CFG7;                     /*!< (@ 0x00000234) HF_CFG7                                                    */

    struct {
      __IOM uint32_t TX_HF_COEF4 : 14;          /*!< [13..0] tx_hf_coef4                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t TX_HF_COEF5 : 14;          /*!< [29..16] tx_hf_coef5                                                      */
    } HF_CFG7_b;
  } ;

  union {
    __IOM uint32_t HF_CFG8;                     /*!< (@ 0x00000238) HF_CFG8                                                    */

    struct {
      __IOM uint32_t TX_HF_COEF6 : 14;          /*!< [13..0] tx_hf_coef6                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t TX_HF_COEF7 : 14;          /*!< [29..16] tx_hf_coef7                                                      */
    } HF_CFG8_b;
  } ;

  union {
    __IOM uint32_t BIQ_CFG9;                    /*!< (@ 0x0000023C) BIQ_CFG9                                                   */

    struct {
      __IOM uint32_t TX_BIQ0_COEF1 : 14;        /*!< [13..0] tx_biq0_coef1                                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t TX_BIQ0_COEF0 : 14;        /*!< [29..16] tx_biq0_coef0                                                    */
    } BIQ_CFG9_b;
  } ;

  union {
    __IOM uint32_t BIQ_CFG10;                   /*!< (@ 0x00000240) BIQ_CFG10                                                  */

    struct {
      __IOM uint32_t TX_BIQ0_COEF3 : 14;        /*!< [13..0] tx_biq0_coef3                                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t TX_BIQ0_COEF2 : 14;        /*!< [29..16] tx_biq0_coef2                                                    */
    } BIQ_CFG10_b;
  } ;

  union {
    __IOM uint32_t BIQ_CFG11;                   /*!< (@ 0x00000244) BIQ_CFG11                                                  */

    struct {
      __IOM uint32_t TX_BIQ1_COEF1 : 14;        /*!< [13..0] tx_biq1_coef1                                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t TX_BIQ1_COEF0 : 14;        /*!< [29..16] tx_biq1_coef0                                                    */
    } BIQ_CFG11_b;
  } ;

  union {
    __IOM uint32_t BIQ_CFG12;                   /*!< (@ 0x00000248) BIQ_CFG12                                                  */

    struct {
      __IOM uint32_t TX_BIQ1_COEF3 : 14;        /*!< [13..0] tx_biq1_coef3                                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t TX_BIQ1_COEF2 : 14;        /*!< [29..16] tx_biq1_coef2                                                    */
    } BIQ_CFG12_b;
  } ;

  union {
    __IOM uint32_t BIQ_CFG13;                   /*!< (@ 0x0000024C) BIQ_CFG13                                                  */

    struct {
      __IOM uint32_t TX_BIQ2_COEF1 : 14;        /*!< [13..0] tx_biq2_coef1                                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t TX_BIQ2_COEF0 : 14;        /*!< [29..16] tx_biq2_coef0                                                    */
    } BIQ_CFG13_b;
  } ;

  union {
    __IOM uint32_t BIQ_CFG14;                   /*!< (@ 0x00000250) BIQ_CFG14                                                  */

    struct {
      __IOM uint32_t TX_BIQ2_COEF3 : 14;        /*!< [13..0] tx_biq2_coef3                                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t TX_BIQ2_COEF2 : 14;        /*!< [29..16] tx_biq2_coef2                                                    */
    } BIQ_CFG14_b;
  } ;

  union {
    __IOM uint32_t BIQ_CFG15;                   /*!< (@ 0x00000254) BIQ_CFG15                                                  */

    struct {
      __IOM uint32_t TX_BIQ3_COEF1 : 14;        /*!< [13..0] tx_biq3_coef1                                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t TX_BIQ3_COEF0 : 14;        /*!< [29..16] tx_biq3_coef0                                                    */
    } BIQ_CFG15_b;
  } ;

  union {
    __IOM uint32_t BIQ_CFG16;                   /*!< (@ 0x00000258) BIQ_CFG16                                                  */

    struct {
      __IOM uint32_t TX_BIQ3_COEF3 : 14;        /*!< [13..0] tx_biq3_coef3                                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t TX_BIQ3_COEF2 : 14;        /*!< [29..16] tx_biq3_coef2                                                    */
    } BIQ_CFG16_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG0;                     /*!< (@ 0x0000025C) RX_ACF_CFG0                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF0 : 14;          /*!< [13..0] rx_acf_coef0                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF1 : 14;          /*!< [29..16] rx_acf_coef1                                                      */
    } RX_ACF_CFG0_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG1;                     /*!< (@ 0x00000260) RX_ACF_CFG1                                                   */

    struct {
      __IOM uint32_t RX_ACF_COEF2 : 14;          /*!< [13..0] rx_acf_coef2                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF3 : 14;         /*!< [29..16] rx_acf_coef3                                                      */
    } RX_ACF_CFG1_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG2;                     /*!< (@ 0x00000264) RX_ACF_CFG2                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF4 : 14;          /*!< [13..0] rx_acf_coef4                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF5 : 14;          /*!< [29..16] rx_acf_coef5                                                      */
    } RX_ACF_CFG2_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG3;                     /*!< (@ 0x00000268) RX_ACF_CFG3                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF6 : 14;          /*!< [13..0] rx_acf_coef6                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF7 : 14;          /*!< [29..16] rx_acf_coef7                                                      */
    } RX_ACF_CFG3_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG4;                     /*!< (@ 0x0000026C) RX_ACF_CFG4                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF8 : 14;          /*!< [13..0] rx_acf_coef8                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF9 : 14;          /*!< [29..16] rx_acf_coef9                                                      */
    } RX_ACF_CFG4_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG5;                     /*!< (@ 0x00000270) RX_ACF_CFG5                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF10 : 14;          /*!< [13..0] rx_acf_coef10                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF11 : 14;          /*!< [29..16] rx_acf_coef11                                                      */
    } RX_ACF_CFG5_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG6;                     /*!< (@ 0x00000274) RX_ACF_CFG6                                                   */

    struct {
      __IOM uint32_t RX_ACF_COEF12 : 14;          /*!< [13..0] rx_acf_coef12                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF13 : 14;         /*!< [29..16] rx_acf_coef13                                                      */
    } RX_ACF_CFG6_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG7;                     /*!< (@ 0x00000278) RX_ACF_CFG7                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF14 : 14;          /*!< [13..0] rx_acf_coef14                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF15 : 14;          /*!< [29..16] rx_acf_coef15                                                      */
    } RX_ACF_CFG7_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG8;                     /*!< (@ 0x0000027C) RX_ACF_CFG8                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF16 : 14;          /*!< [13..0] rx_acf_coef16                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF17 : 14;          /*!< [29..16] rx_acf_coef17                                                      */
    } RX_ACF_CFG8_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG9;                     /*!< (@ 0x00000280) RX_ACF_CFG9                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF18 : 14;          /*!< [13..0] rx_acf_coef18                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF19 : 14;          /*!< [29..16] rx_acf_coef19                                                      */
    } RX_ACF_CFG9_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG10;                     /*!< (@ 0x00000284) RX_ACF_CFG10                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF20 : 14;          /*!< [13..0] rx_acf_coef20                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF21 : 14;          /*!< [29..16] rx_acf_coef21                                                      */
    } RX_ACF_CFG10_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG11;                     /*!< (@ 0x00000288) RX_ACF_CFG11                                                   */

    struct {
      __IOM uint32_t RX_ACF_COEF22 : 14;          /*!< [13..0] rx_acf_coef22                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF23 : 14;         /*!< [29..16] rx_acf_coef23                                                      */
    } RX_ACF_CFG11_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG12;                     /*!< (@ 0x0000028C) RX_ACF_CFG12                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF24 : 14;          /*!< [13..0] rx_acf_coef24                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF25 : 14;          /*!< [29..16] rx_acf_coef25                                                      */
    } RX_ACF_CFG12_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG13;                     /*!< (@ 0x00000290) RX_ACF_CFG13                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF26 : 14;          /*!< [13..0] rx_acf_coef26                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF27 : 14;          /*!< [29..16] rx_acf_coef27                                                      */
    } RX_ACF_CFG13_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG14;                     /*!< (@ 0x00000294) RX_ACF_CFG14                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF28 : 14;          /*!< [13..0] rx_acf_coef28                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF29 : 14;          /*!< [29..16] rx_acf_coef29                                                      */
    } RX_ACF_CFG14_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG15;                     /*!< (@ 0x00000298) RX_ACF_CFG15                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF30 : 14;          /*!< [13..0] rx_acf_coef30                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF31 : 14;          /*!< [29..16] rx_acf_coef31                                                      */
    } RX_ACF_CFG15_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG16;                     /*!< (@ 0x0000029C) RX_ACF_CFG16                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF32 : 14;          /*!< [13..0] rx_acf_coef32                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF33 : 14;          /*!< [29..16] rx_acf_coef33                                                      */
    } RX_ACF_CFG16_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG17;                     /*!< (@ 0x000002A0) RX_ACF_CFG17                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF34 : 14;          /*!< [13..0] rx_acf_coef34                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF35 : 14;          /*!< [29..16] rx_acf_coef35                                                      */
    } RX_ACF_CFG17_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG18;                     /*!< (@ 0x000002A4) RX_ACF_CFG18                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF36 : 14;          /*!< [13..0] rx_acf_coef36                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF37 : 14;          /*!< [29..16] rx_acf_coef37                                                      */
    } RX_ACF_CFG18_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG19;                     /*!< (@ 0x000002A8) RX_ACF_CFG19                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF38 : 14;          /*!< [13..0] rx_acf_coef38                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF39 : 14;          /*!< [29..16] rx_acf_coef39                                                      */
    } RX_ACF_CFG19_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG20;                     /*!< (@ 0x000002AC) RX_ACF_CFG20                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF40 : 14;          /*!< [13..0] rx_acf_coef40                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF41 : 14;          /*!< [29..16] rx_acf_coef41                                                      */
    } RX_ACF_CFG20_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG21;                     /*!< (@ 0x000002B0) RX_ACF_CFG21                                                   */

    struct {
      __IOM uint32_t RX_ACF_COEF42 : 14;          /*!< [13..0] rx_acf_coef42                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF43 : 14;         /*!< [29..16] rx_acf_coef43                                                      */
    } RX_ACF_CFG21_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG22;                     /*!< (@ 0x000002B4) RX_ACF_CFG22                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF44 : 14;          /*!< [13..0] rx_acf_coef44                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF45 : 14;          /*!< [29..16] rx_acf_coef45                                                      */
    } RX_ACF_CFG22_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG23;                     /*!< (@ 0x000002B8) RX_ACF_CFG23                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF46 : 14;          /*!< [13..0] rx_acf_coef46                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF47 : 14;          /*!< [29..16] rx_acf_coef47                                                      */
    } RX_ACF_CFG23_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG24;                     /*!< (@ 0x000002BC) RX_ACF_CFG24                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF48 : 14;          /*!< [13..0] rx_acf_coef48                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF49 : 14;          /*!< [29..16] rx_acf_coef49                                                      */
    } RX_ACF_CFG24_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG25;                     /*!< (@ 0x000002C0) RX_ACF_CFG25                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF50 : 14;          /*!< [13..0] rx_acf_coef50                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF51 : 14;          /*!< [29..16] rx_acf_coef51                                                      */
    } RX_ACF_CFG25_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG26;                     /*!< (@ 0x000002C4) RX_ACF_CFG26                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF52 : 14;          /*!< [13..0] rx_acf_coef52                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF53 : 14;          /*!< [29..16] rx_acf_coef53                                                      */
    } RX_ACF_CFG26_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG27;                     /*!< (@ 0x000002C8) RX_ACF_CFG27                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF54 : 14;          /*!< [13..0] rx_acf_coef54                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF55 : 14;          /*!< [29..16] rx_acf_coef55                                                      */
    } RX_ACF_CFG27_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG28;                     /*!< (@ 0x000002CC) RX_ACF_CFG28                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF56 : 14;          /*!< [13..0] rx_acf_coef56                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF57 : 14;          /*!< [29..16] rx_acf_coef57                                                      */
    } RX_ACF_CFG28_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG29;                     /*!< (@ 0x000002D0) RX_ACF_CFG29                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF58 : 14;          /*!< [13..0] rx_acf_coef58                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF59 : 14;          /*!< [29..16] rx_acf_coef59                                                      */
    } RX_ACF_CFG29_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG30;                     /*!< (@ 0x000002D4) RX_ACF_CFG30                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF60 : 14;          /*!< [13..0] rx_acf_coef60                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF61 : 14;          /*!< [29..16] rx_acf_coef61                                                      */
    } RX_ACF_CFG30_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG31;                     /*!< (@ 0x000002D8) RX_ACF_CFG31                                                   */

    struct {
      __IOM uint32_t RX_ACF_COEF62 : 14;          /*!< [13..0] rx_acf_coef62                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF63 : 14;         /*!< [29..16] rx_acf_coef63                                                      */
    } RX_ACF_CFG31_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG32;                     /*!< (@ 0x000002DC) RX_ACF_CFG32                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF64 : 14;          /*!< [13..0] rx_acf_coef64                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF65 : 14;          /*!< [29..16] rx_acf_coef65                                                      */
    } RX_ACF_CFG32_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG33;                     /*!< (@ 0x000002E0) RX_ACF_CFG33                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF66 : 14;          /*!< [13..0] rx_acf_coef66                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF67 : 14;          /*!< [29..16] rx_acf_coef67                                                      */
    } RX_ACF_CFG33_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG34;                     /*!< (@ 0x000002E4) RX_ACF_CFG34                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF68 : 14;          /*!< [13..0] rx_acf_coef68                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF69 : 14;          /*!< [29..16] rx_acf_coef69                                                      */
    } RX_ACF_CFG34_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG35;                     /*!< (@ 0x000002E8) RX_ACF_CFG35                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF70 : 14;          /*!< [13..0] rx_acf_coef70                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF71 : 14;          /*!< [29..16] rx_acf_coef71                                                      */
    } RX_ACF_CFG35_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG36;                     /*!< (@ 0x000002EC) RX_ACF_CFG36                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF72 : 14;          /*!< [13..0] rx_acf_coef72                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF73 : 14;          /*!< [29..16] rx_acf_coef73                                                      */
    } RX_ACF_CFG36_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG37;                     /*!< (@ 0x000002F0) RX_ACF_CFG37                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF74 : 14;          /*!< [13..0] rx_acf_coef74                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF75 : 14;          /*!< [29..16] rx_acf_coef75                                                      */
    } RX_ACF_CFG37_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG38;                     /*!< (@ 0x000002F4) RX_ACF_CFG38                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF76 : 14;          /*!< [13..0] rx_acf_coef76                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF77 : 14;          /*!< [29..16] rx_acf_coef77                                                      */
    } RX_ACF_CFG38_b;
  } ;

  union {
    __IOM uint32_t RX_ACF_CFG39;                     /*!< (@ 0x000002F8) RX_ACF_CFG39                                                    */

    struct {
      __IOM uint32_t RX_ACF_COEF78 : 14;          /*!< [13..0] rx_acf_coef78                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_ACF_COEF79 : 14;          /*!< [29..16] rx_acf_coef79                                                      */
    } RX_ACF_CFG39_b;
  } ;
} HRF_Type;                                     /*!< Size = 604 (0x25c)                                                        */



/* =========================================================================================================================== */
/* ================                                           BPLC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief BPLC (BPLC)
  */

typedef struct {                                /*!< (@ 0x40500000) BPLC Structure                                             */

  union {
    __IOM uint32_t PHY_ATTRIBUTE0;              /*!< (@ 0x00000000) PHY_Attribute0                                             */

    struct {
      __IOM uint32_t CRC_ERR_INSERT : 5;        /*!< [4..0] crc_err_insert                                                     */
      __IOM uint32_t FC_MAP_MODE : 2;           /*!< [6..5] fc_map_mode                                                        */
      __IM  uint32_t            : 1;
      __IOM uint32_t FC_SYM_NUM : 4;            /*!< [11..8] fc_sym_num                                                        */
      __IOM uint32_t TURBO_DEC_ITER_THR : 4;    /*!< [15..12] turbo_dec_iter_thr                                               */
      __IOM uint32_t DISABLE_PL_CRC : 1;        /*!< [16..16] disable_pl_crc                                                   */
      __IOM uint32_t PL_CRC_SEL : 1;            /*!< [17..17] pl_crc_sel                                                       */
      __IOM uint32_t SCRAMBLE_RST_MODE : 1;     /*!< [18..18] scramble_rst_mode                                                */
      __IOM uint32_t NIBBLE_ROT_MODE : 1;       /*!< [19..19] nibble_rot_mode                                                  */
      __IOM uint32_t PUNC_MODE_DIR_OPT : 1;     /*!< [20..20] punc_mode_dir_opt                                                */
      __IOM uint32_t IEEE_PROTOCOL : 1;         /*!< [21..21] ieee_protocol                                                    */
      __IOM uint32_t PROTOCOL_VERSION : 1;      /*!< [22..22] protocol_version                                                 */
      __IOM uint32_t OVER_WRITE_RXMEM_EN : 1;   /*!< [23..23] over_write_rxmem_en                                              */
      __IOM uint32_t AMP_MAP_ENABLE : 1;        /*!< [24..24] amp_map_enable                                                   */
      __IOM uint32_t SNR_THR    : 3;            /*!< [27..25] snr_thr                                                          */
      __IOM uint32_t MRC_ENABLE : 1;            /*!< [28..28] mrc_enable                                                       */
    } PHY_ATTRIBUTE0_b;
  } ;

  union {
    __IOM uint32_t PHY_ATTRIBUTE1;              /*!< (@ 0x00000004) PHY_Attribute1                                             */

    struct {
      __IOM uint32_t RI_LEN     : 8;            /*!< [7..0] ri_len                                                             */
      __IOM uint32_t PI_LEN0    : 9;            /*!< [16..8] pi_len0                                                           */
      __IOM uint32_t PI_LEN1    : 9;            /*!< [25..17] pi_len1                                                          */
    } PHY_ATTRIBUTE1_b;
  } ;

  union {
    __IOM uint32_t PHY_ATTRIBUTE2;              /*!< (@ 0x00000008) PHY_Attribute2                                             */

    struct {
      __IOM uint32_t END_TONE_NUM : 9;          /*!< [8..0] end_tone_num                                                       */
      __IOM uint32_t START_TONE_NUM : 9;        /*!< [17..9] start_tone_num                                                    */
      __IOM uint32_t VALID_TONE_NUM : 9;        /*!< [26..18] valid_tone_num                                                   */
    } PHY_ATTRIBUTE2_b;
  } ;

  union {
    __IOM uint32_t BBP_CONTROL;                 /*!< (@ 0x0000000C) BBP_Control                                                */

    struct {
      __IOM uint32_t BPLC_ENABLE : 1;           /*!< [0..0] bplc_enable                                                        */
      __IOM uint32_t TX_IMME_START : 1;         /*!< [1..1] tx_imme_start                                                      */
      __IOM uint32_t SOFT_RST_REG : 1;          /*!< [2..2] soft_rst_reg                                                       */
      __IOM uint32_t INI_TX_PREAMBLE : 1;       /*!< [3..3] ini_tx_preamble                                                    */
      __IOM uint32_t INI_PREAMBLE : 1;          /*!< [4..4] ini_preamble                                                       */
      __IOM uint32_t DAC_MSB_OPT : 1;           /*!< [5..5] dac_msb_opt                                                        */
      __IOM uint32_t ADC_MSB_OPT : 1;           /*!< [6..6] adc_msb_opt                                                        */
      __IOM uint32_t DAC_CLK_INV : 1;           /*!< [7..7] dac_clk_inv                                                        */
      __IOM uint32_t ADC_CLK_INV : 1;           /*!< [8..8] adc_clk_inv                                                        */
      __IM  uint32_t            : 21;
      __IOM uint32_t FORCE_CLK_EN : 1;          /*!< [30..30] force_clk_en                                                     */
      __IOM uint32_t HCLK_EN    : 1;            /*!< [31..31] hclk_en                                                          */
    } BBP_CONTROL_b;
  } ;

  union {
    __IOM uint32_t BBP_STATUS;                  /*!< (@ 0x00000010) BBP_Status                                                 */

    struct {
      __IOM uint32_t NTB_MATCH_FLAG : 8;        /*!< [7..0] ntb_match_flag                                                     */
      __IOM uint32_t RX_PL_RCV_FLAG : 4;        /*!< [11..8] rx_pl_rcv_flag                                                    */
      __IOM uint32_t TX_END_FLAG : 1;           /*!< [12..12] tx_end_flag                                                      */
      __IOM uint32_t RX_OVER_FLOW : 1;          /*!< [13..13] rx_over_flow                                                     */
      __IOM uint32_t RX_END_FLAG : 1;           /*!< [14..14] rx_end_flag                                                      */
      __IOM uint32_t RX_FC_RCV_FLAG : 1;        /*!< [15..15] rx_fc_rcv_flag                                                   */
      __IOM uint32_t FRAMESYNCED_FLAG : 1;      /*!< [16..16] framesynced_flag                                                 */
      __IOM uint32_t SYNC_BEGIN_FLAG : 1;       /*!< [17..17] sync_begin_flag                                                  */
      __IOM uint32_t TX_START_FAIL : 1;         /*!< [18..18] tx_start_fail                                                    */
      __IOM uint32_t TX_DMA_DONE_FLAG : 1;      /*!< [19..19] tx_dma_done_flag                                                 */
      __IOM uint32_t NTB_TX_START_SUCCESS : 1;  /*!< [20..20] ntb_tx_start_success                                             */
      __IOM uint32_t PREAM_INI_END_FLAG : 1;    /*!< [21..21] pream_ini_end_flag                                               */
      __IOM uint32_t NBI_DET_END_FLAG : 1;      /*!< [22..22] nbi_det_end_flag                                                 */
      __IM  uint32_t            : 2;
      __IOM uint32_t RX_PL_CRC_RES : 4;         /*!< [28..25] rx_pl_crc_res                                                    */
      __IOM uint32_t SYNC_BEGIN : 1;            /*!< [29..29] sync_begin                                                       */
      __IOM uint32_t RX_FC_CRC_RES : 1;         /*!< [30..30] rx_fc_crc_res                                                    */
      __IOM uint32_t TX_RX_MODE : 1;            /*!< [31..31] tx_rx_mode                                                       */
    } BBP_STATUS_b;
  } ;

  union {
    __IOM uint32_t BBP_INT_EN;                  /*!< (@ 0x00000014) BBP_Int_En                                                 */

    struct {
      __IOM uint32_t NTB_MATCH_INT_EN : 8;      /*!< [7..0] ntb_match_int_en                                                   */
      __IOM uint32_t RX_PL_RCV_INT_EN : 4;      /*!< [11..8] rx_pl_rcv_int_en                                                  */
      __IOM uint32_t TX_END_INT_EN : 1;         /*!< [12..12] tx_end_int_en                                                    */
      __IOM uint32_t RX_OVER_FLOW_INT_EN : 1;   /*!< [13..13] rx_over_flow_int_en                                              */
      __IOM uint32_t RX_END_INT_EN : 1;         /*!< [14..14] rx_end_int_en                                                    */
      __IOM uint32_t RX_FC_RCV_INT_EN : 1;      /*!< [15..15] rx_fc_rcv_int_en                                                 */
      __IOM uint32_t FRAMESYNCED_INT_EN : 1;    /*!< [16..16] framesynced_int_en                                               */
      __IOM uint32_t SYNC_BEGIN_INT_EN : 1;     /*!< [17..17] sync_begin_int_en                                                */
      __IOM uint32_t TX_START_FAIL_INT_EN : 1;  /*!< [18..18] tx_start_fail_int_en                                             */
      __IOM uint32_t TX_DMA_DONE_INT_EN : 1;    /*!< [19..19] tx_dma_done_int_en                                               */
      __IOM uint32_t NTB_TX_START_INT_EN : 1;   /*!< [20..20] ntb_tx_start_int_en                                              */
      __IOM uint32_t PREAM_INI_INT_EN : 1;      /*!< [21..21] pream_ini_int_en                                                 */
      __IOM uint32_t NBI_DET_END_INT_EN : 1;    /*!< [22..22] nbi_det_end_int_en                                               */
    } BBP_INT_EN_b;
  } ;

  union {
    __IOM uint32_t TONEMASKTABLE[16];           /*!< (@ 0x00000018) tone_mask_tab0                                             */

    struct {
      __IOM uint32_t TONE_MASK_TAB0 : 32;       /*!< [31..0] tone_mask_tab0                                                    */
    } TONEMASKTABLE_b[16];
  } ;

  union {
    __IOM uint32_t FC_ADDR_OFFSET0;             /*!< (@ 0x00000058) fc_addr_offset0                                            */

    struct {
      __IOM uint32_t FC_ADDR_OFFSET3 : 8;       /*!< [7..0] fc_addr_offset3                                                    */
      __IOM uint32_t FC_ADDR_OFFSET2 : 8;       /*!< [15..8] fc_addr_offset2                                                   */
      __IOM uint32_t FC_ADDR_OFFSET1 : 8;       /*!< [23..16] fc_addr_offset1                                                  */
      __IOM uint32_t FC_ADDR_OFFSET0 : 8;       /*!< [31..24] fc_addr_offset0                                                  */
    } FC_ADDR_OFFSET0_b;
  } ;

  union {
    __IOM uint32_t FC_ADDR_OFFSET1;             /*!< (@ 0x0000005C) fc_addr_offset1                                            */

    struct {
      __IOM uint32_t FC_ADDR_OFFSET7 : 8;       /*!< [7..0] fc_addr_offset7                                                    */
      __IOM uint32_t FC_ADDR_OFFSET6 : 8;       /*!< [15..8] fc_addr_offset6                                                   */
      __IOM uint32_t FC_ADDR_OFFSET5 : 8;       /*!< [23..16] fc_addr_offset5                                                  */
      __IOM uint32_t FC_ADDR_OFFSET4 : 8;       /*!< [31..24] fc_addr_offset4                                                  */
    } FC_ADDR_OFFSET1_b;
  } ;

  union {
    __IOM uint32_t FC_ADDR_OFFSET2;             /*!< (@ 0x00000060) fc_addr_offset2                                            */

    struct {
      __IOM uint32_t FC_ADDR_OFFSET11 : 8;      /*!< [7..0] fc_addr_offset11                                                   */
      __IOM uint32_t FC_ADDR_OFFSET10 : 8;      /*!< [15..8] fc_addr_offset10                                                  */
      __IOM uint32_t FC_ADDR_OFFSET9 : 8;       /*!< [23..16] fc_addr_offset9                                                  */
      __IOM uint32_t FC_ADDR_OFFSET8 : 8;       /*!< [31..24] fc_addr_offset8                                                  */
    } FC_ADDR_OFFSET2_b;
  } ;

  union {
    __IOM uint32_t ENCRYPT0;                    /*!< (@ 0x00000064) ENCRYPT0                                                   */

    struct {
      __IOM uint32_t ENCRYPT_CODE0 : 32;        /*!< [31..0] encrypt_code0                                                     */
    } ENCRYPT0_b;
  } ;

  union {
    __IOM uint32_t ENCRYPT1;                    /*!< (@ 0x00000068) ENCRYPT1                                                   */

    struct {
      __IOM uint32_t ENCRYPT_CODE1 : 32;        /*!< [31..0] encrypt_code1                                                     */
    } ENCRYPT1_b;
  } ;

  union {
    __IOM uint32_t FFT_COEFF0;                  /*!< (@ 0x0000006C) FFT_COEFF0                                                 */

    struct {
      __IOM uint32_t GEN_LOCAL_PRE_IFFT_COEFF : 10;/*!< [9..0] gen_local_pre_ifft_coeff                                        */
      __IOM uint32_t GEN_PRE_IFFT_COEFF : 10;   /*!< [19..10] gen_pre_ifft_coeff                                               */
      __IM  uint32_t            : 4;
      __IOM uint32_t OFDM_POS_PRE : 8;          /*!< [31..24] ofdm_pos_pre                                                     */
    } FFT_COEFF0_b;
  } ;

  union {
    __IOM uint32_t FFT_COEFF1;                  /*!< (@ 0x00000070) FFT_COEFF1                                                 */

    struct {
      __IOM uint32_t TX_PL_IFFT_COEFF : 10;     /*!< [9..0] tx_pl_ifft_coeff                                                   */
      __IOM uint32_t TX_FC_IFFT_COEFF : 10;     /*!< [19..10] tx_fc_ifft_coeff                                                 */
    } FFT_COEFF1_b;
  } ;

  union {
    __IOM uint32_t FFT_COEFF2;                  /*!< (@ 0x00000074) FFT_COEFF2                                                 */

    struct {
      __IOM uint32_t RX_PL_FFT_COEFF : 10;      /*!< [9..0] rx_pl_fft_coeff                                                    */
      __IOM uint32_t RX_FC_FFT_COEFF : 10;      /*!< [19..10] rx_fc_fft_coeff                                                  */
    } FFT_COEFF2_b;
  } ;

  union {
    __IOM uint32_t FFT_COEFF3;                  /*!< (@ 0x00000078) FFT_COEFF3                                                 */

    struct {
      __IOM uint32_t NBI_DET_FFT_COEFF : 10;    /*!< [9..0] nbi_det_fft_coeff                                                  */
      __IOM uint32_t SYNC_FFT_COEFF : 10;       /*!< [19..10] sync_fft_coeff                                                   */
    } FFT_COEFF3_b;
  } ;

  union {
    __IOM uint32_t CORR_ADJ_CFG0;               /*!< (@ 0x0000007C) CORR_ADJ_CFG0                                              */

    struct {
      __IOM uint32_t CORR_THR_MAX : 20;         /*!< [19..0] corr_thr_max                                                      */
      __IOM uint32_t ADD_STEP_THR : 10;         /*!< [29..20] add_step_thr                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t AUTO_ADJ_CORR_THR_EN : 1;  /*!< [31..31] auto_adj_corr_thr_en                                             */
    } CORR_ADJ_CFG0_b;
  } ;

  union {
    __IOM uint32_t CORR_ADJ_CFG1;               /*!< (@ 0x00000080) CORR_ADJ_CFG1                                              */

    struct {
      __IOM uint32_t CORR_THR_MIN : 20;         /*!< [19..0] corr_thr_min                                                      */
      __IOM uint32_t MIN_STEP_THR : 10;         /*!< [29..20] min_step_thr                                                     */
    } CORR_ADJ_CFG1_b;
  } ;

  union {
    __IOM uint32_t CORR_ADJ_CFG2;               /*!< (@ 0x00000084) CORR_ADJ_CFG2                                              */

    struct {
      __IOM uint32_t CORR_THR_MARGIN : 16;      /*!< [15..0] corr_thr_margin                                                   */
      __IOM uint32_t THR_ADJ_STEP : 10;         /*!< [25..16] thr_adj_step                                                     */
    } CORR_ADJ_CFG2_b;
  } ;

  union {
    __IOM uint32_t CORR_ADJ_CFG3;               /*!< (@ 0x00000088) CORR_ADJ_CFG3                                              */

    struct {
      __IOM uint32_t FSYNC_INTERVAL_CNT : 32;   /*!< [31..0] fsync_interval_cnt                                                */
    } CORR_ADJ_CFG3_b;
  } ;

  union {
    __IOM uint32_t CORR_ADJ_RES;                /*!< (@ 0x0000008C) CORR_ADJ_RES                                               */

    struct {
      __IOM uint32_t AUTO_CORR_THR_ADJ_RES : 20;/*!< [19..0] auto_corr_thr_adj_res                                             */
    } CORR_ADJ_RES_b;
  } ;

  union {
    __IOM uint32_t FRAMESYNC0;                  /*!< (@ 0x00000090) FRAMESYNC0                                                 */

    struct {
      __IOM uint32_t AUTO_CORR_THR : 20;        /*!< [19..0] auto_corr_thr                                                     */
      __IOM uint32_t FS_MAX_WIN_LEN : 12;       /*!< [31..20] fs_max_win_len                                                   */
    } FRAMESYNC0_b;
  } ;

  union {
    __IOM uint32_t FRAMESYNC1;                  /*!< (@ 0x00000094) FRAMESYNC1                                                 */

    struct {
      __IOM uint32_t AUTO_CORR_SYNCM_THR : 16;  /*!< [15..0] auto_corr_syncm_thr                                               */
      __IOM uint32_t RATIO_THR  : 6;            /*!< [21..16] ratio_thr                                                        */
      __IOM uint32_t SYNCM_RATIO_THR : 6;       /*!< [27..22] syncm_ratio_thr                                                  */
      __IOM uint32_t SYNC_BEGIN_CONT_THR : 4;   /*!< [31..28] sync_begin_cont_thr                                              */
    } FRAMESYNC1_b;
  } ;

  union {
    __IOM uint32_t FRAMESYNC2;                  /*!< (@ 0x00000098) FRAMESYNC2                                                 */

    struct {
      __IOM uint32_t SYNCM_CHECK_LEN : 8;       /*!< [7..0] syncm_check_len                                                    */
      __IOM uint32_t CONT_DISTANCE_THR : 6;     /*!< [13..8] cont_distance_thr                                                 */
      __IOM uint32_t ALPHA      : 2;            /*!< [15..14] alpha                                                            */
      __IOM uint32_t CHECK_LEN  : 10;           /*!< [25..16] check_len                                                        */
      __IOM uint32_t SKIP_LEN   : 5;            /*!< [30..26] skip_len                                                         */
    } FRAMESYNC2_b;
  } ;

  union {
    __IOM uint32_t DMA_RX_BADDR;                /*!< (@ 0x0000009C) DMA_RX_BADDR                                               */

    struct {
      __IOM uint32_t RX_BASE_ADDR : 32;         /*!< [31..0] rx_base_addr                                                      */
    } DMA_RX_BADDR_b;
  } ;

  union {
    __IOM uint32_t DMA_TX_BADDR;                /*!< (@ 0x000000A0) DMA_TX_BADDR                                               */

    struct {
      __IOM uint32_t TX_BASE_ADDR : 32;         /*!< [31..0] tx_base_addr                                                      */
    } DMA_TX_BADDR_b;
  } ;

  union {
    __IOM uint32_t DMA_CONTROL;                 /*!< (@ 0x000000A4) DMA_Control                                                */

    struct {
      __IOM uint32_t RX_HMASTLOCK_EN : 1;       /*!< [0..0] rx_hmastlock_en                                                    */
      __IOM uint32_t TX_HMASTLOCK_EN : 1;       /*!< [1..1] tx_hmastlock_en                                                    */
    } DMA_CONTROL_b;
  } ;

  union {
    __IOM uint32_t NBI_CONTROL;                 /*!< (@ 0x000000A8) NBI_Control                                                */

    struct {
      __IOM uint32_t NBI_SOFT_START : 1;        /*!< [0..0] nbi_soft_start                                                     */
      __IOM uint32_t NBI_DET_SKIP_LEN : 10;     /*!< [10..1] nbi_det_skip_len                                                  */
      __IOM uint32_t STOP_NBI_DET : 1;          /*!< [11..11] stop_nbi_det                                                     */
      __IOM uint32_t NBI_FFT_MAX_CNT : 4;       /*!< [15..12] nbi_fft_max_cnt                                                  */
      __IOM uint32_t NBI_SMP_RATE : 8;          /*!< [23..16] nbi_smp_rate                                                     */
    } NBI_CONTROL_b;
  } ;

  union {
    __IOM uint32_t NBI_TIMER_CFG;               /*!< (@ 0x000000AC) NBI_TIMER_CFG                                              */

    struct {
      __IOM uint32_t NBI_DET_INTERVAL : 30;     /*!< [29..0] nbi_det_interval                                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t NBI_DET_TIMER_ENABLE : 1;  /*!< [31..31] nbi_det_timer_enable                                             */
    } NBI_TIMER_CFG_b;
  } ;

  union {
    __IOM uint32_t NBI_TIMER_STATUS;            /*!< (@ 0x000000B0) NBI_TIMER_STATUS                                           */

    struct {
      __IOM uint32_t NBI_TIMER_START_DISTANCE : 30;/*!< [29..0] nbi_timer_start_distance                                       */
      __IOM uint32_t NBI_DET_PEND : 1;          /*!< [30..30] nbi_det_pend                                                     */
      __IOM uint32_t NBI_DET_GOING : 1;         /*!< [31..31] nbi_det_going                                                    */
    } NBI_TIMER_STATUS_b;
  } ;

  union {
    __IOM uint32_t NBI_RES;                     /*!< (@ 0x000000B4) NBI_RES                                                    */

    struct {
      __IOM uint32_t NBI_MAX_AMP_TONE : 9;      /*!< [8..0] nbi_max_amp_tone                                                   */
      __IOM uint32_t NBI_MAX_TONE_VALID : 1;    /*!< [9..9] nbi_max_tone_valid                                                 */
      __IOM uint32_t NBI_AVE_AMP : 22;          /*!< [31..10] nbi_ave_amp                                                      */
    } NBI_RES_b;
  } ;

  union {
    __IOM uint32_t NTB_CONTROL;                 /*!< (@ 0x000000B8) NTB_Control                                                */

    struct {
      __IOM uint32_t TARGET_MATCH_ENABLE : 8;   /*!< [7..0] target_match_enable                                                */
      __IOM uint32_t ZC_CAPTURE_ENABLE : 8;     /*!< [15..8] zc_capture_enable                                                 */
      __IOM uint32_t TARGET_AUTO_ADJ_EN : 8;    /*!< [23..16] target_auto_adj_en                                               */
      __IOM uint32_t TX_TIME_AUTO_ADJ_EN : 1;   /*!< [24..24] tx_time_auto_adj_en                                              */
      __IOM uint32_t TIMER_TX_START_ENABLE : 1; /*!< [25..25] timer_tx_start_enable                                            */
      __IOM uint32_t NTB_ENABLE : 1;            /*!< [26..26] ntb_enable                                                       */
      __IOM uint32_t FRAMESYNC_CAPTURE_ENABLE : 1;/*!< [27..27] framesync_capture_enable                                       */
      __IOM uint32_t ZERO_CROSSING0_SEL : 1;    /*!< [28..28] zero_crossing0_sel                                               */
      __IOM uint32_t TIMER_TX_START_ENABLE2 : 1;/*!< [29..29] timer_tx_start_enable2                                           */
    } NTB_CONTROL_b;
  } ;

  union {
    __IOM uint32_t NTB_AUTO_ADJ_CFG;            /*!< (@ 0x000000BC) NTB_AUTO_ADJ_CFG                                           */

    struct {
      __IOM uint32_t NTB_AUTO_ADJ_INTERVAL : 30;/*!< [29..0] ntb_auto_adj_interval                                             */
      __IOM uint32_t NTB_AUTO_ADJ_DIR : 1;      /*!< [30..30] ntb_auto_adj_dir                                                 */
      __IOM uint32_t NTB_AUTO_ADJ_ENABLE : 1;   /*!< [31..31] ntb_auto_adj_enable                                              */
    } NTB_AUTO_ADJ_CFG_b;
  } ;

  union {
    __IOM uint32_t NTB_OFFSET_ADJ;              /*!< (@ 0x000000C0) NTB_OFFSET_ADJ                                             */

    struct {
      __IOM uint32_t NTB_OFFSET : 32;           /*!< [31..0] ntb_offset                                                        */
    } NTB_OFFSET_ADJ_b;
  } ;

  union {
    __IOM uint32_t NTB_RELOAD;                  /*!< (@ 0x000000C4) NTB_RELOAD                                                 */

    struct {
      __IOM uint32_t NTB_RELOAD_VALUE : 32;     /*!< [31..0] ntb_reload_value                                                  */
    } NTB_RELOAD_b;
  } ;

  union {
    __IOM uint32_t NTB_TX_START_TIME;           /*!< (@ 0x000000C8) NTB_TX_START_TIME                                          */

    struct {
      __IOM uint32_t NTB_TX_START_TARGET : 32;  /*!< [31..0] ntb_tx_start_target                                               */
    } NTB_TX_START_TIME_b;
  } ;

  union {
    __IOM uint32_t NTB_MATCH_TARGET[8];         /*!< (@ 0x000000CC) NTB_MATCH_TARGET0                                          */

    struct {
      __IOM uint32_t TIMER_MATCH_TARGET0 : 32;  /*!< [31..0] ntb_match_target0                                                 */
    } NTB_MATCH_TARGET_b[8];
  } ;

  union {
    __IOM uint32_t NTB_COUNTER_VALUE;           /*!< (@ 0x000000EC) NTB_COUNTER_VALUE                                          */

    struct {
      __IOM uint32_t NTB_COUNTER_OUT : 32;      /*!< [31..0] ntb_counter_out                                                   */
    } NTB_COUNTER_VALUE_b;
  } ;

  union {
    __IOM uint32_t NTB_OFFSET_LATCH;            /*!< (@ 0x000000F0) NTB_OFFSET_LATCH                                           */

    struct {
      __IOM uint32_t NTB_OFFSET_LATCH_VALUE : 32;/*!< [31..0] ntb_offset_latch_value                                           */
    } NTB_OFFSET_LATCH_b;
  } ;

  union {
    __IOM uint32_t NTB_FRAMESYNC;               /*!< (@ 0x000000F4) NTB_FRAMESYNC                                              */

    struct {
      __IOM uint32_t NTB_FRAMESYNC : 32;        /*!< [31..0] ntb_framesync                                                     */
    } NTB_FRAMESYNC_b;
  } ;

  union {
    __IOM uint32_t NTB_ZERO_CROSSING0;          /*!< (@ 0x000000F8) NTB_ZERO_CROSSING0                                         */

    struct {
      __IOM uint32_t NTB_ZERO_CROSSING0 : 32;   /*!< [31..0] ntb_zero_crossing0                                                */
    } NTB_ZERO_CROSSING0_b;
  } ;

  union {
    __IOM uint32_t NTB_ZERO_CROSSING1;          /*!< (@ 0x000000FC) NTB_ZERO_CROSSING1                                         */

    struct {
      __IOM uint32_t NTB_ZERO_CROSSING1 : 32;   /*!< [31..0] ntb_zero_crossing1                                                */
    } NTB_ZERO_CROSSING1_b;
  } ;

  union {
    __IOM uint32_t NTB_ZERO_CROSSING2;          /*!< (@ 0x00000100) NTB_ZERO_CROSSING2                                         */

    struct {
      __IOM uint32_t NTB_ZERO_CROSSING2 : 32;   /*!< [31..0] ntb_zero_crossing2                                                */
    } NTB_ZERO_CROSSING2_b;
  } ;

  union {
    __IOM uint32_t NTB_ZERO_CROSSING3;          /*!< (@ 0x00000104) NTB_ZERO_CROSSING3                                         */

    struct {
      __IOM uint32_t NTB_ZERO_CROSSING3 : 32;   /*!< [31..0] ntb_zero_crossing3                                                */
    } NTB_ZERO_CROSSING3_b;
  } ;

  union {
    __IOM uint32_t NTB_ZERO_CROSSING4;          /*!< (@ 0x00000108) NTB_ZERO_CROSSING4                                         */

    struct {
      __IOM uint32_t NTB_ZERO_CROSSING4 : 32;   /*!< [31..0] ntb_zero_crossing4                                                */
    } NTB_ZERO_CROSSING4_b;
  } ;

  union {
    __IOM uint32_t NTB_ZERO_CROSSING5;          /*!< (@ 0x0000010C) NTB_ZERO_CROSSING5                                         */

    struct {
      __IOM uint32_t NTB_ZERO_CROSSING5 : 32;   /*!< [31..0] ntb_zero_crossing5                                                */
    } NTB_ZERO_CROSSING5_b;
  } ;

  union {
    __IOM uint32_t NTB_ZERO_CROSSING6;          /*!< (@ 0x00000110) NTB_ZERO_CROSSING6                                         */

    struct {
      __IOM uint32_t NTB_ZERO_CROSSING6 : 32;   /*!< [31..0] ntb_zero_crossing6                                                */
    } NTB_ZERO_CROSSING6_b;
  } ;

  union {
    __IOM uint32_t NTB_ZERO_CROSSING7;          /*!< (@ 0x00000114) NTB_ZERO_CROSSING7                                         */

    struct {
      __IOM uint32_t NTB_ZERO_CROSSING7 : 32;   /*!< [31..0] ntb_zero_crossing7                                                */
    } NTB_ZERO_CROSSING7_b;
  } ;

  union {
    __IOM uint32_t NONMASK_PWR_SUM;             /*!< (@ 0x00000118) NONMASK_PWR_SUM                                            */

    struct {
      __IOM uint32_t AVE_PWR_SUM : 25;          /*!< [24..0] ave_pwr_sum                                                       */
    } NONMASK_PWR_SUM_b;
  } ;

  union {
    __IOM uint32_t NONMASK_NOISE_SUM;           /*!< (@ 0x0000011C) NONMASK_NOISE_SUM                                          */

    struct {
      __IOM uint32_t NOISE_SUM  : 25;           /*!< [24..0] noise_sum                                                         */
    } NONMASK_NOISE_SUM_b;
  } ;

  union {
    __IOM uint32_t AGC_CFG0;                    /*!< (@ 0x00000120) AGC_CFG0                                                   */

    struct {
      __IOM uint32_t AGC_TARGET : 12;           /*!< [11..0] agc_target                                                        */
      __IM  uint32_t            : 4;
      __IOM uint32_t GAIN_FORCED : 5;           /*!< [20..16] gain_forced                                                      */
      __IM  uint32_t            : 2;
      __IOM uint32_t FORCE_GAIN : 1;            /*!< [23..23] force_gain                                                       */
      __IOM uint32_t AGC_MUA    : 3;            /*!< [26..24] agc_mua                                                          */
      __IM  uint32_t            : 2;
      __IOM uint32_t AGC_IN_OPT : 1;            /*!< [29..29] agc_in_opt                                                       */
      __IOM uint32_t AGC_GAIN_LOCK_EN : 1;      /*!< [30..30] agc_gain_lock_en                                                 */
      __IOM uint32_t AGC_BLK_EN : 1;            /*!< [31..31] agc_blk_en                                                       */
    } AGC_CFG0_b;
  } ;

  union {
    __IOM uint32_t AGC_CFG1;                    /*!< (@ 0x00000124) AGC_CFG1                                                   */

    struct {
      __IOM uint32_t MIN_GAIN   : 5;            /*!< [4..0] min_gain                                                           */
      __IOM uint32_t AGC_ERR_MU_DEC : 3;        /*!< [7..5] agc_err_mu_dec                                                     */
      __IOM uint32_t MAX_GAIN   : 5;            /*!< [12..8] max_gain                                                          */
      __IOM uint32_t AGC_ERR_MU_INC : 3;        /*!< [15..13] agc_err_mu_inc                                                   */
      __IOM uint32_t AGC_TH_BLK : 12;           /*!< [27..16] agc_th_blk                                                       */
      __IOM uint32_t AGC_SMP_RATE : 4;          /*!< [31..28] agc_smp_rate                                                     */
    } AGC_CFG1_b;
  } ;

  union {
    __IOM uint32_t AGC_STATUS0;                 /*!< (@ 0x00000128) AGC_Status0                                                */

    struct {
      __IOM uint32_t AGC_RMS_LOCKED : 16;       /*!< [15..0] agc_rms_locked                                                    */
      __IOM uint32_t AGC_LOCKED_GAIN : 5;       /*!< [20..16] agc_locked_gain                                                  */
    } AGC_STATUS0_b;
  } ;

  union {
    __IOM uint32_t AGC_STATUS1;                 /*!< (@ 0x0000012C) AGC_Status1                                                */

    struct {
      __IOM uint32_t AGC_RMS    : 16;           /*!< [15..0] agc_rms                                                           */
      __IOM uint32_t AGC_CUR_GAIN : 5;          /*!< [20..16] agc_cur_gain                                                     */
    } AGC_STATUS1_b;
  } ;

  union {
    __IOM uint32_t DEBUG;                       /*!< (@ 0x00000130) DEBUG                                                      */

    struct {
      __IOM uint32_t COPIER_CS  : 4;            /*!< [3..0] copier_cs                                                          */
      __IOM uint32_t TX_CTR_CS  : 4;            /*!< [7..4] tx_ctr_cs                                                          */
      __IOM uint32_t CHNEST_CS  : 3;            /*!< [10..8] chnest_cs                                                         */
      __IOM uint32_t FRAMESYNC_CS : 3;          /*!< [13..11] framesync_cs                                                     */
      __IOM uint32_t RX_SYM_CS  : 3;            /*!< [16..14] rx_sym_cs                                                        */
      __IM  uint32_t            : 3;
      __IOM uint32_t TURBO_DEC_CS : 4;          /*!< [23..20] turbo_dec_cs                                                     */
    } DEBUG_b;
  } ;

  union {
    __IOM uint32_t RX_WDT_CFG;                  /*!< (@ 0x00000134) RX_WDT_CFG                                                 */

    struct {
      __IOM uint32_t WDT_TIMEOUT_THR : 30;      /*!< [29..0] wdt_timeout_thr                                                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t WDT_ENABLE : 1;            /*!< [31..31] wdt_enable                                                       */
    } RX_WDT_CFG_b;
  } ;

  union {
    __IOM uint32_t CIC_CFG0;                    /*!< (@ 0x00000138) CIC_CFG0                                                   */

    struct {
      __IOM uint32_t CIC_DIFF_DELAY : 10;       /*!< [9..0] cic_diff_delay                                                     */
      __IOM uint32_t CIC_INT_NUM : 2;           /*!< [11..10] cic_sec_num                                                      */
      __IOM uint32_t CIC_RSHFT  : 4;            /*!< [15..12] cic_rshft                                                        */
      __IOM uint32_t CIC_ENABLE : 1;            /*!< [16..16] cic_enable                                                       */
      __IOM uint32_t CIC_COMB_NUM : 2;          /*!< [18..17] cic_sec_num                                                      */
      __IM  uint32_t            : 5;
      __IOM uint32_t CIC_DC_RM_ENABLE : 1;      /*!< [24..24] cic_dc_rm_enable                                                 */
      __IOM uint32_t CIC_DC_RM_ALPH : 3;        /*!< [27..25] cic_dc_rm_alph                                                   */
    } CIC_CFG0_b;
  } ;

  union {
    __IOM uint32_t RX_BPF0_CFG0;                /*!< (@ 0x0000013C) RX_BPF0_CFG0                                               */

    struct {
      __IOM uint32_t RX_BPF0_GAIN : 16;         /*!< [15..0] rx_bpf0_gain                                                      */
      __IM  uint32_t            : 15;
      __IOM uint32_t RX_BPF0_ENABLE : 1;        /*!< [31..31] rx_bpf0_enable                                                   */
    } RX_BPF0_CFG0_b;
  } ;

  union {
    __IOM uint32_t RX_BPF0_CFG1;                /*!< (@ 0x00000140) RX_BPF0_CFG1                                               */

    struct {
      __IOM uint32_t RX_BPF0_A2 : 16;           /*!< [15..0] rx_bpf0_a2                                                        */
      __IOM uint32_t RX_BPF0_A1 : 16;           /*!< [31..16] rx_bpf0_a1                                                       */
    } RX_BPF0_CFG1_b;
  } ;

  union {
    __IOM uint32_t RX_BPF1_CFG0;                /*!< (@ 0x00000144) RX_BPF1_CFG0                                               */

    struct {
      __IOM uint32_t RX_BPF1_GAIN : 16;         /*!< [15..0] rx_bpf1_gain                                                      */
      __IM  uint32_t            : 15;
      __IOM uint32_t RX_BPF1_ENABLE : 1;        /*!< [31..31] rx_bpf1_enable                                                   */
    } RX_BPF1_CFG0_b;
  } ;

  union {
    __IOM uint32_t RX_BPF1_CFG1;                /*!< (@ 0x00000148) RX_BPF1_CFG1                                               */

    struct {
      __IOM uint32_t RX_BPF1_A2 : 16;           /*!< [15..0] rx_bpf1_a2                                                        */
      __IOM uint32_t RX_BPF1_A1 : 16;           /*!< [31..16] rx_bpf1_a1                                                       */
    } RX_BPF1_CFG1_b;
  } ;

  union {
    __IOM uint32_t RX_BPF2_CFG0;                /*!< (@ 0x0000014C) RX_BPF2_CFG0                                               */

    struct {
      __IOM uint32_t RX_BPF2_GAIN : 16;         /*!< [15..0] rx_bpf2_gain                                                      */
      __IM  uint32_t            : 15;
      __IOM uint32_t RX_BPF2_ENABLE : 1;        /*!< [31..31] rx_bpf2_enable                                                   */
    } RX_BPF2_CFG0_b;
  } ;

  union {
    __IOM uint32_t RX_BPF2_CFG1;                /*!< (@ 0x00000150) RX_BPF2_CFG1                                               */

    struct {
      __IOM uint32_t RX_BPF2_A2 : 16;           /*!< [15..0] rx_bpf2_a2                                                        */
      __IOM uint32_t RX_BPF2_A1 : 16;           /*!< [31..16] rx_bpf2_a1                                                       */
    } RX_BPF2_CFG1_b;
  } ;

  union {
    __IOM uint32_t RX_BPF3_CFG0;                /*!< (@ 0x00000154) RX_BPF3_CFG0                                               */

    struct {
      __IOM uint32_t RX_BPF3_GAIN : 16;         /*!< [15..0] rx_bpf3_gain                                                      */
      __IM  uint32_t            : 15;
      __IOM uint32_t RX_BPF3_ENABLE : 1;        /*!< [31..31] rx_bpf3_enable                                                   */
    } RX_BPF3_CFG0_b;
  } ;

  union {
    __IOM uint32_t RX_BPF3_CFG1;                /*!< (@ 0x00000158) RX_BPF3_CFG1                                               */

    struct {
      __IOM uint32_t RX_BPF3_A2 : 16;           /*!< [15..0] rx_bpf3_a2                                                        */
      __IOM uint32_t RX_BPF3_A1 : 16;           /*!< [31..16] rx_bpf3_a1                                                       */
    } RX_BPF3_CFG1_b;
  } ;

  union {
    __IOM uint32_t RX_BPF4_CFG0;                /*!< (@ 0x0000015C) RX_BPF4_CFG0                                               */

    struct {
      __IOM uint32_t RX_BPF4_GAIN : 16;         /*!< [15..0] rx_bpf4_gain                                                      */
      __IM  uint32_t            : 15;
      __IOM uint32_t RX_BPF4_ENABLE : 1;        /*!< [31..31] rx_bpf4_enable                                                   */
    } RX_BPF4_CFG0_b;
  } ;

  union {
    __IOM uint32_t RX_BPF4_CFG1;                /*!< (@ 0x00000160) RX_BPF4_CFG1                                               */

    struct {
      __IOM uint32_t RX_BPF4_A2 : 16;           /*!< [15..0] rx_bpf4_a2                                                        */
      __IOM uint32_t RX_BPF4_A1 : 16;           /*!< [31..16] rx_bpf4_a1                                                       */
    } RX_BPF4_CFG1_b;
  } ;

  union {
    __IOM uint32_t RX_BPF5_CFG0;                /*!< (@ 0x00000164) RX_BPF5_CFG0                                               */

    struct {
      __IOM uint32_t RX_BPF5_GAIN : 16;         /*!< [15..0] rx_bpf5_gain                                                      */
      __IM  uint32_t            : 15;
      __IOM uint32_t RX_BPF5_ENABLE : 1;        /*!< [31..31] rx_bpf5_enable                                                   */
    } RX_BPF5_CFG0_b;
  } ;

  union {
    __IOM uint32_t RX_BPF5_CFG1;                /*!< (@ 0x00000168) RX_BPF5_CFG1                                               */

    struct {
      __IOM uint32_t RX_BPF5_A2 : 16;           /*!< [15..0] rx_bpf5_a2                                                        */
      __IOM uint32_t RX_BPF5_A1 : 16;           /*!< [31..16] rx_bpf5_a1                                                       */
    } RX_BPF5_CFG1_b;
  } ;

  union {
    __IOM uint32_t TX_BPF0_CFG0;                /*!< (@ 0x0000016C) TX_BPF0_CFG0                                               */

    struct {
      __IOM uint32_t TX_BPF0_GAIN : 16;         /*!< [15..0] tx_bpf0_gain                                                      */
      __IM  uint32_t            : 15;
      __IOM uint32_t TX_BPF0_ENABLE : 1;        /*!< [31..31] tx_bpf0_enable                                                   */
    } TX_BPF0_CFG0_b;
  } ;

  union {
    __IOM uint32_t TX_BPF0_CFG1;                /*!< (@ 0x00000170) TX_BPF0_CFG1                                               */

    struct {
      __IOM uint32_t TX_BPF0_A2 : 16;           /*!< [15..0] tx_bpf0_a2                                                        */
      __IOM uint32_t TX_BPF0_A1 : 16;           /*!< [31..16] tx_bpf0_a1                                                       */
    } TX_BPF0_CFG1_b;
  } ;

  union {
    __IOM uint32_t TX_BPF1_CFG0;                /*!< (@ 0x00000174) TX_BPF1_CFG0                                               */

    struct {
      __IOM uint32_t TX_BPF1_GAIN : 16;         /*!< [15..0] tx_bpf1_gain                                                      */
      __IM  uint32_t            : 15;
      __IOM uint32_t TX_BPF1_ENABLE : 1;        /*!< [31..31] tx_bpf1_enable                                                   */
    } TX_BPF1_CFG0_b;
  } ;

  union {
    __IOM uint32_t TX_BPF1_CFG1;                /*!< (@ 0x00000178) TX_BPF1_CFG1                                               */

    struct {
      __IOM uint32_t TX_BPF1_A2 : 16;           /*!< [15..0] tx_bpf1_a2                                                        */
      __IOM uint32_t TX_BPF1_A1 : 16;           /*!< [31..16] tx_bpf1_a1                                                       */
    } TX_BPF1_CFG1_b;
  } ;

  union {
    __IOM uint32_t TX_BPF2_CFG0;                /*!< (@ 0x0000017C) TX_BPF2_CFG0                                               */

    struct {
      __IOM uint32_t TX_BPF2_GAIN : 16;         /*!< [15..0] tx_bpf2_gain                                                      */
      __IM  uint32_t            : 15;
      __IOM uint32_t TX_BPF2_ENABLE : 1;        /*!< [31..31] tx_bpf2_enable                                                   */
    } TX_BPF2_CFG0_b;
  } ;

  union {
    __IOM uint32_t TX_BPF2_CFG1;                /*!< (@ 0x00000180) TX_BPF2_CFG1                                               */

    struct {
      __IOM uint32_t TX_BPF2_A2 : 16;           /*!< [15..0] tx_bpf2_a2                                                        */
      __IOM uint32_t TX_BPF2_A1 : 16;           /*!< [31..16] tx_bpf2_a1                                                       */
    } TX_BPF2_CFG1_b;
  } ;

  union {
    __IOM uint32_t TX_BPF3_CFG0;                /*!< (@ 0x00000184) TX_BPF3_CFG0                                               */

    struct {
      __IOM uint32_t TX_BPF3_GAIN : 16;         /*!< [15..0] tx_bpf3_gain                                                      */
      __IM  uint32_t            : 15;
      __IOM uint32_t TX_BPF3_ENABLE : 1;        /*!< [31..31] tx_bpf3_enable                                                   */
    } TX_BPF3_CFG0_b;
  } ;

  union {
    __IOM uint32_t TX_BPF3_CFG1;                /*!< (@ 0x00000188) TX_BPF3_CFG1                                               */

    struct {
      __IOM uint32_t TX_BPF3_A2 : 16;           /*!< [15..0] tx_bpf3_a2                                                        */
      __IOM uint32_t TX_BPF3_A1 : 16;           /*!< [31..16] tx_bpf3_a1                                                       */
    } TX_BPF3_CFG1_b;
  } ;

  union {
    __IOM uint32_t TX_BPF4_CFG0;                /*!< (@ 0x0000018C) TX_BPF4_CFG0                                               */

    struct {
      __IOM uint32_t TX_BPF4_GAIN : 16;         /*!< [15..0] tx_bpf4_gain                                                      */
      __IM  uint32_t            : 15;
      __IOM uint32_t TX_BPF4_ENABLE : 1;        /*!< [31..31] tx_bpf4_enable                                                   */
    } TX_BPF4_CFG0_b;
  } ;

  union {
    __IOM uint32_t TX_BPF4_CFG1;                /*!< (@ 0x00000190) TX_BPF4_CFG1                                               */

    struct {
      __IOM uint32_t TX_BPF4_A2 : 16;           /*!< [15..0] tx_bpf4_a2                                                        */
      __IOM uint32_t TX_BPF4_A1 : 16;           /*!< [31..16] tx_bpf4_a1                                                       */
    } TX_BPF4_CFG1_b;
  } ;

  union {
    __IOM uint32_t TX_BPF5_CFG0;                /*!< (@ 0x00000194) TX_BPF5_CFG0                                               */

    struct {
      __IOM uint32_t TX_BPF5_GAIN : 16;         /*!< [15..0] tx_bpf5_gain                                                      */
      __IM  uint32_t            : 15;
      __IOM uint32_t TX_BPF5_ENABLE : 1;        /*!< [31..31] tx_bpf5_enable                                                   */
    } TX_BPF5_CFG0_b;
  } ;

  union {
    __IOM uint32_t TX_BPF5_CFG1;                /*!< (@ 0x00000198) TX_BPF5_CFG1                                               */

    struct {
      __IOM uint32_t TX_BPF5_A2 : 16;           /*!< [15..0] tx_bpf5_a2                                                        */
      __IOM uint32_t TX_BPF5_A1 : 16;           /*!< [31..16] tx_bpf5_a1                                                       */
    } TX_BPF5_CFG1_b;
  } ;

  union {
    __IOM uint32_t PF0_CFG0;                    /*!< (@ 0x0000019C) PF0_CFG0                                                   */

    struct {
      __IOM uint32_t PF0_RMS_FLT_ALPH : 3;      /*!< [2..0] pf0_rms_flt_alph                                                   */
      __IOM uint32_t PF0_MASK_EN : 1;           /*!< [3..3] pf0_mask_en                                                        */
      __IOM uint32_t PF0_MASK_FALL_RATIO : 8;   /*!< [11..4] pf0_mask_fall_ratio                                               */
      __IOM uint32_t PF0_MASK_RISE_RATIO : 8;   /*!< [19..12] pf0_mask_rise_ratio                                              */
      __IOM uint32_t PF0_FALL_CONT_CNT : 6;     /*!< [25..20] pf0_fall_cont_cnt                                                */
      __IOM uint32_t PF0_RISE_CONT_CNT : 6;     /*!< [31..26] pf0_rise_cont_cnt                                                */
    } PF0_CFG0_b;
  } ;

  union {
    __IOM uint32_t PF1_CFG0;                    /*!< (@ 0x000001A0) PF1_CFG0                                                   */

    struct {
      __IOM uint32_t PF1_RMS_FLT_ALPH : 3;      /*!< [2..0] pf1_rms_flt_alph                                                   */
      __IOM uint32_t PF1_MASK_EN : 1;           /*!< [3..3] pf1_mask_en                                                        */
      __IOM uint32_t PF1_MASK_FALL_RATIO : 8;   /*!< [11..4] pf1_mask_fall_ratio                                               */
      __IOM uint32_t PF1_MASK_RISE_RATIO : 8;   /*!< [19..12] pf1_mask_rise_ratio                                              */
      __IOM uint32_t PF1_FALL_CONT_CNT : 6;     /*!< [25..20] pf1_fall_cont_cnt                                                */
      __IOM uint32_t PF1_RISE_CONT_CNT : 6;     /*!< [31..26] pf1_rise_cont_cnt                                                */
    } PF1_CFG0_b;
  } ;

  union {
    __IOM uint32_t RX_PARAM;                    /*!< (@ 0x000001A4) RX_PARAM                                                   */

    struct {
      __IOM uint32_t RX_PBSIZE  : 10;           /*!< [9..0] rx_pbsize                                                          */
      __IOM uint32_t RX_PB_NUM  : 3;            /*!< [12..10] rx_pb_num                                                        */
      __IM  uint32_t            : 3;
      __IOM uint32_t RX_TMI     : 4;            /*!< [19..16] rx_tmi                                                           */
      __IOM uint32_t RX_TMI_EXT : 4;            /*!< [23..20] rx_tmi_ext                                                       */
    } RX_PARAM_b;
  } ;

  union {
    __IOM uint32_t NTB_TX_START_TIME2;          /*!< (@ 0x000001A8) NTB_TX_START_TIME2                                         */

    struct {
      __IOM uint32_t NTB_TX_START_TARGET2 : 32; /*!< [31..0] ntb_tx_start_target2                                              */
    } NTB_TX_START_TIME2_b;
  } ;

  union {
    __IOM uint32_t AGC_TAB_CFG0;                /*!< (@ 0x000001AC) AGC_TAB_CFG0                                               */

    struct {
      __IOM uint32_t AFE_GAIN_TAB0 : 8;         /*!< [7..0] afe_gain_tab0                                                      */
      __IOM uint32_t AFE_GAIN_TAB1 : 8;         /*!< [15..8] afe_gain_tab1                                                     */
      __IOM uint32_t AFE_GAIN_TAB2 : 8;         /*!< [23..16] afe_gain_tab2                                                    */
      __IOM uint32_t AFE_GAIN_TAB3 : 8;         /*!< [31..24] afe_gain_tab3                                                    */
    } AGC_TAB_CFG0_b;
  } ;

  union {
    __IOM uint32_t AGC_TAB_CFG1;                /*!< (@ 0x000001B0) AGC_TAB_CFG1                                               */

    struct {
      __IOM uint32_t AFE_GAIN_TAB4 : 8;         /*!< [7..0] afe_gain_tab4                                                      */
      __IOM uint32_t AFE_GAIN_TAB5 : 8;         /*!< [15..8] afe_gain_tab5                                                     */
      __IOM uint32_t AFE_GAIN_TAB6 : 8;         /*!< [23..16] afe_gain_tab6                                                    */
      __IOM uint32_t AFE_GAIN_TAB7 : 8;         /*!< [31..24] afe_gain_tab7                                                    */
    } AGC_TAB_CFG1_b;
  } ;

  union {
    __IOM uint32_t AGC_TAB_CFG2;                /*!< (@ 0x000001B4) AGC_TAB_CFG2                                               */

    struct {
      __IOM uint32_t AFE_GAIN_TAB8 : 8;         /*!< [7..0] afe_gain_tab8                                                      */
      __IOM uint32_t AFE_GAIN_TAB9 : 8;         /*!< [15..8] afe_gain_tab9                                                     */
      __IOM uint32_t AFE_GAIN_TAB10 : 8;        /*!< [23..16] afe_gain_tab10                                                   */
      __IOM uint32_t AFE_GAIN_TAB11 : 8;        /*!< [31..24] afe_gain_tab11                                                   */
    } AGC_TAB_CFG2_b;
  } ;

  union {
    __IOM uint32_t AGC_TAB_CFG3;                /*!< (@ 0x000001B8) AGC_TAB_CFG3                                               */

    struct {
      __IOM uint32_t AFE_GAIN_TAB12 : 8;        /*!< [7..0] afe_gain_tab12                                                     */
      __IOM uint32_t AFE_GAIN_TAB13 : 8;        /*!< [15..8] afe_gain_tab13                                                    */
      __IOM uint32_t AFE_GAIN_TAB14 : 8;        /*!< [23..16] afe_gain_tab14                                                   */
      __IOM uint32_t AFE_GAIN_TAB15 : 8;        /*!< [31..24] afe_gain_tab15                                                   */
    } AGC_TAB_CFG3_b;
  } ;

  union {
    __IOM uint32_t AGC_TAB_CFG4;                /*!< (@ 0x000001BC) AGC_TAB_CFG4                                               */

    struct {
      __IOM uint32_t AFE_GAIN_TAB16 : 8;        /*!< [7..0] afe_gain_tab16                                                     */
      __IOM uint32_t AFE_GAIN_TAB17 : 8;        /*!< [15..8] afe_gain_tab17                                                    */
      __IOM uint32_t AFE_GAIN_TAB18 : 8;        /*!< [23..16] afe_gain_tab18                                                   */
      __IOM uint32_t AFE_GAIN_TAB19 : 8;        /*!< [31..24] afe_gain_tab19                                                   */
    } AGC_TAB_CFG4_b;
  } ;

  union {
    __IOM uint32_t AGC_TAB_CFG5;                /*!< (@ 0x000001C0) AGC_TAB_CFG5                                               */

    struct {
      __IOM uint32_t AFE_GAIN_TAB20 : 8;        /*!< [7..0] afe_gain_tab20                                                     */
      __IOM uint32_t AFE_GAIN_TAB21 : 8;        /*!< [15..8] afe_gain_tab21                                                    */
      __IOM uint32_t AFE_GAIN_TAB22 : 8;        /*!< [23..16] afe_gain_tab22                                                   */
      __IOM uint32_t AFE_GAIN_TAB23 : 8;        /*!< [31..24] afe_gain_tab23                                                   */
    } AGC_TAB_CFG5_b;
  } ;

  union {
    __IOM uint32_t AGC_TAB_CFG6;                /*!< (@ 0x000001C4) AGC_TAB_CFG6                                               */

    struct {
      __IOM uint32_t AFE_GAIN_TAB24 : 8;        /*!< [7..0] afe_gain_tab24                                                     */
      __IOM uint32_t AFE_GAIN_TAB25 : 8;        /*!< [15..8] afe_gain_tab25                                                    */
      __IOM uint32_t AFE_GAIN_TAB26 : 8;        /*!< [23..16] afe_gain_tab26                                                   */
      __IOM uint32_t AFE_GAIN_TAB27 : 8;        /*!< [31..24] afe_gain_tab27                                                   */
    } AGC_TAB_CFG6_b;
  } ;

  union {
    __IOM uint32_t AGC_TAB_CFG7;                /*!< (@ 0x000001C8) AGC_TAB_CFG7                                               */

    struct {
      __IOM uint32_t AFE_GAIN_TAB28 : 8;        /*!< [7..0] afe_gain_tab28                                                     */
      __IOM uint32_t AFE_GAIN_TAB29 : 8;        /*!< [15..8] afe_gain_tab29                                                    */
      __IOM uint32_t AFE_GAIN_TAB30 : 8;        /*!< [23..16] afe_gain_tab30                                                   */
      __IOM uint32_t AFE_GAIN_TAB31 : 8;        /*!< [31..24] afe_gain_tab31                                                   */
    } AGC_TAB_CFG7_b;
  } ;

  union {
    __IOM uint32_t GAD_CFG0;                    /*!< (@ 0x000001CC) GAD_CFG0                                                   */

    struct {
      __IOM uint32_t GAD_MUA    : 2;            /*!< [1..0] gad_mua                                                            */
      __IOM uint32_t GAD_ERR_MU : 3;            /*!< [4..2] gad_err_mu                                                         */
      __IOM uint32_t GAD_ENABLE : 1;            /*!< [5..5] gad_enable                                                         */
      __IOM uint32_t GAD_CLP_EN : 1;            /*!< [6..6] gad_clp_en                                                         */
      __IOM uint32_t GAD_BLK_EN : 1;            /*!< [7..7] gad_blk_en                                                         */
      __IOM uint32_t GAD_GAIN_LOCK_EN : 1;      /*!< [8..8] gad_gain_lock_en                                                   */
      __IOM uint32_t FORCE_GAD_GAIN : 1;        /*!< [9..9] force_gad_gain                                                     */
      __IOM uint32_t GAD_SMP_RATE : 4;          /*!< [13..10] gad_smp_rate                                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t GAD_CFG_GAIN : 16;         /*!< [31..16] gad_cfg_gain                                                     */
    } GAD_CFG0_b;
  } ;

  union {
    __IOM uint32_t GAD_CFG1;                    /*!< (@ 0x000001D0) GAD_CFG1                                                   */

    struct {
      __IOM uint32_t GAD_TH_CLP : 16;           /*!< [15..0] gad_th_clp                                                        */
      __IOM uint32_t GAD_TH_BLK : 16;           /*!< [31..16] gad_th_blk                                                       */
    } GAD_CFG1_b;
  } ;

  union {
    __IOM uint32_t GAD_CFG2;                    /*!< (@ 0x000001D4) GAD_CFG2                                                   */

    struct {
      __IOM uint32_t GAD_REF    : 16;           /*!< [15..0] gad_ref                                                           */
    } GAD_CFG2_b;
  } ;

  union {
    __IOM uint32_t GAD_STATUS0;                 /*!< (@ 0x000001D8) GAD_STATUS0                                                */

    struct {
      __IOM uint32_t GAD_LOCKED_GAIN : 28;      /*!< [27..0] gad_locked_gain                                                   */
    } GAD_STATUS0_b;
  } ;

  union {
    __IOM uint32_t GAD_STATUS1;                 /*!< (@ 0x000001DC) GAD_STATUS1                                                */

    struct {
      __IOM uint32_t GAD_LOCKED_RMS : 16;       /*!< [15..0] gad_locked_rms                                                    */
      __IOM uint32_t GAD_RMS    : 16;           /*!< [31..16] gad_rms                                                          */
    } GAD_STATUS1_b;
  } ;

  union {
    __IOM uint32_t DC_RM_CFG;                   /*!< (@ 0x000001E0) DC_RM_CFG                                                  */

    struct {
      __IOM uint32_t DC_RM_ENABLE : 1;          /*!< [0..0] dc_rm_enable                                                       */
      __IOM uint32_t DC_RM_ALPHA : 3;           /*!< [3..1] dc_rm_alpha                                                        */
    } DC_RM_CFG_b;
  } ;

  union {
    __IOM uint32_t TONE_RM_CFG0;                /*!< (@ 0x000001E4) TONE_RM_CFG0                                               */

    struct {
      __IOM uint32_t TONE_RM_ENABLE : 8;        /*!< [7..0] tone_rm_alpha0                                                     */
      __IM  uint32_t            : 8;
      __IOM uint32_t TONE_RM_LSHFT : 8;         /*!< [23..16] tone_rm_alpha1                                                   */
    } TONE_RM_CFG0_b;
  } ;

  union {
    __IOM uint32_t TONE_RM_CFG1;                /*!< (@ 0x000001E8) TONE_RM_CFG1                                               */

    struct {
      __IOM uint32_t TONE_RM_ALPHA0 : 3;        /*!< [2..0] tone_rm_alpha8                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t TONE_RM_ALPHA1 : 3;        /*!< [6..4] tone_rm_alpha9                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t TONE_RM_ALPHA2 : 3;        /*!< [10..8] tone_rm_alpha10                                                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t TONE_RM_ALPHA3 : 3;        /*!< [14..12] tone_rm_alpha11                                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t TONE_RM_ALPHA4 : 3;        /*!< [18..16] tone_rm_alpha12                                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t TONE_RM_ALPHA5 : 3;        /*!< [22..20] tone_rm_alpha13                                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t TONE_RM_ALPHA6 : 3;        /*!< [26..24] tone_rm_alpha14                                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t TONE_RM_ALPHA7 : 3;        /*!< [30..28] tone_rm_alpha15                                                  */
    } TONE_RM_CFG1_b;
  } ;

  union {
    __IOM uint32_t TONE_RM_FCW[4];              /*!< (@ 0x000001EC) TONE_RM_CFG2                                               */

    struct {
      __IOM uint32_t TONE_RM_FCW0 : 32;         /*!< [31..0] tone_rm_alpha23                                                   */
    } TONE_RM_FCW_b[4];
  } ;

  union {
    __IOM uint32_t PULSE_DET_CFG0;              /*!< (@ 0x000001FC) PULSE_DET_CFG0                                             */

    struct {
      __IOM uint32_t NBI_PULSE_THR : 16;        /*!< [15..0] nbi_pulse_thr                                                     */
      __IOM uint32_t NBI_LOW_LEVEL_TIME_THR : 10;/*!< [25..16] nbi_low_level_time_thr                                          */
    } PULSE_DET_CFG0_b;
  } ;

  union {
    __IOM uint32_t PULSE_DET_RES;               /*!< (@ 0x00000200) PULSE_DET_RES                                              */

    struct {
      __IOM uint32_t NBI_PULSE_PERIOD_SUM : 21; /*!< [20..0] nbi_pulse_period_sum                                              */
      __IOM uint32_t NBI_PULSE_PERIOD_CNT : 11; /*!< [31..21] nbi_pulse_period_cnt                                             */
    } PULSE_DET_RES_b;
  } ;

  union {
    __IOM uint32_t FSK_TX_CFG0;               /*!< (@ 0x00000204) FSK_TX_CFG0                                              */

    struct {
      __IOM uint32_t FSK_BIT_PERIOD : 24; /*!< [23..0] FSK_BIT_PERIOD                                              */
      __IOM uint32_t FSK_TX_ENABLE : 1; /*!< [24] FSK_TX_ENABLE                                             */
      __IOM uint32_t FSK_STOP_NEXT_PHASE : 1; /*!< [25] FSK_STOP_NEXT_PHASE                                             */
    } FSK_TX_CFG0_b;
  } ;

  union {
    __IOM uint32_t FSK_TX_CFG1;               /*!< (@ 0x00000208) FSK_TX_CFG1                                              */

    struct {
      __IOM uint32_t FSK_NEXT_PHASE_STEP : 32; /*!< [31..0] FSK_NEXT_PHASE_STEP                                              */
    } FSK_TX_CFG1_b;
  } ;

  union {
    __IOM uint32_t FSK_TX_CFG2;               /*!< (@ 0x0000020C) FSK_TX_CFG2                                              */

    struct {
      __IOM uint32_t FSK_INI_PHASE_STEP : 32; /*!< [31..0] FSK_INI_PHASE_STEP                                              */
    } FSK_TX_CFG2_b;
  } ;

} BPLC_Type;                                    /*!< Size = 516 (0x204)                                                        */



/* =========================================================================================================================== */
/* ================                                        BPLC_SB_SNR                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief BPLC snr (BPLC_SB_SNR)
  */

typedef struct {                                /*!< (@ 0x40503000) BPLC_SB_SNR Structure                                      */
  __IOM uint32_t  s_or_n[980];                  /*!< (@ 0x00000000) singnal or noise                                           */
} BPLC_SB_SNR_Type;                             /*!< Size = 3920 (0xf50)                                                       */


/* =========================================================================================================================== */
/* ================                                            BPLC AFE                                       ================ */
/* =========================================================================================================================== */
typedef struct { /* bplc_afe */
  union {
    __IOM uint32_t BPLCTOPCR0_ALL ;                 /*0x0 RF Top Controll Register 0 */
    struct {
      __IOM uint32_t RG_AFE_BG_EN : 1;           /*[0] AFE BG ENABLE */
      __IOM uint32_t RG_TRX_LDO_FILTER_EN : 1;           /*[1] TRX LDO FILTER ENABLE */
      __IOM uint32_t RG_TRX_LDO_EN : 1;           /*[2] TRX LDO ENANBLE */
      __IOM uint32_t RG_TRX_C_TUNNING_MANUMODEL : 1;           /*[3] 0:rck tunning data;1:register control */
      __IOM uint32_t RG_TRX_LDO_ADJ : 4;           /*[7:4] TRX LDO trim */
      __IOM uint32_t RG_TOP_AC_TEST_RSV : 8;           /*[15:8] ac test rsv:1 DAC OUT,2:LPF OUT */
      __IOM uint32_t RG_TOP_DC_TEST_RSV : 3;           /*[18:16] dc test rsv:1:adda dc test,2:TS_VBEL_TEST,3:TS_VBER_TEST */
      __IOM uint32_t              : 13;           /*[31:19] Reserved */
    } BPLCTOPCR0_b;
  } ;
  union {
    __IOM uint32_t TSCR_ALL ;                 /*0x4 Temperature Sensor Controll Register */
    struct {
      __IOM uint32_t AD_TS_SWAP : 1;           /*[0] Signal to start reading the second set of bit stream */
      __IOM uint32_t AD_TS_STG2 : 1;           /*[1] Signal to start reading the first set of bit stream */
      __IOM uint32_t AD_TS_MSB : 5;           /*[6:2] The MSB data, in the integer range 0�ҧ�31 */
      __IOM uint32_t AD_TS_EOC : 1;           /*[7] End-of-conversion signal */
      __IOM uint32_t AD_TS_LSB : 8;           /*[15:8] The LSB data (optional), in the integer range 0�ҧ�2 */
      __IOM uint32_t AD_TS_COMPO : 1;           /*[16] Bit stream output */
      __IOM uint32_t AD_TS_CLKOUT : 1;           /*[17] Clock output */
      __IOM uint32_t RG_TS_TEST_EN : 1;           /*[18] Enable signal for testing VBEL and VBER */
      __IOM uint32_t RG_TS_CAL_EN : 1;           /*[19] Enable signal for calibration, set VEXT as input to ADC */
      __IOM uint32_t RG_TS_AFE_EN : 1;           /*[20] Enable signal for AFE, high active */
      __IOM uint32_t RG_TS_AFE_DEM : 1;           /*[21] Enable signal for AFE_DEM */
      __IOM uint32_t RG_TS_AFE_CHOP : 1;           /*[22] Enable signal for AFE_CHOP */
      __IOM uint32_t RG_TS_ADC_EN : 1;           /*[23] Enable signal for ADC, high active */
      __IOM uint32_t RG_TS_ADC_DEM : 1;           /*[24] Enable signal for ADC DEM, high active */
      __IOM uint32_t DA_TS_SOC : 1;           /*[25] "Pulse signal for start-of-conversion, positive edge resets all registers,  */
      __IOM uint32_t              : 6;           /*[31:26] Reserved */
    } TSCR_b;
  } ;
  union {
    __IOM uint32_t TXCR0_ALL ;                 /*0x8 TX Controll Register 0 */
    struct {
      __IOM uint32_t RG_TX_AFE_EN : 1;           /*[0] TX ENABLE signal,0 disable; 1 enable */
      __IOM uint32_t              : 3;           /*[3:1] Reserved */
      __IOM uint32_t RG_TX_TRIM : 4;           /*[7:4] TX OPA TRIM,0000:min;....1111:max; */
      __IOM uint32_t RG_TX_CFG_RZ : 4;           /*[11:8] TX OPA RZ TRIM,0000:min;....1111:max; */
      __IOM uint32_t RG_TX_CFG_MLR : 4;           /*[15:12] TX OPA MLR TRIM,0000:min;....1111:max; */
      __IOM uint32_t RG_TX_CFG_MLC : 4;           /*[19:16] TX OPA MLC TRIM,0000:min;....1111:max; */
      __IOM uint32_t RG_TX_CFG_CZ : 4;           /*[23:20] TX OPA CZ TRIM,0000:min;....1111:max; */
      __IOM uint32_t RG_TX_VGA2_IBSEL : 4;           /*[27:24] TX VGA2 BIAS TRIM,0000:min;....1111:max; */
      __IOM uint32_t              : 4;           /*[31:28] Reserved */
    } TXCR0_b;
  } ;
  union {
    __IOM uint32_t TXCR1_ALL ;                 /*0xC TX Controll Register 1 */
    struct {
      __IOM uint32_t RG_TX_AFE_DRIVER_EN : 1;           /*[0] TX VGA2 ENABLE signal,0 disable; 1 enable */
      __IOM uint32_t RG_TX_GAIN_SEL : 3;           /*[3:1] TX VGA1 GAIN SETTING,000:-0.5dB;001:1dB;010:2.5dB......111:10dB */
      __IOM uint32_t RG_TX_GAINSEL1V1 : 2;           /*[5:4] TX VGA2 GAIN SETTING,00:0dB;01:3dB,10:6dB;11:9dB */
      __IOM uint32_t              : 2;           /*[7:6] Reserved */
      __IOM uint32_t RG_TX_VCM1V_ADJ : 4;           /*[11:8] TX VGA2 VCM TRIM:0000min,�ҧ�.1111max */
      __IOM uint32_t RG_TX_VCM0V5_ADJ : 4;           /*[15:12] TX LPF VCM TRIM:0000min,�ҧ�.1111max */
      __IOM uint32_t RG_TX_LPF_TUNNING : 5;           /*[20:16] TX LPF CAP TUNNING,00000:min;....11111:max; */
      __IOM uint32_t              : 11;           /*[31:21] Reserved */
    } TXCR1_b;
  } ;
  union {
    __IOM uint32_t RXCR0_ALL ;                 /*0x10 RX Controll Register 0 */
    struct {
      __IOM uint32_t RG_RX_AFE_EN : 1;           /*[0] Register Control for AFE enable */
      __IOM uint32_t              : 3;           /*[3:1] Reserved */
      __IOM uint32_t RG_RX_LP2_DRIVER : 4;           /*[7:4] RX last stage driver selection */
      __IOM uint32_t RG_RX_CFG_VGA_RSV : 8;           /*[15:8] Register Control for AFE reserve */
      __IOM uint32_t              : 16;           /*[31:16] Reserved */
    } RXCR0_b;
  } ;
  union {
    __IOM uint32_t RXCR1_ALL ;                 /*0x14 RX Controll Register 1 */
    struct {
      __IOM uint32_t RG_RX_CFG_MLR : 4;           /*[3:0] OP compensation adjust */
      __IOM uint32_t RG_RX_CFG_MLC : 4;           /*[7:4] OP compensation adjust */
      __IOM uint32_t RG_RX_VCM1V_ADJ : 5;           /*[12:8] RX DRIVER VCM TRIM:0000min,�ҧ�.1111max */
      __IOM uint32_t              : 3;           /*[15:13] Reserved */
      __IOM uint32_t RG_RX_LPF_TUNNING : 5;           /*[20:16] Register Control for 1st LPF bandwidth 00000min,11111max */
      __IOM uint32_t              : 3;           /*[23:21] Reserved */
      __IOM uint32_t RG_RX_VCM0V5_ADJ : 5;           /*[28:24] RX LPF VCM TRIM:0000min,�ҧ�.1111max */
      __IOM uint32_t              : 3;           /*[31:29] Reserved */
    } RXCR1_b;
  } ;
  union {
    __IOM uint32_t ADDACR0_ALL ;                 /*0x18 ADDA Controll Register 0 */
    struct {
      __IOM uint32_t RG_ADDA_LDO_ADJ : 5;           /*[4:0] adc ldo output vref voltage adjection bit */
      __IOM uint32_t RG_ADDA_LDO_FC : 1;           /*[5] adc ldo force on signal */
      __IOM uint32_t RG_ADDA_LDO_EN : 1;           /*[6] adc ldo en */
      __IOM uint32_t              : 1;           /*[7] Reserved */
      __IOM uint32_t RG_ADDA_DC_TEST_EN : 3;           /*[10:8] adda dc test:1:izt 20uA,2:avdd12_adc,3:avdd12_dac,4:vrefp */
      __IOM uint32_t RG_DC_TIA_VCM_ADJ : 5;           /*[15:11] tia vcm  option 00000min�ҧ�..11111max */
      __IOM uint32_t              : 16;           /*[31:16] Reserved */
    } ADDACR0_b;
  } ;
  union {
    __IOM uint32_t ADDACR1_ALL ;                 /*0x1C ADDA Controll Register 1 */
    struct {
      __IOM uint32_t RG_DAC_TEST_MUX_EN : 1;           /*[0] dac test mux enable */
      __IOM uint32_t              : 3;           /*[3:1] Reserved */
      __IOM uint32_t RG_DAC_TIA_DRIVER : 4;           /*[7:4] dac tia driver control bit */
      __IOM uint32_t RG_DAC_GAIN : 3;           /*[10:8] dac gain control bit: */
      __IOM uint32_t RG_DAC_DELAY : 3;           /*[13:11] dac clock delay */
      __IOM uint32_t              : 2;           /*[15:14] Reserved */
      __IOM uint32_t RG_DAC_DCOC : 4;           /*[19:16] dac dcoc data */
      __IOM uint32_t RG_DAC_EN : 1;           /*[20] dac enable */
      __IOM uint32_t RG_DAC_DEM_RST : 1;           /*[21] dac dem reset */
      __IOM uint32_t RG_DAC_DEM_EN : 1;           /*[22] dac dem enable */
      __IOM uint32_t RG_DAC_DCOC_EN : 1;           /*[23] dac dcoc  enable */
      __IOM uint32_t RG_DAC_TIA_MUX_EN : 1;           /*[24] dac tia mux enable */
      __IOM uint32_t RG_DAC_TIA_EN : 1;           /*[25] dac tia enable */
      __IOM uint32_t              : 6;           /*[31:26] Reserved */
    } ADDACR1_b;
  } ;
  union {
    __IOM uint32_t ADDACR2_ALL ;                 /*0x20 ADDA Controll Register 2 */
    struct {
      __IOM uint32_t RG_ADC_TEST_MUX_EN : 1;           /*[0] adc test mux enable */
      __IOM uint32_t              : 2;           /*[2:1] Reserved */
      __IOM uint32_t RG_ADC_DATA_SEL : 1;           /*[3] adc data control */
      __IOM uint32_t RG_ADC_DEM_EN : 1;           /*[4] adc loop delay control2 */
      __IOM uint32_t RG_ADC_RST : 1;           /*[5] adc loop delay control1 */
      __IOM uint32_t RG_ADC_CLK_FREQ : 1;           /*[6] adc clock freq divider control */
      __IOM uint32_t RG_ADC_CLK_PHASE_OUT : 1;           /*[7] adc ns clock phase control */
      __IOM uint32_t RG_ADC_CLK_DELAY : 2;           /*[9:8] adc clock delay control */
      __IOM uint32_t RG_ADC_EN : 1;           /*[10] adc enable  */
      __IOM uint32_t RG_ADC_BUF_VCM_ADJ : 5;           /*[15:11] adc buf vcm  option 00000min�ҧ�..11111max */
      __IOM uint32_t RG_ADC_BUF_D_ADJ : 4;           /*[19:16] adc buf driver option 0000min�ҧ�..1111max */
      __IOM uint32_t              : 4;           /*[23:20] Reserved */
      __IOM uint32_t RG_ADC_VREF_ADJ : 5;           /*[28:24] adc ref  option 00000min�ҧ�..11111max */
      __IOM uint32_t              : 3;           /*[31:29] Reserved */
    } ADDACR2_b;
  } ;
  union {
    __IOM uint32_t RCCALCR_ALL ;                 /*0x24 RC Calibration Controll Register */
    struct {
      __IOM uint32_t AD_RCK_OUT_DATA : 5;           /*[4:0] RCK OUTPUT CODE */
      __IOM uint32_t RCK_CAL_START : 1;           /*[5] RC Calibration Start */
      __IOM uint32_t              : 26;           /*[31:6] Reserved */
    } RCCALCR_b;
  } ;
} BPLC_AFE_Type;


/* =========================================================================================================================== */
/* ================                                            I2C                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief two-wire bidirectional serial bus (I2C)
  */

typedef struct {                                /*!< (@ 0x400C0000) I2C Structure                                              */

  union {
    __IOM uint8_t I2CS;                         /*!< (@ 0x00000000) I2C Status Register                                        */

    struct {
      __IOM uint8_t TF          : 1;            /*!< [0..0] Transfer Complete Flag                                             */
      __IOM uint8_t RC          : 1;            /*!< [1..1] Receive Complete                                                   */
      __IOM uint8_t AASLV       : 1;            /*!< [2..2] Addressed as a slave                                               */
      __IOM uint8_t BBUSY       : 1;            /*!< [3..3] I2C bus busy                                                       */
      __IOM uint8_t ARBL        : 1;            /*!< [4..4] Arbitration lost                                                   */
      __IOM uint8_t RXTX        : 1;            /*!< [5..5] Receive or transmit                                                */
      __IOM uint8_t DACK        : 1;            /*!< [6..6] Data acknowledge received                                          */
      __IOM uint8_t AACK        : 1;            /*!< [7..7] Address acknowledge error                                          */
    } I2CS_b;
  } ;

  union {
    __IOM uint8_t I2CP;                         /*!< (@ 0x00000001) I2C Clock Prescaler Register                               */

    struct {
      __IOM uint8_t PRE         : 6;            /*!< [5..0] Prescaler Divider Value                                            */
      __IOM uint8_t TEST        : 1;            /*!< [6..6] Clock Test Enable                                                  */
    } I2CP_b;
  } ;

  union {
    __IOM uint8_t I2CC;                         /*!< (@ 0x00000002) I2C Control Register                                       */

    struct {
      __IOM uint8_t EN          : 1;            /*!< [0..0] SLV_HSIE                                                           */
      __IM  uint8_t             : 1;
      __IOM uint8_t MSMOD       : 1;            /*!< [2..2] I2C master/slave mode selection contro                             */
      __IOM uint8_t ACKEN       : 1;            /*!< [3..3] Acknowledge enable control                                         */
      __IOM uint8_t REPSTA      : 1;            /*!< [4..4] Repeat Start                                                       */
      __IM  uint8_t             : 1;
      __IOM uint8_t HMS_EN      : 1;            /*!< [6..6] High Speed Mode Enable                                             */
    } I2CC_b;
  } ;
  __IOM uint8_t   I2CSA;                        /*!< (@ 0x00000003) I2C Slave Address Register                                 */

  union {
    __IOM uint8_t I2CPCR;                       /*!< (@ 0x00000004) I2C Port Control Register                                  */

    struct {
      __IOM uint8_t PUI2C       : 2;            /*!< [1..0] Transfer Complete Flag                                             */
      __IOM uint8_t PDI2C       : 2;            /*!< [3..2] Receive Complete                                                   */
      __IOM uint8_t WOMI2C      : 2;            /*!< [5..4] Addressed as a slave                                               */
      __IOM uint8_t SCLPA       : 1;            /*!< [6..6] SCL Port Assignment Bit                                            */
      __IOM uint8_t SDAPA       : 1;            /*!< [7..7] SDA Port Assignment Bit                                            */
    } I2CPCR_b;
  } ;

  union {
    __IOM uint8_t I2CSHIR;                      /*!< (@ 0x00000005) I2C slave high-speed indicator register                    */

    struct {
      __IOM uint8_t SLV_HS      : 1;            /*!< [0..0] Slave high speed mode                                              */
    } I2CSHIR_b;
  } ;

  union {
    __IOM uint8_t I2CSHT;                       /*!< (@ 0x00000006) I2C slave SDA hold time Register                           */

    struct {
      __IOM uint8_t SLVHT       : 6;            /*!< [5..0] slave SDA line hold time configuration                             */
      __IOM uint8_t SDA_FILTER_EN : 1;          /*!< [6..6] SDA Filter enable                                                  */
      __IOM uint8_t SCL_FILTER_EN : 1;          /*!< [7..7] SCL Filter enable                                                  */
    } I2CSHT_b;
  } ;
  __IOM uint8_t   I2CD;                         /*!< (@ 0x00000007) I2C Data Register                                          */

  union {
    __IOM uint8_t I2C10NSFTVR;                  /*!< (@ 0x00000008) I2C 10ns filter trimming value registe                     */

    struct {
      __IOM uint8_t SDA10F      : 4;            /*!< [3..0] I2C SDA line 10ns Filter Trimming value                            */
      __IOM uint8_t SCL10F      : 4;            /*!< [7..4] I2C SCL line 10ns Filter Trimming value                            */
    } I2C10NSFTVR_b;
  } ;

  union {
    __IOM uint8_t I2CFCTR;                      /*!< (@ 0x00000009) I2C filter and current source test register                */

    struct {
      __IOM uint8_t SDA10NSTE   : 1;            /*!< [0..0] SDA10NSTE                                                          */
      __IOM uint8_t SCL10NSTE   : 1;            /*!< [1..1] I2C SCL 10ns Filter Test Enable Bit                                */
      __IOM uint8_t I2CFTE      : 1;            /*!< [2..2] I2C Filter Test Enable Bit                                         */
      __IOM uint8_t I2CCSTE     : 1;            /*!< [3..3] I2C Current Source Test Enable Bit                                 */
    } I2CFCTR_b;
  } ;

  union {
    __IOM uint8_t I2CDDR;                       /*!< (@ 0x0000000A) I2C Port Direction Register                                */

    struct {
      __IOM uint8_t DDRI2C      : 2;            /*!< [1..0] I2C Data Direction Bits                                            */
    } I2CDDR_b;
  } ;

  union {
    __IOM uint8_t I2CPDR;                       /*!< (@ 0x0000000B) I2C Port Data Register                                     */

    struct {
      __IOM uint8_t PORTI2C     : 2;            /*!< [1..0] I2C Port Data Bits                                                 */
    } I2CPDR_b;
  } ;

  union {
    __IOM uint8_t I2CIC;                        /*!< (@ 0x0000000C) I2C Interrupt Control Register                             */

    struct {
      __IOM uint8_t IEN         : 1;            /*!< [0..0] I2C interrupt enable control.                                      */
      __IOM uint8_t AMIE        : 1;            /*!< [1..1] Address Match Interrupt Enable                                     */
      __IOM uint8_t SLV_HSIE    : 1;            /*!< [2..2] High-Speed Mode                                                    */
      __IOM uint8_t STARTIE     : 1;            /*!< [3..3] I2C start Interrupt enable                                         */
      __IOM uint8_t STOPIE      : 1;            /*!< [4..4] I2C stop Interrupt enable                                          */
      __IM  uint8_t             : 1;
      __IOM uint8_t STARTF      : 1;            /*!< [6..6] I2C start Interrupt flag                                           */
      __IOM uint8_t STOPF       : 1;            /*!< [7..7] I2C stop Interrupt flag                                            */
    } I2CIC_b;
  } ;
  __IM  uint8_t   RESERVED[2];

  union {
    __IOM uint8_t I2C50NSFTVR;                  /*!< (@ 0x0000000F) I2C 50ns filter trimming value register                    */

    struct {
      __IOM uint8_t SDA50F      : 4;            /*!< [3..0] I2C SDA line 50ns Filter Trimming value                            */
      __IOM uint8_t SCL50F      : 4;            /*!< [7..4] I2C SCL line 50ns Filter Trimming value                            */
    } I2C50NSFTVR_b;
  } ;
} I2C_Type;                                     /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                       PIT_CONTROL0                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief Programmable Interrupt Timer Modules (PIT_CONTROL0)
  */

typedef struct {                                /*!< (@ 0x40070000) PIT_CONTROL0 Structure                                     */

  union {
    __IOM uint32_t MCR;                         /*!< (@ 0x00000000) PIT Module Control Register                                */

    struct {
      __IOM uint32_t FRZ        : 1;            /*!< [0..0] Freeze                                                             */
      __IOM uint32_t MDIS       : 1;            /*!< [1..1] Module Disable-PIT section                                         */
      __IOM uint32_t MDIS_RTI   : 1;            /*!< [2..2] Module Disable-RTI section                                         */
    } MCR_b;
  } ;
} PIT_CONTROL_Type;                             /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                       PIT_CHANNEL0                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief Programmable Interrupt Timer Modules (PIT_CHANNEL0)
  */

typedef struct {                                /*!< (@ 0x40070100) PIT_CHANNEL0 Structure                                     */
  __IOM uint32_t  LDVAL;                        /*!< (@ 0x00000000) Timer Load Value Register                                  */
  __IOM uint32_t  CVAL;                         /*!< (@ 0x00000004) Current Timer Value Register                               */

  union {
    __IOM uint32_t TCTRL;                       /*!< (@ 0x00000008) Timer Control Register                                     */

    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Timer Interrupt Enable Bit                                         */
      __IOM uint32_t TIE        : 1;            /*!< [1..1] Timer Enable Bit                                                   */
    } TCTRL_b;
  } ;

  union {
    __IOM uint32_t TFLG;                        /*!< (@ 0x0000000C) Timer Flag Register                                        */

    struct {
      __IOM uint32_t TIF        : 1;            /*!< [0..0] Time Interrupt Flag                                                */
    } TFLG_b;
  } ;
} PIT_CHANNEL_Type;                             /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                           SCI0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Serial Communications Interface Module (SCI0)
  */

typedef struct {                                /*!< (@ 0x400D0000) SCI0 Structure                                             */

  union {
    __IOM uint8_t SCICR2;                       /*!< (@ 0x00000000) SCI Control Register 2                                     */

    struct {
      __IOM uint8_t SBK         : 1;            /*!< [0..0] Send Break Bit                                                     */
      __IOM uint8_t RWU         : 1;            /*!< [1..1] Receiver Wakeup Bit                                                */
      __IOM uint8_t RE          : 1;            /*!< [2..2] Receiver Enable Bit                                                */
      __IOM uint8_t TE          : 1;            /*!< [3..3] Transmitter Enable Bit                                             */
      __IOM uint8_t ILIE        : 1;            /*!< [4..4] Idle Line Interrupt Enable Bit                                     */
      __IOM uint8_t RIE         : 1;            /*!< [5..5] Receiver Interrupt Enable Bit                                      */
      __IOM uint8_t TCIE        : 1;            /*!< [6..6] Transmission Complete Interrupt Enable Bit                         */
      __IOM uint8_t TIE         : 1;            /*!< [7..7] Transmitter Interrupt Enable Bit                                   */
    } SCICR2_b;
  } ;

  union {
    __IOM uint8_t SCICR1;                       /*!< (@ 0x00000001) SCI Control Register 1                                     */

    struct {
      __IOM uint8_t PT          : 1;            /*!< [0..0] Parity Type Bit                                                    */
      __IOM uint8_t PE          : 1;            /*!< [1..1] Parity Enable Bit                                                  */
      __IOM uint8_t ILT         : 1;            /*!< [2..2] Idle Line Type Bit                                                 */
      __IOM uint8_t WAKE        : 1;            /*!< [3..3] Idle Line Type Bit                                                 */
      __IOM uint8_t M           : 1;            /*!< [4..4] Wakeup Bit                                                         */
      __IOM uint8_t RSRC        : 1;            /*!< [5..5] Receiver Source Bit                                                */
      __IOM uint8_t WOMS        : 1;            /*!< [6..6] WOMS                                                               */
      __IOM uint8_t LOOPS       : 1;            /*!< [7..7] Loop Select Bit                                                    */
    } SCICR1_b;
  } ;
  __IOM uint8_t   SCIBRDIL;                     /*!< (@ 0x00000002) SCI Integer Baud-Rate Divisor Register Low                 */
  __IOM uint8_t   SCIBRDIH;                     /*!< (@ 0x00000003) SCI Integer Baud-Rate Divisor Register High                */
  __IOM uint8_t   SCIDRL;                       /*!< (@ 0x00000004) SCI Data Register Low                                      */

  union {
    __IOM uint8_t SCIDRH;                       /*!< (@ 0x00000005) SCI Data Register High                                     */

    struct {
      __IM  uint8_t             : 6;
      __IOM uint8_t T_R8        : 1;            /*!< [6..6] Receive/Transmit 8 Bit                                             */
    } SCIDRH_b;
  } ;

  union {
    __IOM uint8_t SCISR2;                       /*!< (@ 0x00000006) SCI Status Register 2                                      */

    struct {
      __IOM uint8_t RAF         : 1;            /*!< [0..0] Receiver Active Flag                                               */
    } SCISR2_b;
  } ;

  union {
    __IOM uint8_t SCISR1;                       /*!< (@ 0x00000007) SCI Status Register 1                                      */

    struct {
      __IOM uint8_t PF          : 1;            /*!< [0..0] Parity Error Flag                                                  */
      __IOM uint8_t FE          : 1;            /*!< [1..1] Framing Error Flag                                                 */
      __IOM uint8_t NF          : 1;            /*!< [2..2] Noise Flag                                                         */
      __IOM uint8_t OR          : 1;            /*!< [3..3] Overrun Flag                                                       */
      __IOM uint8_t IDLE        : 1;            /*!< [4..4] Idle Line Flag                                                     */
      __IOM uint8_t RDRF        : 1;            /*!< [5..5] Receive Data Register Full Flag                                    */
      __IOM uint8_t TC          : 1;            /*!< [6..6] Transmit Complete Flag                                             */
      __IOM uint8_t TDRF        : 1;            /*!< [7..7] Transmit Data Register Empty Flag                                  */
    } SCISR1_b;
  } ;
  __IOM uint8_t   SCIBRDF;                      /*!< (@ 0x00000008) SCI Fractional Baud-Rate Divisor Register                  */

  union {
    __IOM uint8_t SCIDDR;                       /*!< (@ 0x00000009) SCI Data Direction Register                                */

    struct {
      __IOM uint8_t DDRSC0      : 1;            /*!< [0..0] RXD PIN                                                            */
      __IOM uint8_t DDRSC1      : 1;            /*!< [1..1] TXD PIN                                                            */
    } SCIDDR_b;
  } ;

  union {
    __IOM uint8_t SCIPORT;                      /*!< (@ 0x0000000A) SCI Port Data Register                                     */

    struct {
      __IOM uint8_t PORTSC0     : 1;            /*!< [0..0] RXD PIN                                                            */
      __IOM uint8_t PORTSC1     : 1;            /*!< [1..1] TXD PIN                                                            */
    } SCIPORT_b;
  } ;

  union {
    __IOM uint8_t SCIPURD;                      /*!< (@ 0x0000000B) SCI Pullup and Reduced Drive Register                      */

    struct {
      __IOM uint8_t PUPSCI      : 1;            /*!< [0..0] Pullup Enable Bit                                                  */
      __IM  uint8_t             : 6;
      __IOM uint8_t SCISDOZ     : 1;            /*!< [7..7] SCI Stop in Doze Mode Bit                                          */
    } SCIPURD_b;
  } ;

  union {
    __IOM uint16_t SCIIRDR;                     /*!< (@ 0x0000000C) SCI InfraRed Divisor Register                              */

    struct {
      __IOM uint16_t IRDR       : 15;           /*!< [14..0] SCI InfraRed Divisor                                              */
      __IOM uint16_t IRSC       : 1;            /*!< [15..15] InfraRed Interface Sampling Clock Select Bit                     */
    } SCIIRDR_b;
  } ;

  union {
    __IOM uint8_t SCIIRCR;                      /*!< (@ 0x0000000E) SCI InfraRed Control Register                              */

    struct {
      __IOM uint8_t IREN        : 1;            /*!< [0..0] InfraRed Interface Enable Bit                                      */
      __IOM uint8_t IRMD        : 1;            /*!< [1..1] InfraRed Interface mode Select Bit                                 */
      __IOM uint8_t RINV        : 1;            /*!< [2..2] Inverted Infrared Reception Bit                                    */
      __IOM uint8_t TINV        : 1;            /*!< [3..3] Inverted Infrared Transmission Bit                                 */
      __IOM uint8_t RNUM        : 2;            /*!< [5..4] Reception Number Bit                                               */
      __IOM uint8_t TNUM        : 2;            /*!< [7..6] Transmission Number Bit                                            */
    } SCIIRCR_b;
  } ;
  __IOM uint8_t   SCITR;                        /*!< (@ 0x0000000F) SCI Test Register                                          */

  union {
    __IOM uint8_t TXFTOCTR;                     /*!< (@ 0x00000010) SCI FIFO                                                   */

    struct {
      __IM  uint8_t             : 6;
      __IOM uint8_t TXFTOIE     : 1;            /*!< [6..6] txftoie                                                            */
      __IOM uint8_t TXFTOE      : 1;            /*!< [7..7] TXFTOE                                                             */
    } TXFTOCTR_b;
  } ;

  union {
    __IOM uint8_t TXFCR;                        /*!< (@ 0x00000011) TXFCR                                                      */

    struct {
      __IOM uint8_t TXFSTH      : 3;            /*!< [2..0] TXFSTH                                                             */
      __IM  uint8_t             : 1;
      __IOM uint8_t TXFSTHIE    : 1;            /*!< [4..4] TXFSTHIE                                                           */
      __IOM uint8_t TXFUDIE     : 1;            /*!< [5..5] TXFUDIE                                                            */
      __IOM uint8_t TXFOVIE     : 1;            /*!< [6..6] TXFOVIE                                                            */
      __IOM uint8_t TXFCLR      : 1;            /*!< [7..7] TXFCLR                                                             */
    } TXFCR_b;
  } ;

  union {
    __IOM uint8_t DMATHR;                       /*!< (@ 0x00000012) DMATHR                                                     */

    struct {
      __IOM uint8_t RXDMATH     : 3;            /*!< [2..0] RXDMATH                                                            */
      __IM  uint8_t             : 1;
      __IOM uint8_t TXDMATH     : 3;            /*!< [6..4] TXDMATH                                                            */
    } DMATHR_b;
  } ;

  union {
    __IOM uint8_t DMACR;                        /*!< (@ 0x00000013) DMACR                                                      */

    struct {
      __IOM uint8_t RXDMA_EN    : 1;            /*!< [0..0] RXDMA_EN                                                           */
      __IOM uint8_t TXDMA_EN    : 1;            /*!< [1..1] TXDMA_EN                                                           */
    } DMACR_b;
  } ;

  union {
    __IOM uint8_t FSRL;                         /*!< (@ 0x00000014) FSRL                                                       */

    struct {
      __IOM uint8_t RXF_EMPTY   : 1;            /*!< [0..0] RXF_EMPTY                                                          */
      __IOM uint8_t RXF_FULL    : 1;            /*!< [1..1] RXF_FULL                                                           */
      __IOM uint8_t TXF_EMPTY   : 1;            /*!< [2..2] TXF_EMPTY                                                          */
      __IOM uint8_t TXF_FULL    : 1;            /*!< [3..3] TXF_FULL                                                           */
    } FSRL_b;
  } ;

  union {
    __IOM uint8_t FSRH;                         /*!< (@ 0x00000015) FSRH                                                       */

    struct {
      __IOM uint8_t RXF_SER     : 1;            /*!< [0..0] RXF_SER                                                            */
      __IOM uint8_t RXF_UDF     : 1;            /*!< [1..1] RXF_UDF                                                            */
      __IOM uint8_t RXF_OVF     : 1;            /*!< [2..2] RXF_OVF                                                            */
      __IOM uint8_t RXF_TO      : 1;            /*!< [3..3] RXF_TO                                                             */
      __IOM uint8_t TXF_SER     : 1;            /*!< [4..4] TXF_SER                                                            */
      __IOM uint8_t TXF_UDF     : 1;            /*!< [5..5] TXF_UDF                                                            */
      __IOM uint8_t TXF_OVF     : 1;            /*!< [6..6] TXF_OVF                                                            */
      __IOM uint8_t TXF_TO      : 1;            /*!< [7..7] TXF_TO                                                             */
    } FSRH_b;
  } ;

  union {
    __IOM uint8_t RXFTOCTR;                     /*!< (@ 0x00000016) RXFTOCTR                                                   */

    struct {
      __IOM uint8_t RXFTO_CNR   : 6;            /*!< [5..0] RXFTO_CNR                                                          */
      __IOM uint8_t RXFTOE      : 1;            /*!< [6..6] RXFTOE                                                             */
      __IOM uint8_t RXFTOIE     : 1;            /*!< [7..7] RXFTOIE                                                            */
    } RXFTOCTR_b;
  } ;

  union {
    __IOM uint8_t RXFCR;                        /*!< (@ 0x00000017) RXFCR                                                      */

    struct {
      __IOM uint8_t RXFSTH      : 3;            /*!< [2..0] RXFSTH                                                             */
      __IM  uint8_t             : 1;
      __IOM uint8_t RXFSTHIE    : 1;            /*!< [4..4] RXFSTHIE                                                           */
      __IOM uint8_t RXFUDIE     : 1;            /*!< [5..5] RXFUDIE                                                            */
      __IOM uint8_t RXFOVIE     : 1;            /*!< [6..6] RXFOVIE                                                            */
      __IOM uint8_t RXFCLR      : 1;            /*!< [7..7] RXFCLR                                                             */
    } RXFCR_b;
  } ;
  __IOM uint8_t   RXFDBGR;                      /*!< (@ 0x00000018) RXFDBGR                                                    */
  __IOM uint8_t   TXFDBGR;                      /*!< (@ 0x00000019) TXFDBGR                                                    */

  union {
    __IOM uint8_t RXFSR;                        /*!< (@ 0x0000001A) RXFSR                                                      */

    struct {
      __IOM uint8_t RXF_COUNTER : 4;            /*!< [3..0] RXF_COUNTER                                                        */
      __IOM uint8_t RXF_NXTPTR  : 3;            /*!< [6..4] RXF_NXTPTR                                                         */
    } RXFSR_b;
  } ;

  union {
    __IOM uint8_t TXFSR;                        /*!< (@ 0x0000001B) TXFSR                                                      */

    struct {
      __IOM uint8_t TXF_COUNTER : 4;            /*!< [3..0] TXF_COUNTER                                                        */
      __IOM uint8_t TXF_NXTPTR  : 3;            /*!< [6..4] TXF_NXTPTR                                                         */
    } TXFSR_b;
  } ;
  __IM  uint16_t  RESERVED;
  __IM  uint8_t   RESERVED1;

  union {
    __IOM uint8_t FDCR;                         /*!< (@ 0x0000001F) FDCR                                                       */

    struct {
      __IOM uint8_t RXFIDX      : 3;            /*!< [2..0] RXFIDX                                                             */
      __IM  uint8_t             : 1;
      __IOM uint8_t TXFIDX      : 3;            /*!< [6..4] TXFIDX                                                             */
    } FDCR_b;
  } ;
} SCI_Type;                                     /*!< Size = 32 (0x20)                                                          */



/* =========================================================================================================================== */
/* ================                                           SPI0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Serial Peripheral Interface Module (SPI0)
  */

typedef struct {                                /*!< (@ 0x400A0000) SPI0 Structure                                             */

  union {
    __IOM uint8_t SPICR1;                       /*!< (@ 0x00000000) SCI Integer Baud-Rate Divisor Register High                */

    struct {
      __IOM uint8_t LSBFE       : 1;            /*!< [0..0] SPI Interrupt Enable Bit                                           */
      __IOM uint8_t SSOE        : 1;            /*!< [1..1] SPI System Enable Bit                                              */
      __IOM uint8_t CPHA        : 1;            /*!< [2..2] Clock Phase Bit                                                    */
      __IOM uint8_t CPOL        : 1;            /*!< [3..3] Clock Polarity Bit                                                 */
      __IOM uint8_t MSTR        : 1;            /*!< [4..4] Master Bit                                                         */
      __IOM uint8_t SWOM        : 1;            /*!< [5..5] SPI Wired-OR Mode Bit                                              */
      __IOM uint8_t SPE         : 1;            /*!< [6..6] SPI System Enable Bit                                              */
      __IOM uint8_t SPIE        : 1;            /*!< [7..7] SPI Interrupt Enable Bit                                           */
    } SPICR1_b;
  } ;

  union {
    __IOM uint8_t SPICR2;                       /*!< (@ 0x00000001) SPI Control Register 2                                     */

    struct {
      __IOM uint8_t SPC0        : 1;            /*!< [0..0] SPI Stop in Doze Bit                                               */
      __IOM uint8_t SPISDOZ     : 1;            /*!< [1..1] SPI Stop in Doze Bit                                               */
      __IOM uint8_t GT          : 6;            /*!< [7..2] Guard Time Bits                                                    */
    } SPICR2_b;
  } ;

  union {
    __IOM uint8_t SPIBR;                        /*!< (@ 0x00000002) SPI Baud Rate Register                                     */

    struct {
      __IOM uint8_t SPR         : 3;            /*!< [2..0] SPI Baud Rate Bits                                                 */
      __IM  uint8_t             : 1;
      __IOM uint8_t SPPR        : 3;            /*!< [6..4] SPI Baud Rate Preselection Bits                                    */
    } SPIBR_b;
  } ;

  union {
    __IOM uint8_t SPIFR;                        /*!< (@ 0x00000003) SPI Frame Register                                         */

    struct {
      __IOM uint8_t FMSZ        : 4;            /*!< [3..0] Frame Size                                                         */
      __IOM uint8_t FFSEL       : 1;            /*!< [4..4] Frame Format Select                                                */
      __IOM uint8_t LBM         : 1;            /*!< [5..5] Loop Back Mode                                                     */
      __IOM uint8_t GTE         : 1;            /*!< [6..6] Guard Time Enable                                                  */
      __IOM uint8_t CONT        : 1;            /*!< [7..7] Continuousperipheral chip select enable                            */
    } SPIFR_b;
  } ;

  union {
    __IOM uint8_t SPIRXFCR;                     /*!< (@ 0x00000004) SPI RX FIFO Control Register                               */

    struct {
      __IOM uint8_t RXFSTH      : 3;            /*!< [2..0] RX FIFO Service Threshold                                          */
      __IM  uint8_t             : 1;
      __IOM uint8_t RXFSTHIE    : 1;            /*!< [4..4] RX FIFO Service Threshold Interrupt Enable                         */
      __IOM uint8_t RXFUDIE     : 1;            /*!< [5..5] RX FIFO Underflow Interrupt Enable                                 */
      __IOM uint8_t RXFOVIE     : 1;            /*!< [6..6] RX FIFO Overflow Interrupt Enable                                  */
      __IOM uint8_t RXFCLR      : 1;            /*!< [7..7] RX FIFO Clear                                                      */
    } SPIRXFCR_b;
  } ;

  union {
    __IOM uint8_t SPITXFCR;                     /*!< (@ 0x00000005) SPI TX FIFO Control Register                               */

    struct {
      __IOM uint8_t TXFSTH      : 3;            /*!< [2..0] TX FIFO Service Threshold                                          */
      __IM  uint8_t             : 1;
      __IOM uint8_t TXFSTHIE    : 1;            /*!< [4..4] TX FIFO Service Threshold Interrupt Enable                         */
      __IOM uint8_t TXFUDIE     : 1;            /*!< [5..5] TX FIFO Underflow Interrupt Enable                                 */
      __IOM uint8_t TXFOVIE     : 1;            /*!< [6..6] TX FIFO Overflow Interrupt Enable                                  */
      __IOM uint8_t TXFCLR      : 1;            /*!< [7..7] TX FIFO Clear                                                      */
    } SPITXFCR_b;
  } ;

  union {
    __IOM uint8_t SPIRXFTOCTR;                  /*!< (@ 0x00000006) SPI RX FIFO TimeOut Counter Register                       */

    struct {
      __IOM uint8_t SPIRXFTOCTR : 6;            /*!< [5..0] sets the SPI RX FIFO Timeout counter number                        */
      __IOM uint8_t RXFTOE      : 1;            /*!< [6..6] RX FIFO TimeOut Function Enable                                    */
      __IOM uint8_t RXFTOIE     : 1;            /*!< [7..7] RX FIFO TimeOut Interrupt Enable                                   */
    } SPIRXFTOCTR_b;
  } ;

  union {
    __IOM uint8_t SPITXFTOCTR;                  /*!< (@ 0x00000007) SPI TX FIFO TimeOut Counter Register                       */

    struct {
      __IOM uint8_t SPITXFTOCTR : 6;            /*!< [5..0] sets the SPI TX FIFO Timeout counter number                        */
      __IOM uint8_t TXFTOE      : 1;            /*!< [6..6] TX FIFO TimeOut Function Enable                                    */
      __IOM uint8_t TXFTOIE     : 1;            /*!< [7..7] TX FIFO TimeOut Interrupt Enable                                   */
    } SPITXFTOCTR_b;
  } ;

  union {
    __IOM uint8_t SPIDDR;                       /*!< (@ 0x00000008) SPI Port Data Direction Register                           */

    struct {
      __IOM uint8_t PORTSP      : 4;            /*!< [3..0] Data Direction Bits                                                */
    } SPIDDR_b;
  } ;

  union {
    __IOM uint8_t SPIIR;                        /*!< (@ 0x00000009) SPI Interface Register                                     */

    struct {
      __IOM uint8_t PUPSP       : 1;            /*!< [0..0] SPI Port Pullup Enable Bit                                         */
      __IOM uint8_t PDPSP       : 1;            /*!< [1..1] SPI Port Reduced Drive Control Bit                                 */
      __IOM uint8_t MSPD        : 2;            /*!< [3..2] SPI Master Sample Point Delay                                      */
      __IM  uint8_t             : 2;
      __IOM uint8_t PSW         : 1;            /*!< [6..6] Pin Switch Bit                                                     */
      __IOM uint8_t HS          : 1;            /*!< [7..7] High Speed Mode Enable in SPI slave mode                           */
    } SPIIR_b;
  } ;

  union {
    __IOM uint8_t SPIASCDR;                     /*!< (@ 0x0000000A) SPI After SCK Delay Register                               */

    struct {
      __IOM uint8_t ASCD        : 3;            /*!< [2..0] SPI After SCK Delay Bits                                           */
      __IM  uint8_t             : 1;
      __IOM uint8_t PASCD       : 3;            /*!< [6..4] After SCK Delay Enable                                             */
      __IOM uint8_t ASCDE       : 1;            /*!< [7..7] After SCK Delay Enable                                             */
    } SPIASCDR_b;
  } ;

  union {
    __IOM uint8_t SPIBSCDR;                     /*!< (@ 0x0000000B) SPI Before SCK Delay Register                              */

    struct {
      __IOM uint8_t BSCD        : 3;            /*!< [2..0] SPI Before SCK Delay Bits                                          */
      __IM  uint8_t             : 1;
      __IOM uint8_t PBSCD       : 3;            /*!< [6..4] SPI Before SCK Delay Preselection Bits                             */
      __IOM uint8_t BSCDE       : 1;            /*!< [7..7] Before SCK Delay Enable                                            */
    } SPIBSCDR_b;
  } ;

  union {
    __IOM uint8_t SPIPORT;                      /*!< (@ 0x0000000C) SPI Port Data Register                                     */

    struct {
      __IOM uint8_t PORTSP      : 4;            /*!< [3..0] SPI Port Data Bits                                                 */
    } SPIPORT_b;
  } ;
  __IOM uint8_t   SPITCNT_L;                    /*!< (@ 0x0000000D) SPI Transmit Counter Register                              */
  __IOM uint16_t  SPITCNT_H;                    /*!< (@ 0x0000000E) SPI Transmit Counter Register                              */
  __IOM uint8_t   SPIDR_L;                      /*!< (@ 0x00000010) SPI Data Register                                          */
  __IOM uint8_t   SPIDR_H;                      /*!< (@ 0x00000011) SPI Data Register                                          */
  __IM  uint16_t  RESERVED;

  union {
    __IOM uint16_t SPISR;                       /*!< (@ 0x00000014) SPI Status Register                                        */

    struct {
      __IOM uint16_t RXFEMP     : 1;            /*!< [0..0] RX FIFO empty Flag                                                 */
      __IOM uint16_t RXFFULL    : 1;            /*!< [1..1] RX FIFO Full Flag                                                  */
      __IOM uint16_t TXFEMP     : 1;            /*!< [2..2] TX FIFO empty Flag                                                 */
      __IOM uint16_t TXFFULL    : 1;            /*!< [3..3] TX FIFO Full Flag                                                  */
      __IOM uint16_t MODF       : 1;            /*!< [4..4] Mode Fault Flag                                                    */
      __IOM uint16_t EOTF       : 1;            /*!< [5..5] End of Transmission Flag                                           */
      __IOM uint16_t FLOST      : 1;            /*!< [6..6] Frame Lost                                                         */
      __IOM uint16_t SPIF       : 1;            /*!< [7..7] SPI Finish Flag                                                    */
      __IOM uint16_t RXFSER     : 1;            /*!< [8..8] RX FIFO Underflow Flag                                             */
      __IOM uint16_t RXFUDF     : 1;            /*!< [9..9] RX FIFO Underflow Flag                                             */
      __IOM uint16_t RXFOVF     : 1;            /*!< [10..10] RX FIFO TimeOut                                                  */
      __IOM uint16_t RXFTO      : 1;            /*!< [11..11] RX FIFO TimeOut                                                  */
      __IOM uint16_t TXFSER     : 1;            /*!< [12..12] TX FIFO Underflow Flag                                           */
      __IOM uint16_t TXFUDF     : 1;            /*!< [13..13] TX FIFO Underflow Flag                                           */
      __IOM uint16_t TXFOVF     : 1;            /*!< [14..14] TX FIFO Overflow Flag                                            */
      __IOM uint16_t TXFTO      : 1;            /*!< [15..15] TX FIFO TimeOut                                                  */
    } SPISR_b;
  } ;

  union {
    __IOM uint8_t SPIRXFSR;                     /*!< (@ 0x00000016) SPI RX FIFO Status Register                                */

    struct {
      __IOM uint8_t RXFCTR      : 4;            /*!< [3..0] RX FIFO Counter                                                    */
      __IOM uint8_t RXNXTP      : 3;            /*!< [6..4] RX Next Pointer                                                    */
    } SPIRXFSR_b;
  } ;

  union {
    __IOM uint8_t SPITXFSR;                     /*!< (@ 0x00000017) SPI TX FIFO Status Register                                */

    struct {
      __IOM uint8_t TXFCTR      : 4;            /*!< [3..0] TX FIFO Counter                                                    */
      __IOM uint8_t TXNXTP      : 3;            /*!< [6..4] TX Next Pointer                                                    */
    } SPITXFSR_b;
  } ;

  union {
    __IOM uint8_t SPIDMACR;                     /*!< (@ 0x00000018) SPI DMA Control Register                                   */

    struct {
      __IOM uint8_t RXDMAE      : 1;            /*!< [0..0] SPI Interrupt Enable Bit                                           */
      __IOM uint8_t TXDMAE      : 1;            /*!< [1..1] RX FIFO DMA request Enable                                         */
    } SPIDMACR_b;
  } ;

  union {
    __IOM uint8_t SPIDMATHR;                    /*!< (@ 0x00000019) SPI DMA Threshold Register                                 */

    struct {
      __IOM uint8_t RXDMATH     : 3;            /*!< [2..0] RX DMA Threshold                                                   */
      __IM  uint8_t             : 1;
      __IOM uint8_t TXDMATH     : 3;            /*!< [6..4] RX DMA Threshold                                                   */
    } SPIDMATHR_b;
  } ;

  union {
    __IOM uint8_t SPIFDCR;                      /*!< (@ 0x0000001A) SPI FIFO Debug Control Register                            */

    struct {
      __IOM uint8_t RXFIDX      : 3;            /*!< [2..0] RX FIFO Index                                                      */
      __IM  uint8_t             : 1;
      __IOM uint8_t TXFIDX      : 3;            /*!< [6..4] TX FIFO Index                                                      */
    } SPIFDCR_b;
  } ;

  union {
    __IOM uint8_t SPIICR;                       /*!< (@ 0x0000001B) SPI Interrupt Control Register                             */

    struct {
      __IM  uint8_t             : 4;
      __IOM uint8_t MODFIE      : 1;            /*!< [4..4] MODF Interrupt Enable                                              */
      __IM  uint8_t             : 1;
      __IOM uint8_t FLOSTIE     : 1;            /*!< [6..6] FLOST Interrupt Enable                                             */
    } SPIICR_b;
  } ;
  __IOM uint8_t   SPIRXFDBGR;                   /*!< (@ 0x0000001C) SPI RX FIFO Debug Register                                 */
  __IOM uint8_t   SPITXFDBGR;                   /*!< (@ 0x0000001D) SPI TX FIFO Debug Register                                 */
} SPI_Type;                                     /*!< Size = 30 (0x1e)                                                          */



/* =========================================================================================================================== */
/* ================                                            CCM                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Chip Configuration Module (CCM)
  */

typedef struct {                                /*!< (@ 0x40010000) CCM Structure                                              */

  __IOM uint32_t CIR;                           /*!< (@ 0x00000000) CIR Configuration Register                                 */
  __IOM uint32_t RSTB_FLT;                      /*!< (@ 0x00000004) RSTB_FLT Configuration Register                            */
  __IOM uint32_t WKUPC;                         /*!< (@ 0x00000008) Wakeup Configuration Register                              */
  union {
    __IOM uint32_t TMR;                         /*!< (@ 0x0000000C) TM Configuration Register                                  */

    struct {
      __IOM uint32_t AFETM    : 1;              /*!< [0..0] AFETM                                                              */
      __IOM uint32_t TSTM     : 1;              /*!< [1..1] TSTM                                                               */
      __IM  uint32_t          : 28;             /*!< [29..2] reserved                                                          */
      __IOM uint32_t TEST     : 2;              /*!< [31..30] TEST                                                               */
    } TMR_b;
  } ;
  __IOM uint32_t WKUPC1;                        /*!< (@ 0x00000010) Wakeup Configuration Register                              */

} CCM_Type;                                     /*!< Size = 48 (0x30)                                                          */



/* =========================================================================================================================== */
/* ================                                            CPM                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Clock and Power Control Module (CPM)
  */

typedef struct {                                /*!< (@ 0x40030000) CPM Structure                                              */

  union {
    __IOM uint32_t SYSCCFG;                     /*!< (@ 0x00000000) SYSCCFG                                                    */

    struct {
      __IOM uint32_t EoscEn     : 1;            /*!< [0..0] EoscEn                                                             */
      __IOM uint32_t RG_PMU_CLK_EN : 1;         /*!< [1..1] RG_PMU_CLK_EN                                                      */
      __IOM uint32_t EoscReady  : 1;            /*!< [2..2] EoscReady                                                          */
      __IOM uint32_t RG_OSC_EN  : 1;            /*!< [3..3] RG_OSC_EN                                                          */
      __IOM uint32_t AD_128K_TEST : 1;          /*!< [4..4] AD_128K_TEST                                                       */
      __IOM uint32_t SoftSwitchEn : 1;          /*!< [5..5] SoftSwitchEn                                                       */
      __IOM uint32_t CLK_MUX    : 2;            /*!< [7..6] CLK_MUX                                                            */
      __IOM uint32_t BPLC_CLK_DIV : 3;          /*!< [10..8] BPLC_CLK_DIV                                                      */
      __IOM uint32_t SYS_CLK_DIV : 2;           /*!< [12..11] SYS_CLK_DIV                                                      */
      __IOM uint32_t CLK_OUT_SEL : 3;           /*!< [15..13] CLK_OUT_SEL                                                      */
      __IOM uint32_t IPS_CLK    : 8;            /*!< [23..16] IPS_CLK                                                          */
      __IOM uint32_t HRF_CLK_DIV : 3;           /*!< [26..24] HRF_CLK_DIV                                                      */
      __IOM uint32_t CLKSWDONE  : 1;            /*!< [27..27] CLKSWDONE                                                        */
      __IM  uint32_t            : 2;
      __IOM uint32_t TEST       : 2;            /*!< [31..30] ADDRESS0TEST                                                     */
    } SYSCCFG_b;
  } ;

  union {
    __IOM uint32_t OSCCR;                       /*!< (@ 0x00000004) OSCCR                                                      */

    struct {
      __IOM uint32_t RG_OSC_EN_ALC : 1;         /*!< [0..0] RG_OSC_EN_ALC                                                      */
      __IOM uint32_t RG_OSC_BIAS_TRIM : 4;      /*!< [4..1] RG_OSC_BIAS_TRIM                                                   */
      __IOM uint32_t RG_OSC_RANGE : 1;          /*!< [5..5] RG_OSC_RANGE                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t RG_OSC_DRIVE : 8;          /*!< [15..8] RG_OSC_DRIVE                                                      */
      __IOM uint32_t RG_OSC_CAPTRIM : 8;        /*!< [23..16] RG_OSC_CAPTRIM                                                   */
      __IOM uint32_t RG_PMU_CLK_TRIM : 5;       /*!< [28..24] RG_PMU_CLK_TRIM                                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t TEST       : 2;            /*!< [31..30] ADDRESS0TEST                                                     */
    } OSCCR_b;
  } ;
  __IOM uint32_t  MSCRSTOP;                     /*!< (@ 0x00000008) MSCRSTOP                                                   */
  __IOM uint32_t  MSCR;                         /*!< (@ 0x0000000C) Module Stop Control Register                               */
  __IM  uint32_t  RESERVED;

  union {
    __IOM uint32_t PLL_CONFIG0;                 /*!< (@ 0x00000014) PLL_CONFIG0                                                */

    struct {
      __IOM uint32_t PLL_FBDIV  : 12;           /*!< [11..0] PLL_FBDIV                                                         */
      __IOM uint32_t PLL_REFDIV : 6;            /*!< [17..12] PLL_REFDIV                                                       */
      __IOM uint32_t PLL_POSTDIV1 : 4;          /*!< [21..18] PLL_POSTDIV1                                                     */
      __IOM uint32_t PLL_POSTDIV2 : 3;          /*!< [24..22] PLL_POSTDIV2                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t PLL_PD     : 1;            /*!< [26..26] PLL_PD                                                           */
      __IOM uint32_t PLL_FOUTVCOPD : 1;         /*!< [27..27] PLL_FOUTVCOPD                                                    */
      __IOM uint32_t PLL_FOUT2PD : 1;           /*!< [28..28] PLL_FOUT2PD                                                      */
      __IOM uint32_t PLL_FOUT1PD : 1;           /*!< [29..29] PLL_FOUT1PD                                                      */
      __IOM uint32_t PLL_DSMPD  : 1;            /*!< [30..30] PLL_DSMPD                                                        */
      __IOM uint32_t PLL_BYPASS : 1;            /*!< [31..31] PLL_BYPASS                                                       */
    } PLL_CONFIG0_b;
  } ;

  union {
    __IOM uint32_t PLL_CONFIG1;                 /*!< (@ 0x00000018) PLL_CONFIG1                                                */

    struct {
      __IOM uint32_t PLL_FRAC   : 24;           /*!< [23..0] PLL_FRAC                                                          */
      __IOM uint32_t PLL_POSTDIV1 : 4;          /*!< [27..24] PLL_POSTDIV1                                                     */
      __IOM uint32_t PLL_POSTDIV2 : 3;          /*!< [30..28] PLL_POSTDIV2                                                     */
      __IOM uint32_t PLL_LOCK   : 1;            /*!< [31..31] PLL_LOCK                                                         */
    } PLL_CONFIG1_b;
  } ;
  __IOM uint32_t  AHBMSCR;                      /*!< (@ 0x0000001C) AHBMSCR                                                    */
  __IOM uint32_t  AHBMSCRSTOP;                  /*!< (@ 0x00000020) AHBMSCRSTOP                                                */

  union {
    __IOM uint32_t PMUCR;                       /*!< (@ 0x00000024) PMUCR                                                      */

    struct {
      __IOM uint32_t DA_REST1V  : 1;            /*!< [0..0] DA_REST1V                                                          */
      __IOM uint32_t RG_VDD12_SEL : 2;          /*!< [2..1] RG_VDD12_SEL                                                       */
      __IOM uint32_t RG_DCDC_VOUT_TR : 2;       /*!< [4..3] RG_DCDC_VOUT_TR                                                    */
      __IOM uint32_t RG_BBU_EN  : 1;            /*!< [5..5] RG_BBU_EN                                                          */
      __IOM uint32_t RG_RF1V8_EN : 1;           /*!< [6..6] RG_RF1V8_EN                                                        */
      __IM  uint32_t            : 1;
      __IOM uint32_t RG_DCDC_BG_TR : 4;         /*!< [11..8] RG_DCDC_BG_TR                                                     */
      __IOM uint32_t RG_DCDC_GCS_TR : 2;        /*!< [13..12] RG_DCDC_GCS_TR                                                   */
      __IOM uint32_t RG_DCDC_MFGAIN_TR : 2;     /*!< [15..14] RG_DCDC_MFGAIN_TR                                                */
      __IOM uint32_t RG_DCDC_ZCD_TR : 2;        /*!< [17..16] RG_DCDC_ZCD_TR                                                   */
      __IOM uint32_t RG_DCDC_CCM : 1;           /*!< [18..18] RG_DCDC_CCM                                                      */
      __IOM uint32_t RG_DCDC_DCM : 1;           /*!< [19..19] RG_DCDC_DCM                                                      */
      __IOM uint32_t RG_RF1V8_TR : 2;           /*!< [21..20] RG_RF1V8_TR                                                      */
      __IM  uint32_t            : 8;
      __IOM uint32_t TEST       : 2;            /*!< [31..30] TEST                                                             */
    } PMUCR_b;
  } ;

  union {
    __IOM uint32_t VBATDETCR;                   /*!< (@ 0x00000028) VBATDETCR                                                  */

    struct {
      __IOM uint32_t VBATDET_EN : 1;            /*!< [0..0] VPINDET_EN                                                         */
      __IM  uint32_t            : 7;
      __IOM uint32_t VBATDET_DOUT : 16;         /*!< [23..8] VPINDET_DOUT                                                      */
      __IM  uint32_t            : 6;
      __IOM uint32_t TEST       : 2;            /*!< [31..30] Test                                                             */
    } VBATDETCR_b;
  } ;

  union {
    __IOM uint32_t VDETCR;                      /*!< (@ 0x0000002C) VDETCR                                                     */

    struct {
      __IOM uint32_t VPINDET_EN : 1;            /*!< [0..0] VPINDET_EN                                                         */
      __IOM uint32_t VPINDET_S  : 1;            /*!< [1..1] VPINDET_S                                                          */
      __IM  uint32_t            : 6;
      __IOM uint32_t VPINDET_DOUT : 16;         /*!< [23..8] VPINDET_DOUT                                                      */
      __IM  uint32_t            : 6;
      __IOM uint32_t TEST       : 2;            /*!< [31..30] Test                                                             */
    } VDETCR_b;
  } ;

  union {
    __IOM uint32_t MISCCLKCR;                   /*!< (@ 0x00000030) MISCCLKCR                                                  */

    struct {
      __IOM uint32_t TS_CLK_DIV : 12;           /*!< [11..0] TS_CLK_DIV                                                        */
      __IOM uint32_t TS_CLK_EN  : 1;            /*!< [12..12] TS_CLK_EN                                                        */
      __IOM uint32_t ATRITH_CLK_DIV : 2;        /*!< [14..13] ATRITH_CLK_DIV                                                   */
      __IOM uint32_t ARITH_CLK_EN : 1;          /*!< [15..15] ARITH_CLK_EN                                                     */
      __IOM uint32_t HRF_BBP_CLK_EN : 1;        /*!< [16..16] HRF_BBP_CLK_EN                                                   */
      __IOM uint32_t HRF_MEM_CLK_EN : 1;        /*!< [17..17] HRF_MEM_CLK_EN                                                   */
      __IOM uint32_t HPLC_BBP_CLK_EN : 1;       /*!< [18..18] HPLC_BBP_CLK_EN                                                  */
      __IOM uint32_t HPLC_MEM_CLK_EN : 1;       /*!< [19..19] HPLC_MEM_CLK_EN                                                  */
      __IOM uint32_t QSPI_FCK_EN : 1;           /*!< [20..20] QSPI_FCK_EN                                                      */
      __IOM uint32_t SPIBUS_CLK_EN : 1;         /*!< [21..21] SPIBUS_CLK_EN                                                    */
      __IOM uint32_t PSRAM_CLK_EN : 1;          /*!< [22..22] PSRAM_CLK_EN                                                     */
      __IM  uint32_t            : 7;
      __IOM uint32_t TEST       : 2;            /*!< [31..30] ADDRESS0TEST                                                     */
    } MISCCLKCR_b;
  } ;

  union {
    __IOM uint32_t MISCCLKCRSTOP;               /*!< (@ 0x00000034) MISCCLKCRSTOP                                              */

    struct {
      __IOM uint32_t TS_CLK_EN  : 1;            /*!< [0..0] TS_CLK_EN                                                          */
      __IOM uint32_t ARITH_CLK_EN : 1;          /*!< [1..1] ARITH_CLK_EN                                                       */
      __IOM uint32_t HRF_BBP_CLK_EN : 1;        /*!< [2..2] HRF_BBP_CLK_EN                                                     */
      __IOM uint32_t HRF_MEM_CLK_EN : 1;        /*!< [3..3] HRF_MEM_CLK_EN                                                     */
      __IOM uint32_t HPLC_BBP_CLK_EN : 1;       /*!< [4..4] HPLC_BBP_CLK_EN                                                    */
      __IOM uint32_t HPLC_MEM_CLK_EN : 1;       /*!< [5..5] HPLC_MEM_CLK_EN                                                    */
      __IOM uint32_t QSPI_FCK_EN : 1;           /*!< [6..6] QSPI_FCK_EN                                                        */
      __IOM uint32_t SPIBUS_CLK_EN : 1;         /*!< [7..7] SPIBUS_CLK_EN                                                      */
      __IOM uint32_t PSRAM_CLK_EN : 1;          /*!< [8..8] PSRAM_CLK_EN                                                       */
      __IM  uint32_t            : 21;
      __IOM uint32_t TEST       : 2;            /*!< [31..30] ADDRESS0TEST                                                     */
    } MISCCLKCRSTOP_b;
  } ;

  union {
    __IOM uint32_t BATVDCFGR;                   /*!< (@ 0x00000038) BATVDCFGR                                                  */

    struct {
      __IOM uint32_t BatVolDetLValue_Rst : 4;   /*!< [3..0] BatVolDetLValue_Rst                                                */
      __IOM uint32_t BatVolDetHValue_Rst : 4;   /*!< [7..4] BatVolDetHValue_Rst                                                */
      __IOM uint32_t BatVolDetLValue_Int : 4;   /*!< [11..8] BatVolDetLValue_Int                                               */
      __IOM uint32_t BatVolDetHValue_Int : 4;   /*!< [15..12] BatVolDetHValue_Int                                              */
      __IM  uint32_t            : 8;
      __IOM uint32_t BatVolDetRstEn : 1;        /*!< [24..24] BatVolDetRstEn                                                   */
      __IOM uint32_t BatVolDetRstFlag : 1;      /*!< [25..25] BatVolDetRstFlag                                                 */
      __IOM uint32_t BatVolDetLIE : 1;          /*!< [26..26] BatVolDetLIE                                                     */
      __IOM uint32_t BatVolDetHIE : 1;          /*!< [27..27] BatVolDetHIE                                                     */
      __IOM uint32_t BatVolDetLFlag : 1;        /*!< [28..28] BatVolDetLFlag                                                   */
      __IOM uint32_t BatVolDetHFlag : 1;        /*!< [29..29] BatVolDetHFlag                                                   */
      __IOM uint32_t TEST       : 2;            /*!< [31..30] TEST                                                             */
    } BATVDCFGR_b;
  } ;

  union {
    __IOM uint32_t PINVDCFGR;                   /*!< (@ 0x0000003C) PINVDCFGR                                                  */

    struct {
      __IOM uint32_t PinVolDetLValue : 4;       /*!< [3..0] PinVolDetLValue                                                    */
      __IOM uint32_t PinVolDetHValue : 4;       /*!< [7..4] PinVolDetHValue                                                    */
      __IM  uint32_t            : 16;
      __IOM uint32_t PinVolDetLIE : 1;          /*!< [24..24] PinVolDetLIE                                                     */
      __IOM uint32_t PinVolDetHIE : 1;          /*!< [25..25] PinVolDetHIE                                                     */
      __IOM uint32_t PinVolDetLFlag : 1;        /*!< [26..26] PinVolDetLFlag                                                   */
      __IOM uint32_t PinVolDetHFlag : 1;        /*!< [27..27] PinVolDetHFlag                                                   */
      __IM  uint32_t            : 2;
      __IOM uint32_t TEST       : 2;            /*!< [31..30] TEST                                                             */
    } PINVDCFGR_b;
  } ;
} CPM_Type;                                     /*!< Size = 64 (0x40)                                                          */



/* =========================================================================================================================== */
/* ================                                           PWM0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Pulse Width Modulator (PWM0)
  */

typedef struct {                                /*!< (@ 0x40A00000) PWM0 Structure                                             */

  union {
    __IOM uint32_t PPR;                         /*!< (@ 0x00000000) PWM Pre-scale Register                                     */

    struct {
      __IOM uint32_t CP0        : 8;            /*!< [7..0] Clock pre-scale 0 for PWM Timer 0,1                                */
      __IOM uint32_t CP1        : 8;            /*!< [15..8] Clock pre-scale 1 for PWM Timer 2,3                               */
      __IOM uint32_t DZI0       : 8;            /*!< [23..16] Dead zone interval register 0 for PWM0 and PWM1                  */
      __IOM uint32_t DZI1       : 8;            /*!< [31..24] Dead zone interval register 1 for PWM2 and PWM3                  */
    } PPR_b;
  } ;

  union {
    __IOM uint32_t PCSR;                        /*!< (@ 0x00000004) PWM Clock Select Register                                  */

    struct {
      __IOM uint32_t CSR0       : 3;            /*!< [2..0] Timer Clock Source Selection                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t CSR1       : 3;            /*!< [6..4] Timer Clock Source Selection                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t CSR2       : 3;            /*!< [10..8] Timer Clock Source Selection                                      */
      __IM  uint32_t            : 1;
      __IOM uint32_t CSR3       : 3;            /*!< [14..12] Timer Clock Source Selection                                     */
    } PCSR_b;
  } ;

  union {
    __IOM uint32_t PCR;                         /*!< (@ 0x00000008) PWM Control Register                                       */

    struct {
      __IOM uint32_t CH0EN      : 1;            /*!< [0..0] Timer 0 Enable/Disable                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t CH0INV     : 1;            /*!< [2..2] Timer 0 Inverter ON/OFF                                            */
      __IOM uint32_t CH0MOD     : 1;            /*!< [3..3] Timer 0 Auto-load/One-Shot Mode                                    */
      __IOM uint32_t DZEN0      : 1;            /*!< [4..4] Dead-Zone 0 Generator Enable/Disable                               */
      __IOM uint32_t DZEN1      : 1;            /*!< [5..5] Dead-Zone 1 Generator Enable/Disable                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t CH0_HDU    : 1;            /*!< [7..7] Timer0 Half cycle add Enable/Disable                               */
      __IOM uint32_t CH1EN      : 1;            /*!< [8..8] Timer 1 Enable/Disable                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t CH1INV     : 1;            /*!< [10..10] Timer 1 Inverter ON/OFF                                          */
      __IOM uint32_t CH1MOD     : 1;            /*!< [11..11] Timer 1 Auto-load/One-Shot Mode                                  */
      __IM  uint32_t            : 3;
      __IOM uint32_t CH1_HDU    : 1;            /*!< [15..15] Timer1 Half cycle add Enable/Disable                             */
      __IOM uint32_t CH2EN      : 1;            /*!< [16..16] Timer 2 Enable/Disable                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t CH2INV     : 1;            /*!< [18..18] Timer 2 Inverter ON/OFF                                          */
      __IOM uint32_t CH2MOD     : 1;            /*!< [19..19] Timer 2 Auto-load/One-Shot Mode                                  */
      __IM  uint32_t            : 3;
      __IOM uint32_t CH2_HDU    : 1;            /*!< [23..23] Timer2 Half cycle add Enable/Disable                             */
      __IOM uint32_t CH3EN      : 1;            /*!< [24..24] Timer 3 Enable/Disable                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t CH3INV     : 1;            /*!< [26..26] Timer 3 Inverter ON/OFF                                          */
      __IOM uint32_t CH3MOD     : 1;            /*!< [27..27] Timer 3 Auto-load/One-Shot Mode                                  */
      __IM  uint32_t            : 3;
      __IOM uint32_t CH3_HDU    : 1;            /*!< [31..31] Timer3 Half cycle add Enable/Disable                             */
    } PCR_b;
  } ;

  union {
    __IOM uint32_t PCNR0;                       /*!< (@ 0x0000000C) PWM Counter Register0                                      */

    struct {
      __IOM uint32_t CNR        : 16;           /*!< [15..0] PWM Counter/Timer Loaded Value                                    */
    } PCNR0_b;
  } ;

  union {
    __IOM uint32_t PCMR0;                       /*!< (@ 0x00000010) PWM Comparator Register0                                   */

    struct {
      __IOM uint32_t CMR        : 16;           /*!< [15..0] PWM Comparator Register                                           */
    } PCMR0_b;
  } ;

  union {
    __IOM uint32_t PTR0;                        /*!< (@ 0x00000014) PWM Timer Register0                                        */

    struct {
      __IOM uint32_t CTR        : 16;           /*!< [15..0] PWM Timer value                                                   */
    } PTR0_b;
  } ;

  union {
    __IOM uint32_t PCNR1;                       /*!< (@ 0x00000018) PWM Timer Register0                                        */

    struct {
      __IOM uint32_t CNR        : 16;           /*!< [15..0] PWM Counter/Timer Loaded Value                                    */
    } PCNR1_b;
  } ;

  union {
    __IOM uint32_t PCMR1;                       /*!< (@ 0x0000001C) PWM Comparator Register1                                   */

    struct {
      __IOM uint32_t CMR        : 16;           /*!< [15..0] PWM Comparator Register                                           */
    } PCMR1_b;
  } ;

  union {
    __IOM uint32_t PTR1;                        /*!< (@ 0x00000020) PWM Timer Register1                                        */

    struct {
      __IOM uint32_t CTR        : 16;           /*!< [15..0] PWM Timer value                                                   */
    } PTR1_b;
  } ;

  union {
    __IOM uint32_t PCNR2;                       /*!< (@ 0x00000024) PWM Counter Register2                                      */

    struct {
      __IOM uint32_t CNR        : 16;           /*!< [15..0] PWM Counter/Timer Loaded Value                                    */
    } PCNR2_b;
  } ;

  union {
    __IOM uint32_t PCMR2;                       /*!< (@ 0x00000028) PWM Comparator Register2                                   */

    struct {
      __IOM uint32_t CMR        : 16;           /*!< [15..0] PWM Comparator Register                                           */
    } PCMR2_b;
  } ;

  union {
    __IOM uint32_t PTR2;                        /*!< (@ 0x0000002C) PWM Timer Register2                                        */

    struct {
      __IOM uint32_t CTR        : 16;           /*!< [15..0] PWM Timer value                                                   */
    } PTR2_b;
  } ;

  union {
    __IOM uint32_t PCNR3;                       /*!< (@ 0x00000030) PWM Counter Register3                                      */

    struct {
      __IOM uint32_t CNR        : 16;           /*!< [15..0] PWM Counter/Timer Loaded Value                                    */
    } PCNR3_b;
  } ;

  union {
    __IOM uint32_t PCMR3;                       /*!< (@ 0x00000034) PWM Comparator Register3                                   */

    struct {
      __IOM uint32_t CMR        : 16;           /*!< [15..0] PWM Comparator Register                                           */
    } PCMR3_b;
  } ;

  union {
    __IOM uint32_t PTR3;                        /*!< (@ 0x00000038) PWM Timer Register3                                        */

    struct {
      __IOM uint32_t CTR        : 16;           /*!< [15..0] PWM Timer value                                                   */
    } PTR3_b;
  } ;

  union {
    __IOM uint32_t PIER;                        /*!< (@ 0x0000003C) PWM Interrupt Enable Register                              */

    struct {
      __IOM uint32_t PIER       : 4;            /*!< [3..0] PWM Timer Interrupt Enable                                         */
    } PIER_b;
  } ;

  union {
    __IOM uint32_t PIFR;                        /*!< (@ 0x00000040) PWM Interrupt FlagRegister                                 */

    struct {
      __IOM uint32_t PIFR       : 4;            /*!< [3..0] PWM Timer Interrupt Flag                                           */
    } PIFR_b;
  } ;

  union {
    __IOM uint16_t PCCR[4];                     /*!< (@ 0x00000044) PWM Capture Control Register                               */

    struct {
      __IOM uint16_t INV        : 1;            /*!< [0..0] Channel x Inverter ON/OFF                                          */
      __IOM uint16_t RL_IE      : 1;            /*!< [1..1] Channel x Falling Interrupt Enable ON/OFF                          */
      __IOM uint16_t FL_IE0     : 1;            /*!< [2..2] Channel x Falling Interrupt Enable ON/OFF                          */
      __IOM uint16_t CAPCHEN    : 1;            /*!< [3..3] Capture Channel x Enable/Disable                                   */
      __IOM uint16_t CAPIF      : 1;            /*!< [4..4] Capture Channel x interrupt flag                                   */
      __IM  uint16_t            : 1;
      __IOM uint16_t CRLRD      : 1;            /*!< [6..6] Capture Rising Latch Register load flag                            */
      __IOM uint16_t CFLRD      : 1;            /*!< [7..7] Capture Falling Latch Register load flag                           */
    } PCCR_b[4];
  } ;

  union {
    __IOM uint32_t PCRLR0;                      /*!< (@ 0x0000004C) PWM Capture Rising Latch Register                          */

    struct {
      __IOM uint32_t CRLR       : 16;           /*!< [15..0] Capture Rising Latch Registerx                                    */
    } PCRLR0_b;
  } ;

  union {
    __IOM uint32_t PCFLR0;                      /*!< (@ 0x00000050) PWM Capture Falling Latch Register                         */

    struct {
      __IOM uint32_t CFLR       : 16;           /*!< [15..0] Capture Falling Latch Registerx                                   */
    } PCFLR0_b;
  } ;

  union {
    __IOM uint32_t PCRLR1;                      /*!< (@ 0x00000054) PWM Capture Rising Latch Register                          */

    struct {
      __IOM uint32_t CRLR       : 16;           /*!< [15..0] Capture Rising Latch Registerx                                    */
    } PCRLR1_b;
  } ;

  union {
    __IOM uint32_t PCFLR1;                      /*!< (@ 0x00000058) PWM Capture Falling Latch Register                         */

    struct {
      __IOM uint32_t CFLR       : 16;           /*!< [15..0] Capture Falling Latch Registerx                                   */
    } PCFLR1_b;
  } ;

  union {
    __IOM uint32_t PCRLR2;                      /*!< (@ 0x0000005C) PWM Capture Rising Latch Register                          */

    struct {
      __IOM uint32_t CRLR       : 16;           /*!< [15..0] Capture Rising Latch Registerx                                    */
    } PCRLR2_b;
  } ;

  union {
    __IOM uint32_t PCFLR2;                      /*!< (@ 0x00000060) PWM Capture Falling Latch Register                         */

    struct {
      __IOM uint32_t CFLR       : 16;           /*!< [15..0] Capture Falling Latch Registerx                                   */
    } PCFLR2_b;
  } ;

  union {
    __IOM uint32_t PCRLR3;                      /*!< (@ 0x00000064) PWM Capture Rising Latch Register                          */

    struct {
      __IOM uint32_t CRLR       : 16;           /*!< [15..0] Capture Rising Latch Registerx                                    */
    } PCRLR3_b;
  } ;

  union {
    __IOM uint32_t PCFLR3;                      /*!< (@ 0x00000068) PWM Capture Falling Latch Register                         */

    struct {
      __IOM uint32_t CFLR       : 16;           /*!< [15..0] Capture Falling Latch Registerx                                   */
    } PCFLR3_b;
  } ;

  union {
    __IOM uint32_t PPCR;                        /*!< (@ 0x0000006C) PWM Port Control Register                                  */

    struct {
      __IOM uint32_t PDR        : 4;            /*!< [3..0] Port Data Register                                                 */
      __IM  uint32_t            : 4;
      __IOM uint32_t PULLUP_EN  : 4;            /*!< [11..8] Port Pull up Enable                                               */
      __IM  uint32_t            : 4;
      __IOM uint32_t PDDR       : 4;            /*!< [19..16] Port Data Direction Register                                     */
    } PPCR_b;
  } ;
} PWM_Type;                                     /*!< Size = 112 (0x70)                                                         */



/* =========================================================================================================================== */
/* ================                                          EPORT0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Edge Port Module (EPORT0)
  */

typedef struct {                                /*!< (@ 0x40140000) EPORT0 Structure                                           */
  __IOM uint8_t   EPIER;                        /*!< (@ 0x00000000) EPORT Port Interrupt Enable Register                       */
  __IOM uint8_t   EPDDR;                        /*!< (@ 0x00000001) EPORT Data Direction Register                              */

  union {
    __IOM uint16_t EPPAR;                       /*!< (@ 0x00000002) EPORT Pin Assignment Register                              */

    struct {
      __IOM uint16_t EPPA0      : 2;            /*!< [1..0] EPORT Pin Assignment Select Fields                                 */
      __IOM uint16_t EPPA1      : 2;            /*!< [3..2] EPORT Pin Assignment Select Fields                                 */
      __IOM uint16_t EPPA2      : 2;            /*!< [5..4] EPORT Pin Assignment Select Fields                                 */
      __IOM uint16_t EPPA3      : 2;            /*!< [7..6] EPORT Pin Assignment Select Fields                                 */
      __IOM uint16_t EPPA4      : 2;            /*!< [9..8] EPORT Pin Assignment Select Fields                                 */
      __IOM uint16_t EPPA5      : 2;            /*!< [11..10] EPORT Pin Assignment Select Fields                               */
      __IOM uint16_t EPPA6      : 2;            /*!< [13..12] EPORT Pin Assignment Select Fields                               */
      __IOM uint16_t EPPA7      : 2;            /*!< [15..14] EPORT Pin Assignment Select Fields                               */
    } EPPAR_b;
  } ;
  __IOM uint8_t   EPLPR;                        /*!< (@ 0x00000004) EPORT Level Polarity Register                              */
  __IOM uint8_t   EPFR;                         /*!< (@ 0x00000005) EPORT Flag Register                                        */
  __IOM uint8_t   EPPDR;                        /*!< (@ 0x00000006) EPORT Pin Data Register                                    */
  __IOM uint8_t   EPDR;                         /*!< (@ 0x00000007) EPORT Data Register                                        */
  __IM  uint8_t   RESERVED;
  __IOM uint8_t   EPBTR;                        /*!< (@ 0x00000009) EPORT Bit Toggle Register                                  */
  __IOM uint8_t   EPBCR;                        /*!< (@ 0x0000000A) EPORT Bit Clear Register                                   */
  __IOM uint8_t   EPBSR;                        /*!< (@ 0x0000000B) EPORT Bit Set Register                                     */
  __IM  uint16_t  RESERVED1;
  __IM  uint8_t   RESERVED2;
  __IOM uint8_t   EPLFR;                        /*!< (@ 0x0000000F) EPORT inter                                                */
} EPORT_Type;                                   /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                           PORTS                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Port Configuration (PORTS)
  */

typedef struct {                                /*!< (@ 0x40040000) PORTS Structure                                            */

  union {
    __IOM uint32_t PORT_CR[80];                 /*!< (@ 0x00000000) PORT Configure Register                                    */

    struct {
      __IOM uint32_t SRE        : 1;            /*!< [0..0] Slow rate                                                          */
      __IOM uint32_t DSE        : 1;            /*!< [1..1] Driver strength                                                    */
      __IOM uint32_t PS         : 1;            /*!< [2..2] Pull Select                                                        */
      __IOM uint32_t PE         : 1;            /*!< [3..3] Pull Enable                                                        */
      __IOM uint32_t ODE        : 1;            /*!< [4..4] Open drain enable                                                  */
      __IOM uint32_t MUX        : 2;            /*!< [6..5] Alternal funtion                                                   */
    } PORT_CR_b[80];
  } ;
} PORTS_Type;                                   /*!< Size = 320 (0x140)                                                        */



/* =========================================================================================================================== */
/* ================                                           DMAC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief AMBA AHB module (DMAC)
  */

typedef struct {                                /*!< (@ 0x40300000) DMAC Structure                                             */

  union {
    __IOM uint32_t IntStatus;                   /*!< (@ 0x00000000) Interrupt Status Register                                  */

    struct {
      __IOM uint32_t Intstatus  : 8;            /*!< [7..0] Status of the DMA interrupts after masking                         */
    } IntStatus_b;
  } ;

  union {
    __IOM uint32_t IntTCStatus;                 /*!< (@ 0x00000004) Interrupt Terminal Count Status Register                   */

    struct {
      __IOM uint32_t IntTCStatus : 8;           /*!< [7..0] Interrupt terminal count request status                            */
    } IntTCStatus_b;
  } ;

  union {
    __IOM uint32_t IntTCClear;                  /*!< (@ 0x00000008) Interrupt Terminal Count Clear Register                    */

    struct {
      __IOM uint32_t IntTCClear : 8;            /*!< [7..0] Terminal count request clear                                       */
    } IntTCClear_b;
  } ;

  union {
    __IOM uint32_t IntErrorStatus;              /*!< (@ 0x0000000C) Interrupt Error Status Register                            */

    struct {
      __IOM uint32_t IntErrorStatus : 8;        /*!< [7..0] Interrupt error status                                             */
    } IntErrorStatus_b;
  } ;

  union {
    __IOM uint32_t IntErrClr;                   /*!< (@ 0x00000010) Interrupt Error Clear Register                             */

    struct {
      __IOM uint32_t IntErrClr  : 8;            /*!< [7..0] Interrupt error clear                                              */
    } IntErrClr_b;
  } ;

  union {
    __IOM uint32_t RawIntTCStatus;              /*!< (@ 0x00000014) Raw Interrupt Terminal Count Status Register               */

    struct {
      __IOM uint32_t RawIntTCStatus : 8;        /*!< [7..0] Status of the terminal count interrupt prior to masking            */
    } RawIntTCStatus_b;
  } ;

  union {
    __IOM uint32_t RawIntErrorStatus;           /*!< (@ 0x00000018) Raw Error Interrupt Status Register                        */

    struct {
      __IOM uint32_t RawIntErrorStatus : 8;     /*!< [7..0] Status of the error interrupt prior to masking                     */
    } RawIntErrorStatus_b;
  } ;

  union {
    __IOM uint32_t EnbldChns;                   /*!< (@ 0x0000001C) Enabled Channel Register                                   */

    struct {
      __IOM uint32_t EnabledChannels : 8;       /*!< [7..0] Channel enable status                                              */
    } EnbldChns_b;
  } ;

  union {
    __IOM uint32_t SoftBReq;                    /*!< (@ 0x00000020) ADC channel selectSoftware Burst Request Registerion
                                                                    Register                                                   */

    struct {
      __IOM uint32_t SoftBReq   : 16;           /*!< [15..0] Software burst request                                            */
    } SoftBReq_b;
  } ;

  union {
    __IOM uint32_t SoftSReq;                    /*!< (@ 0x00000024) Software Single Request Register                           */

    struct {
      __IOM uint32_t SoftSReq   : 16;           /*!< [15..0] Software single request                                           */
    } SoftSReq_b;
  } ;

  union {
    __IOM uint32_t SoftLBReq;                   /*!< (@ 0x00000028) Software Last Burst Request Register                       */

    struct {
      __IOM uint32_t SoftLBReq  : 16;           /*!< [15..0] Software last burst request                                       */
    } SoftLBReq_b;
  } ;

  union {
    __IOM uint32_t SoftLSReq;                   /*!< (@ 0x0000002C) Software Last Single Request Register                      */

    struct {
      __IOM uint32_t SoftLSReq  : 16;           /*!< [15..0] Software last single request                                      */
    } SoftLSReq_b;
  } ;

  union {
    __IOM uint32_t Configuration;               /*!< (@ 0x00000030) Configuration Register,                                    */

    struct {
      __IOM uint32_t E          : 1;            /*!< [0..0] PrimeCell enable                                                   */
      __IOM uint32_t M1         : 1;            /*!< [1..1] AHB Master 1 endianness configuration                              */
      __IOM uint32_t M2         : 1;            /*!< [2..2] AHB Master 2 endianness configuration                              */
    } Configuration_b;
  } ;

  union {
    __IOM uint32_t Sync;                        /*!< (@ 0x00000034) Synchronization Register,                                  */

    struct {
      __IOM uint32_t Sync       : 16;           /*!< [15..0] DMA synchronization logic for DMA request signals enabled
                                                     or disabled                                                               */
    } Sync_b;
  } ;
  __IM  uint32_t  RESERVED[50];

  union {
    __IOM uint32_t C0SrcAddr;                   /*!< (@ 0x00000100) Channel Source Address Registers,                          */

    struct {
      __IOM uint32_t SrcAddr    : 32;           /*!< [31..0] DMA source address                                                */
    } C0SrcAddr_b;
  } ;

  union {
    __IOM uint32_t C0DestAddr;                  /*!< (@ 0x00000104) Channel Destination Address Registers,                     */

    struct {
      __IOM uint32_t DestAddr   : 32;           /*!< [31..0] DMA destination address                                           */
    } C0DestAddr_b;
  } ;

  union {
    __IOM uint32_t C0LLI;                       /*!< (@ 0x00000108) Channel Linked List Item Registers                         */

    struct {
      __IOM uint32_t LM         : 1;            /*!< [0..0] AHB master select for loading the next LLI                         */
      __IOM uint32_t R          : 1;            /*!< [1..1] Reserved, and must be written as 0, masked on read                 */
      __IOM uint32_t LLI        : 30;           /*!< [31..2] Linked list item                                                  */
    } C0LLI_b;
  } ;

  union {
    __IOM uint32_t C0Control;                   /*!< (@ 0x0000010C) Channel Control Registers                                  */

    struct {
      __IOM uint32_t TransferSize : 12;         /*!< [11..0] Transfer size                                                     */
      __IOM uint32_t SBSize     : 3;            /*!< [14..12] Source burst size                                                */
      __IOM uint32_t DBSize     : 3;            /*!< [17..15] Destination burst size                                           */
      __IOM uint32_t SWidth     : 3;            /*!< [20..18] Source transfer width                                            */
      __IOM uint32_t DWidth     : 3;            /*!< [23..21] Destination transfer width                                       */
      __IOM uint32_t S          : 1;            /*!< [24..24] Source AHB master select                                         */
      __IOM uint32_t D          : 1;            /*!< [25..25] Destination AHB master select                                    */
      __IOM uint32_t SI         : 1;            /*!< [26..26] Source increment                                                 */
      __IOM uint32_t DI         : 1;            /*!< [27..27] Destination increment                                            */
      __IOM uint32_t Prot       : 3;            /*!< [30..28] Protection                                                       */
      __IOM uint32_t I          : 1;            /*!< [31..31] Terminal count interrupt enable bit                              */
    } C0Control_b;
  } ;

  union {
    __IOM uint32_t C0Configuration;             /*!< (@ 0x00000110) Channel Configuration Registers                            */

    struct {
      __IOM uint32_t E          : 1;            /*!< [0..0] Channel enable                                                     */
      __IOM uint32_t SrcPeripheral : 4;         /*!< [4..1] Source peripheral                                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t DestPeripheral : 4;        /*!< [9..6] Destination peripheral                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t FlowCntrl  : 3;            /*!< [13..11] Flow control and transfer type                                   */
      __IOM uint32_t IE         : 1;            /*!< [14..14] Interrupt error mask                                             */
      __IOM uint32_t ITC        : 1;            /*!< [15..15] Terminal count interrupt mask                                    */
      __IOM uint32_t L          : 1;            /*!< [16..16] Lock                                                             */
      __IOM uint32_t A          : 1;            /*!< [17..17] Active                                                           */
      __IOM uint32_t H          : 1;            /*!< [18..18] Halt                                                             */
    } C0Configuration_b;
  } ;
  __IM  uint32_t  RESERVED1[3];

  union {
    __IOM uint32_t C1SrcAddr;                   /*!< (@ 0x00000120) Channel Source Address Registers,                          */

    struct {
      __IOM uint32_t SrcAddr    : 32;           /*!< [31..0] DMA source address                                                */
    } C1SrcAddr_b;
  } ;

  union {
    __IOM uint32_t C1DestAddr;                  /*!< (@ 0x00000124) Channel Destination Address Registers                      */

    struct {
      __IOM uint32_t DestAddr   : 32;           /*!< [31..0] DMA destination address                                           */
    } C1DestAddr_b;
  } ;

  union {
    __IOM uint32_t C1LLI;                       /*!< (@ 0x00000128) Channel Linked List Item Registers                         */

    struct {
      __IOM uint32_t LM         : 1;            /*!< [0..0] AHB master select for loading the next LLI                         */
      __IOM uint32_t R          : 1;            /*!< [1..1] and must be written as 0, masked on read                           */
      __IOM uint32_t LLI        : 30;           /*!< [31..2] Linked list item                                                  */
    } C1LLI_b;
  } ;

  union {
    __IOM uint32_t C1Control;                   /*!< (@ 0x0000012C) Channel Control Registers                                  */

    struct {
      __IOM uint32_t TransferSize : 12;         /*!< [11..0] Transfer size                                                     */
      __IOM uint32_t SBSize     : 3;            /*!< [14..12] Source burst size                                                */
      __IOM uint32_t DBSize     : 3;            /*!< [17..15] Destination burst size                                           */
      __IOM uint32_t SWidth     : 3;            /*!< [20..18] Source transfer width                                            */
      __IOM uint32_t DWidth     : 3;            /*!< [23..21] Destination transfer width                                       */
      __IOM uint32_t S          : 1;            /*!< [24..24] Source AHB master select                                         */
      __IOM uint32_t D          : 1;            /*!< [25..25] Destination AHB master select                                    */
      __IOM uint32_t SI         : 1;            /*!< [26..26] Source increment                                                 */
      __IOM uint32_t DI         : 1;            /*!< [27..27] Destination increment                                            */
      __IOM uint32_t Prot       : 3;            /*!< [30..28] Protection                                                       */
      __IOM uint32_t I          : 1;            /*!< [31..31] Terminal count interrupt enable bit                              */
    } C1Control_b;
  } ;

  union {
    __IOM uint32_t C1Configuration;             /*!< (@ 0x00000130) Channel Configuration Registers                            */

    struct {
      __IOM uint32_t E          : 1;            /*!< [0..0] Channel enable                                                     */
      __IOM uint32_t SrcPeripheral : 4;         /*!< [4..1] Source peripheral                                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t DestPeripheral : 4;        /*!< [9..6] Destination peripheral                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t FlowCntrl  : 3;            /*!< [13..11] Flow control and transfer type                                   */
      __IOM uint32_t IE         : 1;            /*!< [14..14] Interrupt error mask                                             */
      __IOM uint32_t ITC        : 1;            /*!< [15..15] Terminal count interrupt mask                                    */
      __IOM uint32_t L          : 1;            /*!< [16..16] Lock                                                             */
      __IOM uint32_t A          : 1;            /*!< [17..17] Active                                                           */
      __IOM uint32_t H          : 1;            /*!< [18..18] Halt                                                             */
    } C1Configuration_b;
  } ;
  __IM  uint32_t  RESERVED2[3];

  union {
    __IOM uint32_t C2SrcAddr;                   /*!< (@ 0x00000140) Channel Source Address Registers,                          */

    struct {
      __IOM uint32_t SrcAddr    : 32;           /*!< [31..0] DMA source address                                                */
    } C2SrcAddr_b;
  } ;

  union {
    __IOM uint32_t C2DestAddr;                  /*!< (@ 0x00000144) Channel Destination Address Registers                      */

    struct {
      __IOM uint32_t DestAddr   : 32;           /*!< [31..0] DMA destination address                                           */
    } C2DestAddr_b;
  } ;

  union {
    __IOM uint32_t C2LLI;                       /*!< (@ 0x00000148) Channel Linked List Item Registers                         */

    struct {
      __IOM uint32_t LM         : 1;            /*!< [0..0] AHB master select for loading the next LLI                         */
      __IOM uint32_t R          : 1;            /*!< [1..1] Reserved, and must be written as 0, masked on read                 */
      __IOM uint32_t LLI        : 30;           /*!< [31..2] Linked list item                                                  */
    } C2LLI_b;
  } ;

  union {
    __IOM uint32_t C2Control;                   /*!< (@ 0x0000014C) Channel Control Registers                                  */

    struct {
      __IOM uint32_t TransferSize : 12;         /*!< [11..0] Transfer size                                                     */
      __IOM uint32_t SBSize     : 3;            /*!< [14..12] Source burst size                                                */
      __IOM uint32_t DBSize     : 3;            /*!< [17..15] Destination burst size                                           */
      __IOM uint32_t SWidth     : 3;            /*!< [20..18] Source transfer width                                            */
      __IOM uint32_t DWidth     : 3;            /*!< [23..21] Destination transfer width                                       */
      __IOM uint32_t S          : 1;            /*!< [24..24] Source AHB master select                                         */
      __IOM uint32_t D          : 1;            /*!< [25..25] Destination AHB master select                                    */
      __IOM uint32_t SI         : 1;            /*!< [26..26] Source increment                                                 */
      __IOM uint32_t DI         : 1;            /*!< [27..27] Destination increment                                            */
      __IOM uint32_t Prot       : 3;            /*!< [30..28] Protection                                                       */
      __IOM uint32_t I          : 1;            /*!< [31..31] Terminal count interrupt enable bit                              */
    } C2Control_b;
  } ;

  union {
    __IOM uint32_t C2Configuration;             /*!< (@ 0x00000150) Channel Configuration Registers                            */

    struct {
      __IOM uint32_t E          : 1;            /*!< [0..0] Channel enable                                                     */
      __IOM uint32_t SrcPeripheral : 4;         /*!< [4..1] Source peripheral                                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t DestPeripheral : 4;        /*!< [9..6] Destination peripheral                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t FlowCntrl  : 3;            /*!< [13..11] Flow control and transfer type                                   */
      __IOM uint32_t IE         : 1;            /*!< [14..14] Interrupt error mask                                             */
      __IOM uint32_t ITC        : 1;            /*!< [15..15] Terminal count interrupt mask                                    */
      __IOM uint32_t L          : 1;            /*!< [16..16] Lock                                                             */
      __IOM uint32_t A          : 1;            /*!< [17..17] Active                                                           */
      __IOM uint32_t H          : 1;            /*!< [18..18] Halt                                                             */
    } C2Configuration_b;
  } ;
  __IM  uint32_t  RESERVED3[3];

  union {
    __IOM uint32_t C3SrcAddr;                   /*!< (@ 0x00000160) Channel Source Address Registers,                          */

    struct {
      __IOM uint32_t SrcAddr    : 32;           /*!< [31..0] DMA source address                                                */
    } C3SrcAddr_b;
  } ;

  union {
    __IOM uint32_t C3DestAddr;                  /*!< (@ 0x00000164) Channel Destination Address Registers                      */

    struct {
      __IOM uint32_t DestAddr   : 32;           /*!< [31..0] DMA destination address                                           */
    } C3DestAddr_b;
  } ;

  union {
    __IOM uint32_t C3LLI;                       /*!< (@ 0x00000168) Channel Linked List Item Registers                         */

    struct {
      __IOM uint32_t LM         : 1;            /*!< [0..0] AHB master select for loading the next LLI                         */
      __IOM uint32_t R          : 1;            /*!< [1..1] Reserved, and must be written as 0, masked on read                 */
      __IOM uint32_t LLI        : 30;           /*!< [31..2] Linked list item                                                  */
    } C3LLI_b;
  } ;

  union {
    __IOM uint32_t C3Control;                   /*!< (@ 0x0000016C) Channel Control Registers                                  */

    struct {
      __IOM uint32_t TransferSize : 12;         /*!< [11..0] Transfer size                                                     */
      __IOM uint32_t SBSize     : 3;            /*!< [14..12] Source burst size                                                */
      __IOM uint32_t DBSize     : 3;            /*!< [17..15] Destination burst size                                           */
      __IOM uint32_t SWidth     : 3;            /*!< [20..18] Source transfer width                                            */
      __IOM uint32_t DWidth     : 3;            /*!< [23..21] Destination transfer width                                       */
      __IOM uint32_t S          : 1;            /*!< [24..24] Source AHB master select                                         */
      __IOM uint32_t D          : 1;            /*!< [25..25] Destination AHB master select                                    */
      __IOM uint32_t SI         : 1;            /*!< [26..26] Source increment                                                 */
      __IOM uint32_t DI         : 1;            /*!< [27..27] Destination increment                                            */
      __IOM uint32_t Prot       : 3;            /*!< [30..28] Protection                                                       */
      __IOM uint32_t I          : 1;            /*!< [31..31] Terminal count interrupt enable bit                              */
    } C3Control_b;
  } ;

  union {
    __IOM uint32_t C3Configuration;             /*!< (@ 0x00000170) Channel Configuration Registers                            */

    struct {
      __IOM uint32_t E          : 1;            /*!< [0..0] Channel enable                                                     */
      __IOM uint32_t SrcPeripheral : 4;         /*!< [4..1] Source peripheral                                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t DestPeripheral : 4;        /*!< [9..6] Destination peripheral                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t FlowCntrl  : 3;            /*!< [13..11] Flow control and transfer type                                   */
      __IOM uint32_t IE         : 1;            /*!< [14..14] Interrupt error mask                                             */
      __IOM uint32_t ITC        : 1;            /*!< [15..15] Terminal count interrupt mask                                    */
      __IOM uint32_t L          : 1;            /*!< [16..16] Lock                                                             */
      __IOM uint32_t A          : 1;            /*!< [17..17] Active                                                           */
      __IOM uint32_t H          : 1;            /*!< [18..18] Halt                                                             */
    } C3Configuration_b;
  } ;
  __IM  uint32_t  RESERVED4[3];

  union {
    __IOM uint32_t C4SrcAddr;                   /*!< (@ 0x00000180) Channel Source Address Registers,                          */

    struct {
      __IOM uint32_t SrcAddr    : 32;           /*!< [31..0] DMA source address                                                */
    } C4SrcAddr_b;
  } ;

  union {
    __IOM uint32_t C4DestAddr;                  /*!< (@ 0x00000184) Channel Destination Address Registers                      */

    struct {
      __IOM uint32_t DestAddr   : 32;           /*!< [31..0] DMA destination address                                           */
    } C4DestAddr_b;
  } ;

  union {
    __IOM uint32_t C4LLI;                       /*!< (@ 0x00000188) Channel Linked List Item Registers                         */

    struct {
      __IOM uint32_t LM         : 1;            /*!< [0..0] AHB master select for loading the next LLI                         */
      __IOM uint32_t R          : 1;            /*!< [1..1] Reserved, and must be written as 0, masked on read                 */
      __IOM uint32_t LLI        : 30;           /*!< [31..2] Linked list item                                                  */
    } C4LLI_b;
  } ;

  union {
    __IOM uint32_t C4Control;                   /*!< (@ 0x0000018C) Channel Control Registers                                  */

    struct {
      __IOM uint32_t TransferSize : 12;         /*!< [11..0] Transfer size                                                     */
      __IOM uint32_t SBSize     : 3;            /*!< [14..12] Source burst size                                                */
      __IOM uint32_t DBSize     : 3;            /*!< [17..15] Destination burst size                                           */
      __IOM uint32_t SWidth     : 3;            /*!< [20..18] Source transfer width                                            */
      __IOM uint32_t DWidth     : 3;            /*!< [23..21] Destination transfer width                                       */
      __IOM uint32_t S          : 1;            /*!< [24..24] Source AHB master select                                         */
      __IOM uint32_t D          : 1;            /*!< [25..25] Destination AHB master select                                    */
      __IOM uint32_t SI         : 1;            /*!< [26..26] Source increment                                                 */
      __IOM uint32_t DI         : 1;            /*!< [27..27] Destination increment                                            */
      __IOM uint32_t Prot       : 3;            /*!< [30..28] Protection                                                       */
      __IOM uint32_t I          : 1;            /*!< [31..31] Terminal count interrupt enable bit                              */
    } C4Control_b;
  } ;

  union {
    __IOM uint32_t C4Configuration;             /*!< (@ 0x00000190) Channel Configuration Registers                            */

    struct {
      __IOM uint32_t E          : 1;            /*!< [0..0] Channel enable                                                     */
      __IOM uint32_t SrcPeripheral : 4;         /*!< [4..1] Source peripheral                                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t DestPeripheral : 4;        /*!< [9..6] Destination peripheral                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t FlowCntrl  : 3;            /*!< [13..11] Flow control and transfer type                                   */
      __IOM uint32_t IE         : 1;            /*!< [14..14] Interrupt error mask                                             */
      __IOM uint32_t ITC        : 1;            /*!< [15..15] Terminal count interrupt mask                                    */
      __IOM uint32_t L          : 1;            /*!< [16..16] Lock                                                             */
      __IOM uint32_t A          : 1;            /*!< [17..17] Active                                                           */
      __IOM uint32_t H          : 1;            /*!< [18..18] Halt                                                             */
    } C4Configuration_b;
  } ;
  __IM  uint32_t  RESERVED5[3];

  union {
    __IOM uint32_t C5SrcAddr;                   /*!< (@ 0x000001A0) Channel Source Address Registers,                          */

    struct {
      __IOM uint32_t SrcAddr    : 32;           /*!< [31..0] DMA source address                                                */
    } C5SrcAddr_b;
  } ;

  union {
    __IOM uint32_t C5DestAddr;                  /*!< (@ 0x000001A4) Channel Destination Address Registers                      */

    struct {
      __IOM uint32_t DestAddr   : 32;           /*!< [31..0] DMA destination address                                           */
    } C5DestAddr_b;
  } ;

  union {
    __IOM uint32_t C5LLI;                       /*!< (@ 0x000001A8) Channel Linked List Item Registers                         */

    struct {
      __IOM uint32_t LM         : 1;            /*!< [0..0] AHB master select for loading the next LLI                         */
      __IOM uint32_t R          : 1;            /*!< [1..1] Reserved, and must be written as 0, masked on read                 */
      __IOM uint32_t LLI        : 30;           /*!< [31..2] Linked list item                                                  */
    } C5LLI_b;
  } ;

  union {
    __IOM uint32_t C5Control;                   /*!< (@ 0x000001AC) Channel Control Registers                                  */

    struct {
      __IOM uint32_t TransferSize : 12;         /*!< [11..0] Transfer size                                                     */
      __IOM uint32_t SBSize     : 3;            /*!< [14..12] Source burst size                                                */
      __IOM uint32_t DBSize     : 3;            /*!< [17..15] Destination burst size                                           */
      __IOM uint32_t SWidth     : 3;            /*!< [20..18] Source transfer width                                            */
      __IOM uint32_t DWidth     : 3;            /*!< [23..21] Destination transfer width                                       */
      __IOM uint32_t S          : 1;            /*!< [24..24] Source AHB master select                                         */
      __IOM uint32_t D          : 1;            /*!< [25..25] Destination AHB master select                                    */
      __IOM uint32_t SI         : 1;            /*!< [26..26] Source increment                                                 */
      __IOM uint32_t DI         : 1;            /*!< [27..27] Destination increment                                            */
      __IOM uint32_t Prot       : 3;            /*!< [30..28] Protection                                                       */
      __IOM uint32_t I          : 1;            /*!< [31..31] Terminal count interrupt enable bit                              */
    } C5Control_b;
  } ;

  union {
    __IOM uint32_t C5Configuration;             /*!< (@ 0x000001B0) Channel Configuration Registers                            */

    struct {
      __IOM uint32_t E          : 1;            /*!< [0..0] Channel enable                                                     */
      __IOM uint32_t SrcPeripheral : 4;         /*!< [4..1] Source peripheral                                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t DestPeripheral : 4;        /*!< [9..6] Destination peripheral                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t FlowCntrl  : 3;            /*!< [13..11] Flow control and transfer type                                   */
      __IOM uint32_t IE         : 1;            /*!< [14..14] Interrupt error mask                                             */
      __IOM uint32_t ITC        : 1;            /*!< [15..15] Terminal count interrupt mask                                    */
      __IOM uint32_t L          : 1;            /*!< [16..16] Lock                                                             */
      __IOM uint32_t A          : 1;            /*!< [17..17] Active                                                           */
      __IOM uint32_t H          : 1;            /*!< [18..18] Halt                                                             */
    } C5Configuration_b;
  } ;
  __IM  uint32_t  RESERVED6[3];

  union {
    __IOM uint32_t C6SrcAddr;                   /*!< (@ 0x000001C0) Channel Source Address Registers,                          */

    struct {
      __IOM uint32_t SrcAddr    : 32;           /*!< [31..0] DMA source address                                                */
    } C6SrcAddr_b;
  } ;

  union {
    __IOM uint32_t C6DestAddr;                  /*!< (@ 0x000001C4) Channel Destination Address Registers                      */

    struct {
      __IOM uint32_t DestAddr   : 32;           /*!< [31..0] DMA destination address                                           */
    } C6DestAddr_b;
  } ;

  union {
    __IOM uint32_t C6LLI;                       /*!< (@ 0x000001C8) Channel Linked List Item Registers                         */

    struct {
      __IOM uint32_t LM         : 1;            /*!< [0..0] AHB master select for loading the next LLI                         */
      __IOM uint32_t R          : 1;            /*!< [1..1] Reserved, and must be written as 0, masked on read                 */
      __IOM uint32_t LLI        : 30;           /*!< [31..2] Linked list item                                                  */
    } C6LLI_b;
  } ;

  union {
    __IOM uint32_t C6Controll;                  /*!< (@ 0x000001CC) Channel Control Registers                                  */

    struct {
      __IOM uint32_t TransferSize : 12;         /*!< [11..0] Transfer size                                                     */
      __IOM uint32_t SBSize     : 3;            /*!< [14..12] Source burst size                                                */
      __IOM uint32_t DBSize     : 3;            /*!< [17..15] Destination burst size                                           */
      __IOM uint32_t SWidth     : 3;            /*!< [20..18] Source transfer width                                            */
      __IOM uint32_t DWidth     : 3;            /*!< [23..21] Destination transfer width                                       */
      __IOM uint32_t S          : 1;            /*!< [24..24] Source AHB master select                                         */
      __IOM uint32_t D          : 1;            /*!< [25..25] Destination AHB master select                                    */
      __IOM uint32_t SI         : 1;            /*!< [26..26] Source increment                                                 */
      __IOM uint32_t DI         : 1;            /*!< [27..27] Destination increment                                            */
      __IOM uint32_t Prot       : 3;            /*!< [30..28] Protection                                                       */
      __IOM uint32_t I          : 1;            /*!< [31..31] Terminal count interrupt enable bit                              */
    } C6Controll_b;
  } ;

  union {
    __IOM uint32_t C6Configuration;             /*!< (@ 0x000001D0) Channel Configuration Registers                            */

    struct {
      __IOM uint32_t E          : 1;            /*!< [0..0] Channel enable                                                     */
      __IOM uint32_t SrcPeripheral : 4;         /*!< [4..1] Source peripheral                                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t DestPeripheral : 4;        /*!< [9..6] Destination peripheral                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t FlowCntrl  : 3;            /*!< [13..11] Flow control and transfer type                                   */
      __IOM uint32_t IE         : 1;            /*!< [14..14] Interrupt error mask                                             */
      __IOM uint32_t ITC        : 1;            /*!< [15..15] Terminal count interrupt mask                                    */
      __IOM uint32_t L          : 1;            /*!< [16..16] Lock                                                             */
      __IOM uint32_t A          : 1;            /*!< [17..17] Active                                                           */
      __IOM uint32_t H          : 1;            /*!< [18..18] Halt                                                             */
    } C6Configuration_b;
  } ;
  __IM  uint32_t  RESERVED7[3];

  union {
    __IOM uint32_t C7SrcAddr;                   /*!< (@ 0x000001E0) Channel Source Address Registers,                          */

    struct {
      __IOM uint32_t SrcAddr    : 32;           /*!< [31..0] DMA source address                                                */
    } C7SrcAddr_b;
  } ;

  union {
    __IOM uint32_t C7DestAddr;                  /*!< (@ 0x000001E4) Channel Destination Address Registers                      */

    struct {
      __IOM uint32_t DestAddr   : 32;           /*!< [31..0] DMA destination address                                           */
    } C7DestAddr_b;
  } ;

  union {
    __IOM uint32_t C7LLI;                       /*!< (@ 0x000001E8) Channel Linked List Item Registers                         */

    struct {
      __IOM uint32_t LM         : 1;            /*!< [0..0] AHB master select for loading the next LLI                         */
      __IOM uint32_t R          : 1;            /*!< [1..1] Reserved, and must be written as 0, masked on read                 */
      __IOM uint32_t LLI        : 30;           /*!< [31..2] Linked list item                                                  */
    } C7LLI_b;
  } ;

  union {
    __IOM uint32_t C7Control;                   /*!< (@ 0x000001EC) Channel Control Registers                                  */

    struct {
      __IOM uint32_t TransferSize : 12;         /*!< [11..0] Transfer size                                                     */
      __IOM uint32_t SBSize     : 3;            /*!< [14..12] Source burst size                                                */
      __IOM uint32_t DBSize     : 3;            /*!< [17..15] Destination burst size                                           */
      __IOM uint32_t SWidth     : 3;            /*!< [20..18] Source transfer width                                            */
      __IOM uint32_t DWidth     : 3;            /*!< [23..21] Destination transfer width                                       */
      __IOM uint32_t S          : 1;            /*!< [24..24] Source AHB master select                                         */
      __IOM uint32_t D          : 1;            /*!< [25..25] Destination AHB master select                                    */
      __IOM uint32_t SI         : 1;            /*!< [26..26] Source increment                                                 */
      __IOM uint32_t DI         : 1;            /*!< [27..27] Destination increment                                            */
      __IOM uint32_t Prot       : 3;            /*!< [30..28] Protection                                                       */
      __IOM uint32_t I          : 1;            /*!< [31..31] Terminal count interrupt enable bit                              */
    } C7Control_b;
  } ;

  union {
    __IOM uint32_t C7Configuration;             /*!< (@ 0x000001F0) Channel Configuration Registers                            */

    struct {
      __IOM uint32_t E          : 1;            /*!< [0..0] Channel enable                                                     */
      __IOM uint32_t SrcPeripheral : 4;         /*!< [4..1] Source peripheral                                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t DestPeripheral : 4;        /*!< [9..6] Destination peripheral                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t FlowCntrl  : 3;            /*!< [13..11] Flow control and transfer type                                   */
      __IOM uint32_t IE         : 1;            /*!< [14..14] Interrupt error mask                                             */
      __IOM uint32_t ITC        : 1;            /*!< [15..15] Terminal count interrupt mask                                    */
      __IOM uint32_t L          : 1;            /*!< [16..16] Lock                                                             */
      __IOM uint32_t A          : 1;            /*!< [17..17] Active                                                           */
      __IOM uint32_t H          : 1;            /*!< [18..18] Halt                                                             */
    } C7Configuration_b;
  } ;
  __IM  uint32_t  RESERVED8[195];
  __IOM uint32_t  ITCR;                         /*!< (@ 0x00000500) Test Control Register                                      */
  __IOM uint32_t  ITOP1;                        /*!< (@ 0x00000504) Integration Test Output Register 1                         */
  __IOM uint32_t  ITOP2;                        /*!< (@ 0x00000508) Integration Test Output Register 2                         */

  union {
    __IOM uint32_t ITOP3;                       /*!< (@ 0x0000050C) Integration Test Output Register 3                         */

    struct {
      __IOM uint32_t E          : 1;            /*!< [0..0] Interrupt request can be set to a certain value in test
                                                     mode by writing to the register                                           */
      __IOM uint32_t TC         : 1;            /*!< [1..1] Interrupt request can be set to a certain value in test
                                                     mode by writing to the register                                           */
    } ITOP3_b;
  } ;
  __IM  uint32_t  RESERVED9[692];

  union {
    __IOM uint32_t PeriphID0;                   /*!< (@ 0x00000FE0) Peripheral Identification Registers 0                      */

    struct {
      __IOM uint32_t PartNumber0 : 8;           /*!< [7..0] These bits read back as 0x80                                       */
    } PeriphID0_b;
  } ;

  union {
    __IOM uint32_t PeriphID1;                   /*!< (@ 0x00000FE4) Peripheral Identification Registers 1                      */

    struct {
      __IOM uint32_t PartNumber1 : 4;           /*!< [3..0] These bits read back as 0x0                                        */
      __IOM uint32_t Designer0  : 4;            /*!< [7..4] These bits read back as 0x1                                        */
    } PeriphID1_b;
  } ;

  union {
    __IOM uint32_t PeriphID2;                   /*!< (@ 0x00000FE8) Peripheral Identification Registers 2                      */

    struct {
      __IOM uint32_t Designer1  : 4;            /*!< [3..0] These bits read back as 0x4                                        */
      __IOM uint32_t Revision   : 4;            /*!< [7..4] These bits read back as 0x0                                        */
    } PeriphID2_b;
  } ;

  union {
    __IOM uint32_t PeriphID3;                   /*!< (@ 0x00000FEC) Peripheral Identification Registers 3                      */

    struct {
      __IOM uint32_t Channel    : 3;            /*!< [2..0] Indicates the number of channels                                   */
      __IOM uint32_t Number     : 1;            /*!< [3..3] Indicates the number of AHB masters                                */
      __IOM uint32_t Sidth      : 3;            /*!< [6..4] Indicates the AHB master bus width                                 */
      __IOM uint32_t Source     : 1;            /*!< [7..7] Indicates the number of DMA source requestors for the
                                                     PrimeCell configuration                                                   */
    } PeriphID3_b;
  } ;
  __IOM uint32_t  PCellID0;                     /*!< (@ 0x00000FF0) PrimeCell Identification Registers 0-3,                    */
  __IOM uint32_t  PCellID1;                     /*!< (@ 0x00000FF4) PrimeCell Identification Registers 0-3,                    */
  __IOM uint32_t  PCellID2;                     /*!< (@ 0x00000FF8) PrimeCell Identification Registers 0-3,                    */
  __IOM uint32_t  PCellID3;                     /*!< (@ 0x00000FFC) PrimeCell Identification Registers 0-3,                    */
} DMAC_Type;                                    /*!< Size = 4096 (0x1000)                                                      */



/* =========================================================================================================================== */
/* ================                                           QSPI                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief QuadSPI (QSPI)
  */

typedef struct {                                /*!< (@ 0x40090000) QSPI Structure                                             */

  union {
    __IOM uint32_t MCR;                         /*!< (@ 0x00000000) Module_Configuration_Register                              */

    struct {
      __IOM uint32_t SWRSTSD    : 1;            /*!< [0..0] Software reset for serial flash domain                             */
      __IOM uint32_t SWRSTHD    : 1;            /*!< [1..1] Software reset for AHB domain                                      */
      __IOM uint32_t END_CFG    : 2;            /*!< [3..2] Defines the endianness of the QuadSPI module                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t DQS_LAT_EN : 1;            /*!< [5..5] DQS Latency Enable                                                 */
      __IOM uint32_t DQS_EN     : 1;            /*!< [6..6] DQS enable                                                         */
      __IOM uint32_t DDR_EN     : 1;            /*!< [7..7] DDR mode enable                                                    */
      __IM  uint32_t            : 2;
      __IOM uint32_t CLR_RXF    : 1;            /*!< [10..10] Clear RX FIFO                                                    */
      __IOM uint32_t CLR_TXF    : 1;            /*!< [11..11] Clear TX FIFO/Buffer                                             */
      __IM  uint32_t            : 2;
      __IOM uint32_t MDIS       : 1;            /*!< [14..14] Module Disable                                                   */
      __IM  uint32_t            : 9;
      __IOM uint32_t SCLKCFG    : 8;            /*!< [31..24] Serial Clock Configuration                                       */
    } MCR_b;
  } ;
  __IM  uint32_t  RESERVED;

  union {
    __IOM uint32_t IPCR;                        /*!< (@ 0x00000008) IP_Configuration_Register                                  */

    struct {
      __IOM uint32_t IDATSZ     : 16;           /*!< [15..0] IP data transfer size                                             */
      __IOM uint32_t PAR_EN     : 1;            /*!< [16..16] When set, a transaction to two serial flash devices
                                                     is triggered in parallel mode                                             */
      __IM  uint32_t            : 7;
      __IOM uint32_t SEQID      : 4;            /*!< [27..24] Points to a sequence in the Look-up table                        */
    } IPCR_b;
  } ;

  union {
    __IOM uint32_t FLSHCR;                      /*!< (@ 0x0000000C) Flash Configuration Register                               */

    struct {
      __IOM uint32_t TCSS       : 4;            /*!< [3..0] Serial flash CS setup time in terms of serial flash clock
                                                     cycles                                                                    */
      __IM  uint32_t            : 4;
      __IOM uint32_t TCSH       : 4;            /*!< [11..8] Serial flash CS hold time in terms of serial flash clock
                                                     cycles                                                                    */
      __IM  uint32_t            : 4;
      __IOM uint32_t TDH        : 2;            /*!< [17..16] Serial flash data in hold time                                   */
    } FLSHCR_b;
  } ;

  union {
    __IOM uint32_t BUF0CR;                      /*!< (@ 0x00000010) Buffer0 Configuration Register                             */

    struct {
      __IOM uint32_t MSTRID     : 4;            /*!< [3..0] Master ID                                                          */
      __IM  uint32_t            : 4;
      __IOM uint32_t ADATSZ     : 7;            /*!< [14..8] AHB data transfer size                                            */
      __IM  uint32_t            : 16;
      __IOM uint32_t HP_EN      : 1;            /*!< [31..31] High Priority Enable                                             */
    } BUF0CR_b;
  } ;

  union {
    __IOM uint32_t BUF1CR;                      /*!< (@ 0x00000014) Buffer1 Configuration Register                             */

    struct {
      __IOM uint32_t MSTRID     : 4;            /*!< [3..0] Master ID                                                          */
      __IM  uint32_t            : 4;
      __IOM uint32_t ADATSZ     : 7;            /*!< [14..8] AHB data transfer size                                            */
    } BUF1CR_b;
  } ;

  union {
    __IOM uint32_t BUF2CR;                      /*!< (@ 0x00000018) Buffer2 Configuration Register                             */

    struct {
      __IOM uint32_t MSTRID     : 4;            /*!< [3..0] Master ID                                                          */
      __IM  uint32_t            : 4;
      __IOM uint32_t ADATSZ     : 7;            /*!< [14..8] AHB data transfer size                                            */
    } BUF2CR_b;
  } ;

  union {
    __IOM uint32_t BUF3CR;                      /*!< (@ 0x0000001C) Buffer3 Configuration Register                             */

    struct {
      __IOM uint32_t MSTRID     : 4;            /*!< [3..0] Master ID                                                          */
      __IM  uint32_t            : 4;
      __IOM uint32_t ADATSZ     : 7;            /*!< [14..8] AHB data transfer size                                            */
      __IM  uint32_t            : 16;
      __IOM uint32_t ALLMST     : 1;            /*!< [31..31] All master enable                                                */
    } BUF3CR_b;
  } ;

  union {
    __IOM uint32_t BFGENCR;                     /*!< (@ 0x00000020) Buffer Generic Configuration Register                      */

    struct {
      __IM  uint32_t            : 12;
      __IOM uint32_t SEQID      : 4;            /*!< [15..12] Points to a sequence in the Look-up-table                        */
      __IOM uint32_t PAR_EN     : 1;            /*!< [16..16] When set, a transaction to two serial flash devices
                                                     is triggered in parallel mode                                             */
    } BFGENCR_b;
  } ;

  union {
    __IOM uint32_t SOCCR;                       /*!< (@ 0x00000024) SOC Configuration Register                                 */

    struct {
      __IOM uint32_t SOCCFG     : 32;           /*!< [31..0] SOC Configuration                                                 */
    } SOCCR_b;
  } ;
  __IM  uint32_t  RESERVED1[2];
  __IOM uint32_t  BUF0IND;                      /*!< (@ 0x00000030) Buffer0 Top Index Register                                 */

  union {
    __IOM uint32_t BUF1IND;                     /*!< (@ 0x00000034) Buffer1 Top Index Register                                 */

    struct {
      __IM  uint32_t            : 3;
      __IOM uint32_t TPINDX1    : 29;           /*!< [31..3] Top index of buffer 1                                             */
    } BUF1IND_b;
  } ;

  union {
    __IOM uint32_t BUF2IND;                     /*!< (@ 0x00000038) Buffer2 Top Index Register                                 */

    struct {
      __IM  uint32_t            : 3;
      __IOM uint32_t TPINDX2    : 29;           /*!< [31..3] Top index of buffer 2                                             */
    } BUF2IND_b;
  } ;
  __IM  uint32_t  RESERVED2[49];

  union {
    __IOM uint32_t SFAR;                        /*!< (@ 0x00000100) Serial Flash Address Register                              */

    struct {
      __IOM uint32_t SFADR      : 32;           /*!< [31..0] Serial Flash Address                                              */
    } SFAR_b;
  } ;

  union {
    __IOM uint32_t SFACR;                       /*!< (@ 0x00000104) Serial Flash Address Configuration Register                */

    struct {
      __IOM uint32_t CAS        : 4;            /*!< [3..0] Column Address Space                                               */
      __IM  uint32_t            : 12;
      __IOM uint32_t WA         : 1;            /*!< [16..16] Word Addressable                                                 */
    } SFACR_b;
  } ;

  union {
    __IOM uint32_t SMPR;                        /*!< (@ 0x00000108) Sampling Register                                          */

    struct {
      __IOM uint32_t HSENA      : 1;            /*!< [0..0] Half Speed serial flash clock Enable                               */
      __IOM uint32_t HSPHS      : 1;            /*!< [1..1] Half Speed Phase selection for SDR instructions                    */
      __IOM uint32_t HSDLY      : 1;            /*!< [2..2] Half Speed Delay selection for SDR instructions                    */
      __IM  uint32_t            : 2;
      __IOM uint32_t FSPHS      : 1;            /*!< [5..5] Full Speed Phase selection for SDR instructions                    */
      __IOM uint32_t FSDLY      : 1;            /*!< [6..6] Full Speed Delay selection for SDR instructions                    */
      __IM  uint32_t            : 9;
      __IOM uint32_t DDRSMP     : 3;            /*!< [18..16] DDR Sampling point                                               */
    } SMPR_b;
  } ;

  union {
    __IOM uint32_t RBSR;                        /*!< (@ 0x0000010C) RX Buffer Status Register                                  */

    struct {
      __IM  uint32_t            : 8;
      __IOM uint32_t RDBFL      : 5;            /*!< [12..8] RX Buffer Fill Level                                              */
      __IM  uint32_t            : 3;
      __IOM uint32_t RDCTR      : 16;           /*!< [31..16] Read Counter                                                     */
    } RBSR_b;
  } ;

  union {
    __IOM uint32_t RBCT;                        /*!< (@ 0x00000110) RX Buffer Control Register                                 */

    struct {
      __IOM uint32_t WMRK       : 4;            /*!< [3..0] RX Buffer Watermark                                                */
      __IM  uint32_t            : 4;
      __IOM uint32_t RXBRD      : 3;            /*!< [10..8] RX Buffer Readout                                                 */
    } RBCT_b;
  } ;
  __IM  uint32_t  RESERVED3[15];

  union {
    __IOM uint32_t TBSR;                        /*!< (@ 0x00000150) TX Buffer Status Register                                  */

    struct {
      __IM  uint32_t            : 8;
      __IOM uint32_t TRBFL      : 5;            /*!< [12..8] TX Buffer Fill Level                                              */
      __IM  uint32_t            : 3;
      __IOM uint32_t TRCTR      : 16;           /*!< [31..16] Transmit Counter                                                 */
    } TBSR_b;
  } ;

  union {
    __IOM uint32_t TBDR;                        /*!< (@ 0x00000154) TX Buffer Data Register                                    */

    struct {
      __IOM uint32_t TXDATA     : 32;           /*!< [31..0] TX Data                                                           */
    } TBDR_b;
  } ;

  union {
    __IOM uint32_t TBCT;                        /*!< (@ 0x00000158) Tx Buffer Control Register                                 */

    struct {
      __IOM uint32_t WMRK       : 4;            /*!< [3..0] Determines the watermark for the TX Buffer                         */
    } TBCT_b;
  } ;

  union {
    __IOM uint32_t SR;                          /*!< (@ 0x0000015C) Status Register                                            */

    struct {
      __IOM uint32_t BUSY       : 1;            /*!< [0..0] Module Busy                                                        */
      __IOM uint32_t IP_ACC     : 1;            /*!< [1..1] IP Access                                                          */
      __IOM uint32_t AHB_ACC    : 1;            /*!< [2..2] AHB Access                                                         */
      __IM  uint32_t            : 2;
      __IOM uint32_t AHBGNT     : 1;            /*!< [5..5] AHB Command priority Granted                                       */
      __IOM uint32_t AHBTRN     : 1;            /*!< [6..6] AHB Access Transaction pending                                     */
      __IOM uint32_t AHB0NE     : 1;            /*!< [7..7] AHB 0 Buffer Not Empty                                             */
      __IOM uint32_t AHB1NE     : 1;            /*!< [8..8] AHB 1 Buffer Not Empty                                             */
      __IOM uint32_t AHB2NE     : 1;            /*!< [9..9] AHB 2 Buffer Not Empty                                             */
      __IOM uint32_t AHB3NE     : 1;            /*!< [10..10] AHB 3 Buffer Not Empty                                           */
      __IOM uint32_t AHB0FUL    : 1;            /*!< [11..11] AHB 0 Buffer Full                                                */
      __IOM uint32_t AHB1FUL    : 1;            /*!< [12..12] AHB 1 Buffer Full                                                */
      __IOM uint32_t AHB2FUL    : 1;            /*!< [13..13] AHB 2 Buffer Ful                                                 */
      __IOM uint32_t AHB3FUL    : 1;            /*!< [14..14] AHB 3 Buffer Ful                                                 */
      __IM  uint32_t            : 1;
      __IOM uint32_t RXWE       : 1;            /*!< [16..16] RX Buffer Watermark Exceeded                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t RXFULL     : 1;            /*!< [19..19] RX Buffer Full                                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t RXDMA      : 1;            /*!< [23..23] RX Buffer DMA                                                    */
      __IOM uint32_t TXEDA      : 1;            /*!< [24..24] Tx Buffer Enough Data Available                                  */
      __IOM uint32_t TXWA       : 1;            /*!< [25..25] TX Buffer watermark Available                                    */
      __IOM uint32_t TXDMA      : 1;            /*!< [26..26] TXDMA                                                            */
      __IOM uint32_t TXFULL     : 1;            /*!< [27..27] TX Buffer Full                                                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t DLPSMP     : 3;            /*!< [31..29] Data learning pattern sampling point                             */
    } SR_b;
  } ;

  union {
    __IOM uint32_t FR;                          /*!< (@ 0x00000160) Flag Register                                              */

    struct {
      __IOM uint32_t TFF        : 1;            /*!< [0..0] IP Command Transaction Finished Flag                               */
      __IM  uint32_t            : 3;
      __IOM uint32_t IPGEF      : 1;            /*!< [4..4] IP Command Trigger during AHB Grant Error Flag                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t IPIEF      : 1;            /*!< [6..6] IP Command Trigger could not be executed Error Flag                */
      __IOM uint32_t IPAEF      : 1;            /*!< [7..7] IP Command Trigger during AHB Access Error Flag                    */
      __IM  uint32_t            : 3;
      __IOM uint32_t IUEF       : 1;            /*!< [11..11] IP Command Usage Error Flag                                      */
      __IOM uint32_t ABOF       : 1;            /*!< [12..12] AHB Buffer Overflow Flag                                         */
      __IOM uint32_t AIBSEF     : 1;            /*!< [13..13] AHB Illegal Burst Size Error Flag                                */
      __IOM uint32_t AITEF      : 1;            /*!< [14..14] AHB Illegal transaction error flag                               */
      __IOM uint32_t ABSEF      : 1;            /*!< [15..15] AHB Sequence Error Flag                                          */
      __IOM uint32_t RBDF       : 1;            /*!< [16..16] RX Buffer Drain Flag                                             */
      __IOM uint32_t RBOF       : 1;            /*!< [17..17] RX Buffer Overflow Flag                                          */
      __IM  uint32_t            : 5;
      __IOM uint32_t ILLINE     : 1;            /*!< [23..23] Illegal Instruction Error Flag                                   */
      __IM  uint32_t            : 2;
      __IOM uint32_t TBUF       : 1;            /*!< [26..26] TX Buffer Underrun Flag                                          */
      __IOM uint32_t TBFF       : 1;            /*!< [27..27] TX Buffer Fill Flag                                              */
      __IM  uint32_t            : 3;
      __IOM uint32_t DLPFF      : 1;            /*!< [31..31] Data Learning Pattern Failure Flag                               */
    } FR_b;
  } ;

  union {
    __IOM uint32_t RSER;                        /*!< (@ 0x00000164) Interrupt and DMA Request Select and Enable Register       */

    struct {
      __IOM uint32_t TFIE       : 1;            /*!< [0..0] Transaction Finished Interrupt Enable                              */
      __IM  uint32_t            : 3;
      __IOM uint32_t IPGEIE     : 1;            /*!< [4..4] IP Command Trigger during AHB Grant Error Interrupt Enable         */
      __IM  uint32_t            : 1;
      __IOM uint32_t IPIEIE     : 1;            /*!< [6..6] IP Command Trigger during IP Access Error Interrupt Enable         */
      __IOM uint32_t IPAEIE     : 1;            /*!< [7..7] IP Command Trigger during AHB Access Error Interrupt
                                                     Enable                                                                    */
      __IM  uint32_t            : 3;
      __IOM uint32_t IUEIE      : 1;            /*!< [11..11] IP Command Usage Error Interrupt Enable                          */
      __IOM uint32_t ABOIE      : 1;            /*!< [12..12] AHB Buffer Overflow Interrupt Enable                             */
      __IOM uint32_t AIBSIE     : 1;            /*!< [13..13] AHB Illegal Burst Size Interrupt Enable                          */
      __IOM uint32_t AITIE      : 1;            /*!< [14..14] AHB Illegal transaction interrupt enable                         */
      __IOM uint32_t ABSEIE     : 1;            /*!< [15..15] AHB Sequence Error Interrupt Enable                              */
      __IOM uint32_t RBDIE      : 1;            /*!< [16..16] RX Buffer Drain Interrupt Enable                                 */
      __IOM uint32_t RBOIE      : 1;            /*!< [17..17] RX Buffer Overflow Interrupt Enable                              */
      __IM  uint32_t            : 3;
      __IOM uint32_t RBDDE      : 1;            /*!< [21..21] RX Buffer Drain DMA Enable                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t ILLINIE    : 1;            /*!< [23..23] Illegal Instruction Error Interrupt Enable                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t TBFDE      : 1;            /*!< [25..25] TX Buffer Fill DMA Enable                                        */
      __IOM uint32_t TBUIE      : 1;            /*!< [26..26] TX Buffer Underrun Interrupt Enable                              */
      __IOM uint32_t TBFIE      : 1;            /*!< [27..27] TX Buffer Fill Interrupt Enable                                  */
      __IM  uint32_t            : 3;
      __IOM uint32_t DLPFIE     : 1;            /*!< [31..31] Data Learning Pattern Failure Interrupt enable                   */
    } RSER_b;
  } ;

  union {
    __IOM uint32_t SPNDST;                      /*!< (@ 0x00000168) Sequence Suspend Status Register                           */

    struct {
      __IOM uint32_t SUSPND     : 1;            /*!< [0..0] When set, it signifies that a sequence is in suspended
                                                     state                                                                     */
      __IM  uint32_t            : 5;
      __IOM uint32_t SPDBUF     : 2;            /*!< [7..6] Suspended Buffer                                                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t DATLFT     : 6;            /*!< [14..9] Data left                                                         */
    } SPNDST_b;
  } ;

  union {
    __IOM uint32_t SPTRCLR;                     /*!< (@ 0x0000016C) Sequence Pointer Clear Register                            */

    struct {
      __IOM uint32_t BFPTRC     : 1;            /*!< [0..0] Buffer Pointer Clear                                               */
      __IM  uint32_t            : 7;
      __IOM uint32_t IPPTRC     : 1;            /*!< [8..8] IP Pointer Clear                                                   */
    } SPTRCLR_b;
  } ;
  __IM  uint32_t  RESERVED4[4];

  union {
    __IOM uint32_t SFA1AD;                      /*!< (@ 0x00000180) Serial Flash A1 Top Address                                */

    struct {
      __IM  uint32_t            : 10;
      __IOM uint32_t TPADA1     : 22;           /*!< [31..10] Top address for Serial Flash A1                                  */
    } SFA1AD_b;
  } ;

  union {
    __IOM uint32_t SFA2AD;                      /*!< (@ 0x00000184) Serial Flash A2 Top Address                                */

    struct {
      __IM  uint32_t            : 10;
      __IOM uint32_t TPADA2     : 22;           /*!< [31..10] Top address for Serial Flash A2                                  */
    } SFA2AD_b;
  } ;

  union {
    __IOM uint32_t SFB1AD;                      /*!< (@ 0x00000188) Serial Flash B1Top Address                                 */

    struct {
      __IM  uint32_t            : 10;
      __IOM uint32_t TPADB1     : 22;           /*!< [31..10] Top address for Serial Flash B1                                  */
    } SFB1AD_b;
  } ;

  union {
    __IOM uint32_t SFB2AD;                      /*!< (@ 0x0000018C) Serial Flash B2Top Address                                 */

    struct {
      __IM  uint32_t            : 10;
      __IOM uint32_t TPADB2     : 22;           /*!< [31..10] Top address for Serial Flash B2                                  */
    } SFB2AD_b;
  } ;

  union {
    __IOM uint32_t DLPR;                        /*!< (@ 0x00000190) Data Learn Pattern Register                                */

    struct {
      __IOM uint32_t DLPV       : 32;           /*!< [31..0] Data Learning Pattern Value                                       */
    } DLPR_b;
  } ;
  __IM  uint32_t  RESERVED5[27];

  union {
    __IOM uint32_t RBDR[16];                    /*!< (@ 0x00000200) RX Buffer Data Register                                    */

    struct {
      __IOM uint32_t RXDATA     : 32;           /*!< [31..0] RX Data                                                           */
    } RBDR_b[16];
  } ;
  __IM  uint32_t  RESERVED6[48];

  union {
    __IOM uint32_t LUTKEY;                      /*!< (@ 0x00000300) LUT Key Register                                           */

    struct {
      __IOM uint32_t KEY        : 32;           /*!< [31..0] The key to lock or unlock the LUT                                 */
    } LUTKEY_b;
  } ;

  union {
    __IOM uint32_t LCKCR;                       /*!< (@ 0x00000304) LUT Lock Configuration Register                            */

    struct {
      __IOM uint32_t LOCK       : 1;            /*!< [0..0] Locks the LUT when the following condition is met                  */
      __IOM uint32_t UNLOCK     : 1;            /*!< [1..1] Unlocks the LUT when the following two conditions are
                                                     met                                                                       */
    } LCKCR_b;
  } ;
  __IM  uint32_t  RESERVED7[2];

  union {
    __IOM uint32_t LUT[64];                     /*!< (@ 0x00000310) look-up-table for sequences of instructions                */

    struct {
      __IOM uint32_t OPRND0     : 8;            /*!< [7..0] Operand for INSTR0                                                 */
      __IOM uint32_t PAD0       : 2;            /*!< [9..8] Pad information for INSTR0                                         */
      __IOM uint32_t INSTR0     : 6;            /*!< [15..10] Instruction 0                                                    */
      __IOM uint32_t OPRND1     : 8;            /*!< [23..16] Operand for INSTR1                                               */
      __IOM uint32_t PAD1       : 2;            /*!< [25..24] Pad information for INSTR1                                       */
      __IOM uint32_t INSTR1     : 6;            /*!< [31..26] Instruction 1                                                    */
    } LUT_b[64];
  } ;
} QSPI_Type;                                    /*!< Size = 1040 (0x410)                                                       */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define RESET_BASE                  0x40020000UL
#define SWT_BASE                    0x401E0000UL
#define AES_BASE                    0x40600000UL
#define CRC_BASE                    0x40400000UL
#define ADC_BASE                    0x40060000UL
#define HRF_BASE                    0x40900000UL
#define BPLC_BASE                   0x40500000UL
#define BPLC_SB_SNR_BASE            0x40503000UL
#define BPLC_AFE_BASE               0x40130000UL
#define I2C_BASE                    0x400C0000UL
#define PIT_CONTROL0_BASE           0x40070000UL
#define PIT_CHANNEL0_BASE           0x40070100UL
#define PIT_CHANNEL1_BASE           0x40070110UL
#define PIT_CHANNEL2_BASE           0x40070120UL
#define PIT_CHANNEL3_BASE           0x40070130UL
#define PIT_CHANNEL4_BASE           0x40070140UL
#define PIT_CHANNEL5_BASE           0x40070150UL
#define PIT_CONTROL1_BASE           0x40080000UL
#define PIT_CHANNEL6_BASE           0x40080100UL
#define PIT_CHANNEL7_BASE           0x40080110UL
#define PIT_CHANNEL8_BASE           0x40080120UL
#define PIT_CHANNEL9_BASE           0x40080130UL
#define PIT_CHANNEL10_BASE          0x40080140UL
#define PIT_CHANNEL11_BASE          0x40080150UL
#define SCI0_BASE                   0x400D0000UL
#define SCI1_BASE                   0x400E0000UL
#define SCI2_BASE                   0x400F0000UL
#define SCI3_BASE                   0x40100000UL
#define SPI0_BASE                   0x400A0000UL
#define SPI1_BASE                   0x400B0000UL
#define CCM_BASE                    0x40010000UL
#define CPM_BASE                    0x40030000UL
#define PWM0_BASE                   0x40A00000UL
#define PWM1_BASE                   0x40B00000UL
#define EPORT0_BASE                 0x40140000UL
#define EPORT1_BASE                 0x40150000UL
#define EPORT2_BASE                 0x40160000UL
#define EPORT3_BASE                 0x40170000UL
#define EPORT4_BASE                 0x40180000UL
#define EPORT5_BASE                 0x40190000UL
#define EPORT6_BASE                 0x401A0000UL
#define EPORT7_BASE                 0x401B0000UL
#define EPORT8_BASE                 0x401C0000UL
#define EPORT9_BASE                 0x401D0000UL
#define PORTS_BASE                  0x40040000UL
#define DMAC_BASE                   0x40300000UL
#define QSPI_BASE                   0x40090000UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define RESET                       ((RESET_Type*)             RESET_BASE)
#define SWT                         ((SWT_Type*)               SWT_BASE)
#define AES_DEVICE                  ((AES_Type*)               AES_BASE)
#define CRC                         ((CRC_Type*)               CRC_BASE)
#define ADC                         ((ADC_Type*)               ADC_BASE)
#define HRF                         ((HRF_Type*)               HRF_BASE)
#define BPLC                        ((BPLC_Type*)              BPLC_BASE)
#define BPLC_SB_SNR                 ((BPLC_SB_SNR_Type*)       BPLC_SB_SNR_BASE)
#define BPLC_AFE                    ((BPLC_AFE_Type*)          BPLC_AFE_BASE)
#define I2C                         ((I2C_Type*)               I2C_BASE)
#define PIT_CONTROL0                ((PIT_CONTROL_Type*)       PIT_CONTROL0_BASE)
#define PIT_CHANNEL0                ((PIT_CHANNEL_Type*)       PIT_CHANNEL0_BASE)
#define PIT_CHANNEL1                ((PIT_CHANNEL_Type*)       PIT_CHANNEL1_BASE)
#define PIT_CHANNEL2                ((PIT_CHANNEL_Type*)       PIT_CHANNEL2_BASE)
#define PIT_CHANNEL3                ((PIT_CHANNEL_Type*)       PIT_CHANNEL3_BASE)
#define PIT_CHANNEL4                ((PIT_CHANNEL_Type*)       PIT_CHANNEL4_BASE)
#define PIT_CHANNEL5                ((PIT_CHANNEL_Type*)       PIT_CHANNEL5_BASE)
#define PIT_CONTROL1                ((PIT_CONTROL_Type*)       PIT_CONTROL1_BASE)
#define PIT_CHANNEL6                ((PIT_CHANNEL_Type*)       PIT_CHANNEL6_BASE)
#define PIT_CHANNEL7                ((PIT_CHANNEL_Type*)       PIT_CHANNEL7_BASE)
#define PIT_CHANNEL8                ((PIT_CHANNEL_Type*)       PIT_CHANNEL8_BASE)
#define PIT_CHANNEL9                ((PIT_CHANNEL_Type*)       PIT_CHANNEL9_BASE)
#define PIT_CHANNEL10               ((PIT_CHANNEL_Type*)       PIT_CHANNEL10_BASE)
#define PIT_CHANNEL11               ((PIT_CHANNEL_Type*)       PIT_CHANNEL11_BASE)
#define SCI0                        ((SCI_Type*)               SCI0_BASE)
#define SCI1                        ((SCI_Type*)               SCI1_BASE)
#define SCI2                        ((SCI_Type*)               SCI2_BASE)
#define SCI3                        ((SCI_Type*)               SCI3_BASE)
#define SPI0                        ((SPI_Type*)               SPI0_BASE)
#define SPI1                        ((SPI_Type*)               SPI1_BASE)
#define CCM                         ((CCM_Type*)               CCM_BASE)
#define CPM                         ((CPM_Type*)               CPM_BASE)
#define PWM0                        ((PWM_Type*)               PWM0_BASE)
#define PWM1                        ((PWM_Type*)               PWM1_BASE)
#define EPORT0                      ((EPORT_Type*)             EPORT0_BASE)
#define EPORT1                      ((EPORT_Type*)             EPORT1_BASE)
#define EPORT2                      ((EPORT_Type*)             EPORT2_BASE)
#define EPORT3                      ((EPORT_Type*)             EPORT3_BASE)
#define EPORT4                      ((EPORT_Type*)             EPORT4_BASE)
#define EPORT5                      ((EPORT_Type*)             EPORT5_BASE)
#define EPORT6                      ((EPORT_Type*)             EPORT6_BASE)
#define EPORT7                      ((EPORT_Type*)             EPORT7_BASE)
#define EPORT8                      ((EPORT_Type*)             EPORT8_BASE)
#define EPORT9                      ((EPORT_Type*)             EPORT9_BASE)
#define PORTS                       ((PORTS_Type*)             PORTS_BASE)
#define DMAC                        ((DMAC_Type*)              DMAC_BASE)
#define QSPI                        ((QSPI_Type*)              QSPI_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


/* =========================================================================================================================== */
/* ================                                Pos/Mask Peripheral Section                                ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                           RESET                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  RCR  ========================================================== */
#define RESET_RCR_FRCRSTOUT_Pos           (0UL)                     /*!< RESET RCR: FRCRSTOUT (Bit 0)                          */
#define RESET_RCR_FRCRSTOUT_Msk           (0x1UL)                   /*!< RESET RCR: FRCRSTOUT (Bitfield-Mask: 0x01)            */
/* ==========================================================  RSR  ========================================================== */
#define RESET_RSR_POR_Pos                 (1UL)                     /*!< RESET RSR: POR (Bit 1)                                */
#define RESET_RSR_POR_Msk                 (0x2UL)                   /*!< RESET RSR: POR (Bitfield-Mask: 0x01)                  */
#define RESET_RSR_STDBYWKR_Pos            (2UL)                     /*!< RESET RSR: STDBYWKR (Bit 2)                           */
#define RESET_RSR_STDBYWKR_Msk            (0x4UL)                   /*!< RESET RSR: STDBYWKR (Bitfield-Mask: 0x01)             */
#define RESET_RSR_FPOR_Pos                (3UL)                     /*!< RESET RSR: FPOR (Bit 3)                               */
#define RESET_RSR_FPOR_Msk                (0x8UL)                   /*!< RESET RSR: FPOR (Bitfield-Mask: 0x01)                 */
#define RESET_RSR_WDR_Pos                 (4UL)                     /*!< RESET RSR: WDR (Bit 4)                                */
#define RESET_RSR_WDR_Msk                 (0x10UL)                  /*!< RESET RSR: WDR (Bitfield-Mask: 0x01)                  */
#define RESET_RSR_SOFT_Pos                (5UL)                     /*!< RESET RSR: SOFT (Bit 5)                               */
#define RESET_RSR_SOFT_Msk                (0x20UL)                  /*!< RESET RSR: SOFT (Bitfield-Mask: 0x01)                 */
#define RESET_RSR_PVD_Pos                 (6UL)                     /*!< RESET RSR: PVD (Bit 6)                                */
#define RESET_RSR_PVD_Msk                 (0x40UL)                  /*!< RESET RSR: PVD (Bitfield-Mask: 0x01)                  */
#define RESET_RSR_ERST_Pos                (7UL)                     /*!< RESET RSR: ERST (Bit 7)                               */
#define RESET_RSR_ERST_Msk                (0x80UL)                  /*!< RESET RSR: ERST (Bitfield-Mask: 0x01)                 */
/* ==========================================================  RTR  ========================================================== */
#define RESET_RTR_FPOR_Pos                (0UL)                     /*!< RESET RTR: FPOR (Bit 0)                               */
#define RESET_RTR_FPOR_Msk                (0x1UL)                   /*!< RESET RTR: FPOR (Bitfield-Mask: 0x01)                 */
#define RESET_RTR_TEST_Pos                (6UL)                     /*!< RESET RTR: TEST (Bit 6)                               */
#define RESET_RTR_TEST_Msk                (0xc0UL)                  /*!< RESET RTR: TEST (Bitfield-Mask: 0x03)                 */


/* =========================================================================================================================== */
/* ================                                            SWT                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  SWTCR  ========================================================= */
#define SWT_SWTCR_WEN_Pos                 (0UL)                     /*!< SWT SWTCR: WEN (Bit 0)                                */
#define SWT_SWTCR_WEN_Msk                 (0x1UL)                   /*!< SWT SWTCR: WEN (Bitfield-Mask: 0x01)                  */
#define SWT_SWTCR_FRZ_Pos                 (1UL)                     /*!< SWT SWTCR: FRZ (Bit 1)                                */
#define SWT_SWTCR_FRZ_Msk                 (0x2UL)                   /*!< SWT SWTCR: FRZ (Bitfield-Mask: 0x01)                  */
#define SWT_SWTCR_STP_Pos                 (2UL)                     /*!< SWT SWTCR: STP (Bit 2)                                */
#define SWT_SWTCR_STP_Msk                 (0x4UL)                   /*!< SWT SWTCR: STP (Bitfield-Mask: 0x01)                  */
#define SWT_SWTCR_CSL_Pos                 (3UL)                     /*!< SWT SWTCR: CSL (Bit 3)                                */
#define SWT_SWTCR_CSL_Msk                 (0x8UL)                   /*!< SWT SWTCR: CSL (Bitfield-Mask: 0x01)                  */
#define SWT_SWTCR_SLK_Pos                 (4UL)                     /*!< SWT SWTCR: SLK (Bit 4)                                */
#define SWT_SWTCR_SLK_Msk                 (0x10UL)                  /*!< SWT SWTCR: SLK (Bitfield-Mask: 0x01)                  */
#define SWT_SWTCR_HLK_Pos                 (5UL)                     /*!< SWT SWTCR: HLK (Bit 5)                                */
#define SWT_SWTCR_HLK_Msk                 (0x20UL)                  /*!< SWT SWTCR: HLK (Bitfield-Mask: 0x01)                  */
#define SWT_SWTCR_ITR_Pos                 (6UL)                     /*!< SWT SWTCR: ITR (Bit 6)                                */
#define SWT_SWTCR_ITR_Msk                 (0x40UL)                  /*!< SWT SWTCR: ITR (Bitfield-Mask: 0x01)                  */
#define SWT_SWTCR_WND_Pos                 (7UL)                     /*!< SWT SWTCR: WND (Bit 7)                                */
#define SWT_SWTCR_WND_Msk                 (0x80UL)                  /*!< SWT SWTCR: WND (Bitfield-Mask: 0x01)                  */
#define SWT_SWTCR_RIA_Pos                 (8UL)                     /*!< SWT SWTCR: RIA (Bit 8)                                */
#define SWT_SWTCR_RIA_Msk                 (0x100UL)                 /*!< SWT SWTCR: RIA (Bitfield-Mask: 0x01)                  */
#define SWT_SWTCR_KEY_Pos                 (9UL)                     /*!< SWT SWTCR: KEY (Bit 9)                                */
#define SWT_SWTCR_KEY_Msk                 (0x200UL)                 /*!< SWT SWTCR: KEY (Bitfield-Mask: 0x01)                  */
#define SWT_SWTCR_MAP_Pos                 (24UL)                    /*!< SWT SWTCR: MAP (Bit 24)                               */
#define SWT_SWTCR_MAP_Msk                 (0xff000000UL)            /*!< SWT SWTCR: MAP (Bitfield-Mask: 0xff)                  */
/* =========================================================  SWTIR  ========================================================= */
#define SWT_SWTIR_TIF_Pos                 (0UL)                     /*!< SWT SWTIR: TIF (Bit 0)                                */
#define SWT_SWTIR_TIF_Msk                 (0x1UL)                   /*!< SWT SWTIR: TIF (Bitfield-Mask: 0x01)                  */
/* =========================================================  SWTTO  ========================================================= */
/* =========================================================  SWTWN  ========================================================= */
/* =========================================================  SWTSR  ========================================================= */
#define SWT_SWTSR_WSC_Pos                 (0UL)                     /*!< SWT SWTSR: WSC (Bit 0)                                */
#define SWT_SWTSR_WSC_Msk                 (0xffffUL)                /*!< SWT SWTSR: WSC (Bitfield-Mask: 0xffff)                */
/* =========================================================  SWTCO  ========================================================= */
/* =========================================================  SWTSK  ========================================================= */
#define SWT_SWTSK_SK_Pos                  (0UL)                     /*!< SWT SWTSK: SK (Bit 0)                                 */
#define SWT_SWTSK_SK_Msk                  (0xffffUL)                /*!< SWT SWTSK: SK (Bitfield-Mask: 0xffff)                 */


/* =========================================================================================================================== */
/* ================                                            AES                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  DIOR  ========================================================== */
/* ==========================================================  KEY  ========================================================== */
/* ==========================================================  CSR  ========================================================== */
/* ========================================================  COUNTER  ======================================================== */


/* =========================================================================================================================== */
/* ================                                            CRC                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CTR  ========================================================== */
/* ==========================================================  RES  ========================================================== */
/* ==========================================================  INI  ========================================================== */
/* =========================================================  DATI  ========================================================== */


/* =========================================================================================================================== */
/* ================                                            ADC                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  ADCISR  ========================================================= */
#define ADC_ADCISR_ADRDY_Pos              (0UL)                     /*!< ADC ADCISR: ADRDY (Bit 0)                             */
#define ADC_ADCISR_ADRDY_Msk              (0x1UL)                   /*!< ADC ADCISR: ADRDY (Bitfield-Mask: 0x01)               */
#define ADC_ADCISR_EOSMP_Pos              (1UL)                     /*!< ADC ADCISR: EOSMP (Bit 1)                             */
#define ADC_ADCISR_EOSMP_Msk              (0x2UL)                   /*!< ADC ADCISR: EOSMP (Bitfield-Mask: 0x01)               */
#define ADC_ADCISR_EOC_Pos                (2UL)                     /*!< ADC ADCISR: EOC (Bit 2)                               */
#define ADC_ADCISR_EOC_Msk                (0x4UL)                   /*!< ADC ADCISR: EOC (Bitfield-Mask: 0x01)                 */
#define ADC_ADCISR_EOSEQ_Pos              (3UL)                     /*!< ADC ADCISR: EOSEQ (Bit 3)                             */
#define ADC_ADCISR_EOSEQ_Msk              (0x8UL)                   /*!< ADC ADCISR: EOSEQ (Bitfield-Mask: 0x01)               */
#define ADC_ADCISR_OVR_Pos                (4UL)                     /*!< ADC ADCISR: OVR (Bit 4)                               */
#define ADC_ADCISR_OVR_Msk                (0x10UL)                  /*!< ADC ADCISR: OVR (Bitfield-Mask: 0x01)                 */
#define ADC_ADCISR_FULL_Pos               (5UL)                     /*!< ADC ADCISR: FULL (Bit 5)                              */
#define ADC_ADCISR_FULL_Msk               (0x20UL)                  /*!< ADC ADCISR: FULL (Bitfield-Mask: 0x01)                */
#define ADC_ADCISR_EMPTY_Pos              (6UL)                     /*!< ADC ADCISR: EMPTY (Bit 6)                             */
#define ADC_ADCISR_EMPTY_Msk              (0x40UL)                  /*!< ADC ADCISR: EMPTY (Bitfield-Mask: 0x01)               */
#define ADC_ADCISR_AWD_Pos                (7UL)                     /*!< ADC ADCISR: AWD (Bit 7)                               */
#define ADC_ADCISR_AWD_Msk                (0x80UL)                  /*!< ADC ADCISR: AWD (Bitfield-Mask: 0x01)                 */
/* ========================================================  ADCIER  ========================================================= */
#define ADC_ADCIER_ADRDYIE_Pos            (0UL)                     /*!< ADC ADCIER: ADRDYIE (Bit 0)                           */
#define ADC_ADCIER_ADRDYIE_Msk            (0x1UL)                   /*!< ADC ADCIER: ADRDYIE (Bitfield-Mask: 0x01)             */
#define ADC_ADCIER_EOSMPIE_Pos            (1UL)                     /*!< ADC ADCIER: EOSMPIE (Bit 1)                           */
#define ADC_ADCIER_EOSMPIE_Msk            (0x2UL)                   /*!< ADC ADCIER: EOSMPIE (Bitfield-Mask: 0x01)             */
#define ADC_ADCIER_EOCIE_Pos              (2UL)                     /*!< ADC ADCIER: EOCIE (Bit 2)                             */
#define ADC_ADCIER_EOCIE_Msk              (0x4UL)                   /*!< ADC ADCIER: EOCIE (Bitfield-Mask: 0x01)               */
#define ADC_ADCIER_EOSEQIE_Pos            (3UL)                     /*!< ADC ADCIER: EOSEQIE (Bit 3)                           */
#define ADC_ADCIER_EOSEQIE_Msk            (0x8UL)                   /*!< ADC ADCIER: EOSEQIE (Bitfield-Mask: 0x01)             */
#define ADC_ADCIER_OVRIE_Pos              (4UL)                     /*!< ADC ADCIER: OVRIE (Bit 4)                             */
#define ADC_ADCIER_OVRIE_Msk              (0x10UL)                  /*!< ADC ADCIER: OVRIE (Bitfield-Mask: 0x01)               */
#define ADC_ADCIER_AWDIE_Pos              (7UL)                     /*!< ADC ADCIER: AWDIE (Bit 7)                             */
#define ADC_ADCIER_AWDIE_Msk              (0x80UL)                  /*!< ADC ADCIER: AWDIE (Bitfield-Mask: 0x01)               */
/* =========================================================  ADCCR  ========================================================= */
#define ADC_ADCCR_ADEN_Pos                (0UL)                     /*!< ADC ADCCR: ADEN (Bit 0)                               */
#define ADC_ADCCR_ADEN_Msk                (0x1UL)                   /*!< ADC ADCCR: ADEN (Bitfield-Mask: 0x01)                 */
#define ADC_ADCCR_ADDIS_Pos               (1UL)                     /*!< ADC ADCCR: ADDIS (Bit 1)                              */
#define ADC_ADCCR_ADDIS_Msk               (0x2UL)                   /*!< ADC ADCCR: ADDIS (Bitfield-Mask: 0x01)                */
#define ADC_ADCCR_ADSTART_Pos             (2UL)                     /*!< ADC ADCCR: ADSTART (Bit 2)                            */
#define ADC_ADCCR_ADSTART_Msk             (0x4UL)                   /*!< ADC ADCCR: ADSTART (Bitfield-Mask: 0x01)              */
#define ADC_ADCCR_ADSTP_Pos               (3UL)                     /*!< ADC ADCCR: ADSTP (Bit 3)                              */
#define ADC_ADCCR_ADSTP_Msk               (0x8UL)                   /*!< ADC ADCCR: ADSTP (Bitfield-Mask: 0x01)                */
/* =======================================================  ADCCFGR1  ======================================================== */
#define ADC_ADCCFGR1_DMAEN_Pos            (0UL)                     /*!< ADC ADCCFGR1: DMAEN (Bit 0)                           */
#define ADC_ADCCFGR1_DMAEN_Msk            (0x1UL)                   /*!< ADC ADCCFGR1: DMAEN (Bitfield-Mask: 0x01)             */
#define ADC_ADCCFGR1_RES_Pos              (8UL)                     /*!< ADC ADCCFGR1: RES (Bit 8)                             */
#define ADC_ADCCFGR1_RES_Msk              (0x300UL)                 /*!< ADC ADCCFGR1: RES (Bitfield-Mask: 0x03)               */
#define ADC_ADCCFGR1_ALIGN_Pos            (10UL)                    /*!< ADC ADCCFGR1: ALIGN (Bit 10)                          */
#define ADC_ADCCFGR1_ALIGN_Msk            (0x400UL)                 /*!< ADC ADCCFGR1: ALIGN (Bitfield-Mask: 0x01)             */
#define ADC_ADCCFGR1_TRIGMODE_Pos         (11UL)                    /*!< ADC ADCCFGR1: TRIGMODE (Bit 11)                       */
#define ADC_ADCCFGR1_TRIGMODE_Msk         (0x3800UL)                /*!< ADC ADCCFGR1: TRIGMODE (Bitfield-Mask: 0x07)          */
#define ADC_ADCCFGR1_TRIGSCR_Pos          (16UL)                    /*!< ADC ADCCFGR1: TRIGSCR (Bit 16)                        */
#define ADC_ADCCFGR1_TRIGSCR_Msk          (0x70000UL)               /*!< ADC ADCCFGR1: TRIGSCR (Bitfield-Mask: 0x07)           */
#define ADC_ADCCFGR1_CONT_Pos             (20UL)                    /*!< ADC ADCCFGR1: CONT (Bit 20)                           */
#define ADC_ADCCFGR1_CONT_Msk             (0x100000UL)              /*!< ADC ADCCFGR1: CONT (Bitfield-Mask: 0x01)              */
#define ADC_ADCCFGR1_WAIT_Pos             (21UL)                    /*!< ADC ADCCFGR1: WAIT (Bit 21)                           */
#define ADC_ADCCFGR1_WAIT_Msk             (0x200000UL)              /*!< ADC ADCCFGR1: WAIT (Bitfield-Mask: 0x01)              */
#define ADC_ADCCFGR1_AUTOFF_Pos           (22UL)                    /*!< ADC ADCCFGR1: AUTOFF (Bit 22)                         */
#define ADC_ADCCFGR1_AUTOFF_Msk           (0x400000UL)              /*!< ADC ADCCFGR1: AUTOFF (Bitfield-Mask: 0x01)            */
#define ADC_ADCCFGR1_DISCEN_Pos           (23UL)                    /*!< ADC ADCCFGR1: DISCEN (Bit 23)                         */
#define ADC_ADCCFGR1_DISCEN_Msk           (0x800000UL)              /*!< ADC ADCCFGR1: DISCEN (Bitfield-Mask: 0x01)            */
#define ADC_ADCCFGR1_SEQ_LEN_Pos          (24UL)                    /*!< ADC ADCCFGR1: SEQ_LEN (Bit 24)                        */
#define ADC_ADCCFGR1_SEQ_LEN_Msk          (0x7000000UL)             /*!< ADC ADCCFGR1: SEQ_LEN (Bitfield-Mask: 0x07)           */
#define ADC_ADCCFGR1_OVRMOD_Pos           (30UL)                    /*!< ADC ADCCFGR1: OVRMOD (Bit 30)                         */
#define ADC_ADCCFGR1_OVRMOD_Msk           (0x40000000UL)            /*!< ADC ADCCFGR1: OVRMOD (Bitfield-Mask: 0x01)            */
#define ADC_ADCCFGR1_DIFF_Pos             (31UL)                    /*!< ADC ADCCFGR1: DIFF (Bit 31)                           */
#define ADC_ADCCFGR1_DIFF_Msk             (0x80000000UL)            /*!< ADC ADCCFGR1: DIFF (Bitfield-Mask: 0x01)              */
/* =======================================================  ADCCFGR2  ======================================================== */
#define ADC_ADCCFGR2_STCNT_Pos            (0UL)                     /*!< ADC ADCCFGR2: STCNT (Bit 0)                           */
#define ADC_ADCCFGR2_STCNT_Msk            (0xffUL)                  /*!< ADC ADCCFGR2: STCNT (Bitfield-Mask: 0xff)             */
#define ADC_ADCCFGR2_QPR_Pos              (8UL)                     /*!< ADC ADCCFGR2: QPR (Bit 8)                             */
#define ADC_ADCCFGR2_QPR_Msk              (0xf00UL)                 /*!< ADC ADCCFGR2: QPR (Bitfield-Mask: 0x0f)               */
/* ========================================================  ADCSMPR  ======================================================== */
#define ADC_ADCSMPR_SMP_Pos               (0UL)                     /*!< ADC ADCSMPR: SMP (Bit 0)                              */
#define ADC_ADCSMPR_SMP_Msk               (0xffUL)                  /*!< ADC ADCSMPR: SMP (Bitfield-Mask: 0xff)                */
/* ========================================================  ADCWDG  ========================================================= */
#define ADC_ADCWDG_AWDCH_Pos              (0UL)                     /*!< ADC ADCWDG: AWDCH (Bit 0)                             */
#define ADC_ADCWDG_AWDCH_Msk              (0xfUL)                   /*!< ADC ADCWDG: AWDCH (Bitfield-Mask: 0x0f)               */
#define ADC_ADCWDG_AWDSGL_Pos             (6UL)                     /*!< ADC ADCWDG: AWDSGL (Bit 6)                            */
#define ADC_ADCWDG_AWDSGL_Msk             (0x40UL)                  /*!< ADC ADCWDG: AWDSGL (Bitfield-Mask: 0x01)              */
#define ADC_ADCWDG_AWDEN_Pos              (7UL)                     /*!< ADC ADCWDG: AWDEN (Bit 7)                             */
#define ADC_ADCWDG_AWDEN_Msk              (0x80UL)                  /*!< ADC ADCWDG: AWDEN (Bitfield-Mask: 0x01)               */
/* =========================================================  ADCTR  ========================================================= */
#define ADC_ADCTR_LT_Pos                  (0UL)                     /*!< ADC ADCTR: LT (Bit 0)                                 */
#define ADC_ADCTR_LT_Msk                  (0xfffUL)                 /*!< ADC ADCTR: LT (Bitfield-Mask: 0xfff)                  */
#define ADC_ADCTR_HT_Pos                  (16UL)                    /*!< ADC ADCTR: HT (Bit 16)                                */
#define ADC_ADCTR_HT_Msk                  (0xfff0000UL)             /*!< ADC ADCTR: HT (Bitfield-Mask: 0xfff)                  */
/* =====================================================  ADCCHSELR_CCW  ===================================================== */
#define ADC_ADCCHSELR_CCW_CCW_Pos         (0UL)                     /*!< ADC ADCCHSELR_CCW: CCW (Bit 0)                        */
#define ADC_ADCCHSELR_CCW_CCW_Msk         (0xfUL)                   /*!< ADC ADCCHSELR_CCW: CCW (Bitfield-Mask: 0x0f)          */
/* ========================================================  ADCFIFO  ======================================================== */
#define ADC_ADCFIFO_DATA_Pos              (0UL)                     /*!< ADC ADCFIFO: DATA (Bit 0)                             */
#define ADC_ADCFIFO_DATA_Msk              (0xffffUL)                /*!< ADC ADCFIFO: DATA (Bitfield-Mask: 0xffff)             */


/* =========================================================================================================================== */
/* ================                                            HRF                                            ================ */
/* =========================================================================================================================== */

/* ======================================================  BBP_CONTROL  ====================================================== */
#define HRF_BBP_CONTROL_POS_SMP_DELAY_Pos (24UL)                    /*!< HRF BBP_CONTROL: POS_SMP_DELAY (Bit 24)               */
#define HRF_BBP_CONTROL_POS_SMP_DELAY_Msk (0x3f000000UL)            /*!< HRF BBP_CONTROL: POS_SMP_DELAY (Bitfield-Mask: 0x3f)  */
#define HRF_BBP_CONTROL_NEG_SMP_DELAY_Pos (16UL)                    /*!< HRF BBP_CONTROL: NEG_SMP_DELAY (Bit 16)               */
#define HRF_BBP_CONTROL_NEG_SMP_DELAY_Msk (0x3f0000UL)              /*!< HRF BBP_CONTROL: NEG_SMP_DELAY (Bitfield-Mask: 0x3f)  */
#define HRF_BBP_CONTROL_OPTION_Pos        (13UL)                    /*!< HRF BBP_CONTROL: OPTION (Bit 13)                      */
#define HRF_BBP_CONTROL_OPTION_Msk        (0x6000UL)                /*!< HRF BBP_CONTROL: OPTION (Bitfield-Mask: 0x03)         */
#define HRF_BBP_CONTROL_HCLK_EN_Pos       (12UL)                    /*!< HRF BBP_CONTROL: HCLK_EN (Bit 12)                     */
#define HRF_BBP_CONTROL_HCLK_EN_Msk       (0x1000UL)                /*!< HRF BBP_CONTROL: HCLK_EN (Bitfield-Mask: 0x01)        */
#define HRF_BBP_CONTROL_FORCE_CLK_EN_Pos  (11UL)                    /*!< HRF BBP_CONTROL: FORCE_CLK_EN (Bit 11)                */
#define HRF_BBP_CONTROL_FORCE_CLK_EN_Msk  (0x800UL)                 /*!< HRF BBP_CONTROL: FORCE_CLK_EN (Bitfield-Mask: 0x01)   */
#define HRF_BBP_CONTROL_TX_IQ_SWAP_Pos    (10UL)                    /*!< HRF BBP_CONTROL: TX_IQ_SWAP (Bit 10)                  */
#define HRF_BBP_CONTROL_TX_IQ_SWAP_Msk    (0x400UL)                 /*!< HRF BBP_CONTROL: TX_IQ_SWAP (Bitfield-Mask: 0x01)     */
#define HRF_BBP_CONTROL_RX_IQ_SWAP_Pos    (9UL)                     /*!< HRF BBP_CONTROL: RX_IQ_SWAP (Bit 9)                   */
#define HRF_BBP_CONTROL_RX_IQ_SWAP_Msk    (0x200UL)                 /*!< HRF BBP_CONTROL: RX_IQ_SWAP (Bitfield-Mask: 0x01)     */
#define HRF_BBP_CONTROL_RX_OVERWRITE_MEM_EN_Pos (8UL)               /*!< HRF BBP_CONTROL: RX_OVERWRITE_MEM_EN (Bit 8)          */
#define HRF_BBP_CONTROL_RX_OVERWRITE_MEM_EN_Msk (0x100UL)           /*!< HRF BBP_CONTROL: RX_OVERWRITE_MEM_EN (Bitfield-Mask: 0x01) */
#define HRF_BBP_CONTROL_WDT_ENABLE_Pos    (7UL)                     /*!< HRF BBP_CONTROL: WDT_ENABLE (Bit 7)                   */
#define HRF_BBP_CONTROL_WDT_ENABLE_Msk    (0x80UL)                  /*!< HRF BBP_CONTROL: WDT_ENABLE (Bitfield-Mask: 0x01)     */
#define HRF_BBP_CONTROL_TX_HMASTLOCKEN_Pos (6UL)                    /*!< HRF BBP_CONTROL: TX_HMASTLOCKEN (Bit 6)               */
#define HRF_BBP_CONTROL_TX_HMASTLOCKEN_Msk (0x40UL)                 /*!< HRF BBP_CONTROL: TX_HMASTLOCKEN (Bitfield-Mask: 0x01) */
#define HRF_BBP_CONTROL_RX_HMASTLOCKEN_Pos (5UL)                    /*!< HRF BBP_CONTROL: RX_HMASTLOCKEN (Bit 5)               */
#define HRF_BBP_CONTROL_RX_HMASTLOCKEN_Msk (0x20UL)                 /*!< HRF BBP_CONTROL: RX_HMASTLOCKEN (Bitfield-Mask: 0x01) */
#define HRF_BBP_CONTROL_AUTO_GET_PSDU_PARAM_Pos (4UL)               /*!< HRF BBP_CONTROL: AUTO_GET_PSDU_PARAM (Bit 4)          */
#define HRF_BBP_CONTROL_AUTO_GET_PSDU_PARAM_Msk (0x10UL)            /*!< HRF BBP_CONTROL: AUTO_GET_PSDU_PARAM (Bitfield-Mask: 0x01) */
#define HRF_BBP_CONTROL_INI_LTF_Pos       (3UL)                     /*!< HRF BBP_CONTROL: INI_LTF (Bit 3)                      */
#define HRF_BBP_CONTROL_INI_LTF_Msk       (0x8UL)                   /*!< HRF BBP_CONTROL: INI_LTF (Bitfield-Mask: 0x01)        */
#define HRF_BBP_CONTROL_TX_IMME_START_Pos (2UL)                     /*!< HRF BBP_CONTROL: TX_IMME_START (Bit 2)                */
#define HRF_BBP_CONTROL_TX_IMME_START_Msk (0x4UL)                   /*!< HRF BBP_CONTROL: TX_IMME_START (Bitfield-Mask: 0x01)  */
#define HRF_BBP_CONTROL_SOFT_RST_REG_Pos  (1UL)                     /*!< HRF BBP_CONTROL: SOFT_RST_REG (Bit 1)                 */
#define HRF_BBP_CONTROL_SOFT_RST_REG_Msk  (0x2UL)                   /*!< HRF BBP_CONTROL: SOFT_RST_REG (Bitfield-Mask: 0x01)   */
#define HRF_BBP_CONTROL_HRF_ENABLE_Pos    (0UL)                     /*!< HRF BBP_CONTROL: HRF_ENABLE (Bit 0)                   */
#define HRF_BBP_CONTROL_HRF_ENABLE_Msk    (0x1UL)                   /*!< HRF BBP_CONTROL: HRF_ENABLE (Bitfield-Mask: 0x01)     */
/* =====================================================  BBP_CORR_CFG0  ===================================================== */
#define HRF_BBP_CORR_CFG0_CORR_PN_SEQ0_Pos (0UL)                    /*!< HRF BBP_CORR_CFG0: CORR_PN_SEQ0 (Bit 0)               */
#define HRF_BBP_CORR_CFG0_CORR_PN_SEQ0_Msk (0xffffffffUL)           /*!< HRF BBP_CORR_CFG0: CORR_PN_SEQ0 (Bitfield-Mask: 0xffffffff) */
/* =====================================================  BBP_CORR_CFG1  ===================================================== */
#define HRF_BBP_CORR_CFG1_CORR_MAX_THR_Pos (16UL)                   /*!< HRF BBP_CORR_CFG1: CORR_MAX_THR (Bit 16)              */
#define HRF_BBP_CORR_CFG1_CORR_MAX_THR_Msk (0xffff0000UL)           /*!< HRF BBP_CORR_CFG1: CORR_MAX_THR (Bitfield-Mask: 0xffff) */
#define HRF_BBP_CORR_CFG1_CORR_RSHFT_IN_Pos (12UL)                  /*!< HRF BBP_CORR_CFG1: CORR_RSHFT_IN (Bit 12)             */
#define HRF_BBP_CORR_CFG1_CORR_RSHFT_IN_Msk (0x7000UL)              /*!< HRF BBP_CORR_CFG1: CORR_RSHFT_IN (Bitfield-Mask: 0x07) */
#define HRF_BBP_CORR_CFG1_CORR_RSHFT_ACC_Pos (8UL)                  /*!< HRF BBP_CORR_CFG1: CORR_RSHFT_ACC (Bit 8)             */
#define HRF_BBP_CORR_CFG1_CORR_RSHFT_ACC_Msk (0x700UL)              /*!< HRF BBP_CORR_CFG1: CORR_RSHFT_ACC (Bitfield-Mask: 0x07) */
#define HRF_BBP_CORR_CFG1_CORR_PN_SEQ1_Pos (0UL)                    /*!< HRF BBP_CORR_CFG1: CORR_PN_SEQ1 (Bit 0)               */
#define HRF_BBP_CORR_CFG1_CORR_PN_SEQ1_Msk (0x7fUL)                 /*!< HRF BBP_CORR_CFG1: CORR_PN_SEQ1 (Bitfield-Mask: 0x7f) */
/* =====================================================  BBP_CORR_CFG2  ===================================================== */
#define HRF_BBP_CORR_CFG2_CORR_PK_OFFSET_Pos (24UL)                 /*!< HRF BBP_CORR_CFG2: CORR_PK_OFFSET (Bit 24)            */
#define HRF_BBP_CORR_CFG2_CORR_PK_OFFSET_Msk (0xff000000UL)         /*!< HRF BBP_CORR_CFG2: CORR_PK_OFFSET (Bitfield-Mask: 0xff) */
#define HRF_BBP_CORR_CFG2_CORR_SEG_LEN_Pos (17UL)                   /*!< HRF BBP_CORR_CFG2: CORR_SEG_LEN (Bit 17)              */
#define HRF_BBP_CORR_CFG2_CORR_SEG_LEN_Msk (0x60000UL)              /*!< HRF BBP_CORR_CFG2: CORR_SEG_LEN (Bitfield-Mask: 0x03) */
#define HRF_BBP_CORR_CFG2_CORR_DEBOUND_Pos (8UL)                    /*!< HRF BBP_CORR_CFG2: CORR_DEBOUND (Bit 8)               */
#define HRF_BBP_CORR_CFG2_CORR_DEBOUND_Msk (0x1ff00UL)              /*!< HRF BBP_CORR_CFG2: CORR_DEBOUND (Bitfield-Mask: 0x1ff) */
#define HRF_BBP_CORR_CFG2_LOCK_GAIN_ENABLE_Pos (7UL)                /*!< HRF BBP_CORR_CFG2: LOCK_GAIN_ENABLE (Bit 7)           */
#define HRF_BBP_CORR_CFG2_LOCK_GAIN_ENABLE_Msk (0x80UL)             /*!< HRF BBP_CORR_CFG2: LOCK_GAIN_ENABLE (Bitfield-Mask: 0x01) */
#define HRF_BBP_CORR_CFG2_CORR_ENABLE_Pos (6UL)                     /*!< HRF BBP_CORR_CFG2: CORR_ENABLE (Bit 6)                */
#define HRF_BBP_CORR_CFG2_CORR_ENABLE_Msk (0x40UL)                  /*!< HRF BBP_CORR_CFG2: CORR_ENABLE (Bitfield-Mask: 0x01)  */
#define HRF_BBP_CORR_CFG2_CORR_PN_LEN_Pos (0UL)                     /*!< HRF BBP_CORR_CFG2: CORR_PN_LEN (Bit 0)                */
#define HRF_BBP_CORR_CFG2_CORR_PN_LEN_Msk (0x3fUL)                  /*!< HRF BBP_CORR_CFG2: CORR_PN_LEN (Bitfield-Mask: 0x3f)  */
/* =====================================================  BBP_CORR_CFG3  ===================================================== */
#define HRF_BBP_CORR_CFG3_CORR_AMP_RATIO_Pos (24UL)                  /*!< HRF BBP_CORR_CFG3: CORR_AMP_RATIO (Bit 24)             */
#define HRF_BBP_CORR_CFG3_CORR_AMP_RATIO_Msk (0xff000000UL)          /*!< HRF BBP_CORR_CFG3: CORR_AMP_RATIO (Bitfield-Mask: 0xff) */
#define HRF_BBP_CORR_CFG3_CORR_AMP_ALPHA_Pos (16UL)                  /*!< HRF BBP_CORR_CFG3: CORR_AMP_ALPHA (Bit 16)             */
#define HRF_BBP_CORR_CFG3_CORR_AMP_ALPHA_Msk (0x70000UL)             /*!< HRF BBP_CORR_CFG3: CORR_AMP_ALPHA (Bitfield-Mask: 0x07) */
#define HRF_BBP_CORR_CFG3_CORR_MIN_THR_Pos (0UL)                    /*!< HRF BBP_CORR_CFG3: CORR_MIN_THR (Bit 0)               */
#define HRF_BBP_CORR_CFG3_CORR_MIN_THR_Msk (0xffffUL)               /*!< HRF BBP_CORR_CFG3: CORR_MIN_THR (Bitfield-Mask: 0xffff) */
/* =====================================================  BBP_FEC_CFG0  ====================================================== */
#define HRF_BBP_FEC_CFG0_NIBBLE_ROT_MODE_Pos (8UL)                  /*!< HRF BBP_FEC_CFG0: NIBBLE_ROT_MODE (Bit 8)             */
#define HRF_BBP_FEC_CFG0_NIBBLE_ROT_MODE_Msk (0x100UL)              /*!< HRF BBP_FEC_CFG0: NIBBLE_ROT_MODE (Bitfield-Mask: 0x01) */
#define HRF_BBP_FEC_CFG0_PUNCMODE_DIR_OPT_Pos (7UL)                 /*!< HRF BBP_FEC_CFG0: PUNCMODE_DIR_OPT (Bit 7)            */
#define HRF_BBP_FEC_CFG0_PUNCMODE_DIR_OPT_Msk (0x80UL)              /*!< HRF BBP_FEC_CFG0: PUNCMODE_DIR_OPT (Bitfield-Mask: 0x01) */
#define HRF_BBP_FEC_CFG0_DISABLE_PSDU_CRC_Pos (6UL)                 /*!< HRF BBP_FEC_CFG0: DISABLE_PSDU_CRC (Bit 6)            */
#define HRF_BBP_FEC_CFG0_DISABLE_PSDU_CRC_Msk (0x40UL)              /*!< HRF BBP_FEC_CFG0: DISABLE_PSDU_CRC (Bitfield-Mask: 0x01) */
#define HRF_BBP_FEC_CFG0_CRC_ERR_INSERT_Pos (4UL)                   /*!< HRF BBP_FEC_CFG0: CRC_ERR_INSERT (Bit 4)              */
#define HRF_BBP_FEC_CFG0_CRC_ERR_INSERT_Msk (0x30UL)                /*!< HRF BBP_FEC_CFG0: CRC_ERR_INSERT (Bitfield-Mask: 0x03) */
#define HRF_BBP_FEC_CFG0_TURBO_ITR_NUM_Pos (0UL)                    /*!< HRF BBP_FEC_CFG0: TURBO_ITR_NUM (Bit 0)               */
#define HRF_BBP_FEC_CFG0_TURBO_ITR_NUM_Msk (0xfUL)                  /*!< HRF BBP_FEC_CFG0: TURBO_ITR_NUM (Bitfield-Mask: 0x0f) */
/* ====================================================  BBP_PHY_PARAM0  ===================================================== */
#define HRF_BBP_PHY_PARAM0_TX_POST_ZEROS_CNT_Pos (24UL)             /*!< HRF BBP_PHY_PARAM0: TX_POST_ZEROS_CNT (Bit 24)        */
#define HRF_BBP_PHY_PARAM0_TX_POST_ZEROS_CNT_Msk (0xff000000UL)     /*!< HRF BBP_PHY_PARAM0: TX_POST_ZEROS_CNT (Bitfield-Mask: 0xff) */
#define HRF_BBP_PHY_PARAM0_TX_PRE_ZEROS_CNT_Pos (16UL)              /*!< HRF BBP_PHY_PARAM0: TX_PRE_ZEROS_CNT (Bit 16)         */
#define HRF_BBP_PHY_PARAM0_TX_PRE_ZEROS_CNT_Msk (0xff0000UL)        /*!< HRF BBP_PHY_PARAM0: TX_PRE_ZEROS_CNT (Bitfield-Mask: 0xff) */
#define HRF_BBP_PHY_PARAM0_STF_PN_Pos     (6UL)                     /*!< HRF BBP_PHY_PARAM0: STF_PN (Bit 6)                    */
#define HRF_BBP_PHY_PARAM0_STF_PN_Msk     (0xffc0UL)                /*!< HRF BBP_PHY_PARAM0: STF_PN (Bitfield-Mask: 0x3ff)     */
#define HRF_BBP_PHY_PARAM0_OFDM_POS_PRE_Pos (0UL)                   /*!< HRF BBP_PHY_PARAM0: OFDM_POS_PRE (Bit 0)              */
#define HRF_BBP_PHY_PARAM0_OFDM_POS_PRE_Msk (0x3fUL)                /*!< HRF BBP_PHY_PARAM0: OFDM_POS_PRE (Bitfield-Mask: 0x3f) */
/* ====================================================  BBP_PHY_PARAM1  ===================================================== */
#define HRF_BBP_PHY_PARAM1_TX_CLK_RATIO_Pos (16UL)                  /*!< HRF BBP_PHY_PARAM1: TX_CLK_RATIO (Bit 16)             */
#define HRF_BBP_PHY_PARAM1_TX_CLK_RATIO_Msk (0xff0000UL)            /*!< HRF BBP_PHY_PARAM1: TX_CLK_RATIO (Bitfield-Mask: 0xff) */
#define HRF_BBP_PHY_PARAM1_RX_CLK_RATIO_Pos (8UL)                   /*!< HRF BBP_PHY_PARAM1: RX_CLK_RATIO (Bit 8)              */
#define HRF_BBP_PHY_PARAM1_RX_CLK_RATIO_Msk (0xff00UL)              /*!< HRF BBP_PHY_PARAM1: RX_CLK_RATIO (Bitfield-Mask: 0xff) */
#define HRF_BBP_PHY_PARAM1_RX_MASK_CNT_Pos (0UL)                    /*!< HRF BBP_PHY_PARAM1: RX_MASK_CNT (Bit 0)               */
#define HRF_BBP_PHY_PARAM1_RX_MASK_CNT_Msk (0xffUL)                 /*!< HRF BBP_PHY_PARAM1: RX_MASK_CNT (Bitfield-Mask: 0xff) */
/* =======================================================  BIQ_CFG0  ======================================================== */
#define HRF_BIQ_CFG0_TX_ACF_ODSR_Pos      (26UL)                    /*!< HRF BIQ_CFG0: TX_ACF_ODSR (Bit 26)                    */
#define HRF_BIQ_CFG0_TX_ACF_ODSR_Msk      (0x4000000UL)             /*!< HRF BIQ_CFG0: TX_ACF_ODSR (Bitfield-Mask: 0x01)       */
#define HRF_BIQ_CFG0_TX_ACF_MOD_UP_Pos    (25UL)                    /*!< HRF BIQ_CFG0: TX_ACF_MOD_UP (Bit 25)                  */
#define HRF_BIQ_CFG0_TX_ACF_MOD_UP_Msk    (0x2000000UL)             /*!< HRF BIQ_CFG0: TX_ACF_MOD_UP (Bitfield-Mask: 0x01)     */
#define HRF_BIQ_CFG0_TX_ACF_ENABLE_Pos    (24UL)                    /*!< HRF BIQ_CFG0: TX_ACF_ENABLE (Bit 24)                  */
#define HRF_BIQ_CFG0_TX_ACF_ENABLE_Msk    (0x1000000UL)             /*!< HRF BIQ_CFG0: TX_ACF_ENABLE (Bitfield-Mask: 0x01)     */
#define HRF_BIQ_CFG0_TX_BIQ_BYPASS_Pos    (20UL)                    /*!< HRF BIQ_CFG0: TX_BIQ_BYPASS (Bit 20)                  */
#define HRF_BIQ_CFG0_TX_BIQ_BYPASS_Msk    (0xf00000UL)              /*!< HRF BIQ_CFG0: TX_BIQ_BYPASS (Bitfield-Mask: 0x0f)     */
#define HRF_BIQ_CFG0_TX_BIQ_SHFT_OPT_Pos  (16UL)                    /*!< HRF BIQ_CFG0: TX_BIQ_SHFT_OPT (Bit 16)                */
#define HRF_BIQ_CFG0_TX_BIQ_SHFT_OPT_Msk  (0xf0000UL)               /*!< HRF BIQ_CFG0: TX_BIQ_SHFT_OPT (Bitfield-Mask: 0x0f)   */
#define HRF_BIQ_CFG0_RX_ACF_ODSR_Pos      (10UL)                    /*!< HRF BIQ_CFG0: RX_ACF_ODSR (Bit 10)                    */
#define HRF_BIQ_CFG0_RX_ACF_ODSR_Msk      (0x400UL)                 /*!< HRF BIQ_CFG0: RX_ACF_ODSR (Bitfield-Mask: 0x01)       */
#define HRF_BIQ_CFG0_RX_ACF_MOD_UP_Pos    (9UL)                     /*!< HRF BIQ_CFG0: RX_ACF_MOD_UP (Bit 9)                   */
#define HRF_BIQ_CFG0_RX_ACF_MOD_UP_Msk    (0x200UL)                 /*!< HRF BIQ_CFG0: RX_ACF_MOD_UP (Bitfield-Mask: 0x01)     */
#define HRF_BIQ_CFG0_RX_ACF_ENABLE_Pos    (8UL)                     /*!< HRF BIQ_CFG0: RX_ACF_ENABLE (Bit 8)                   */
#define HRF_BIQ_CFG0_RX_ACF_ENABLE_Msk    (0x100UL)                 /*!< HRF BIQ_CFG0: RX_ACF_ENABLE (Bitfield-Mask: 0x01)     */
#define HRF_BIQ_CFG0_RX_BIQ_BYPASS_Pos    (4UL)                     /*!< HRF BIQ_CFG0: RX_BIQ_BYPASS (Bit 4)                   */
#define HRF_BIQ_CFG0_RX_BIQ_BYPASS_Msk    (0xf0UL)                  /*!< HRF BIQ_CFG0: RX_BIQ_BYPASS (Bitfield-Mask: 0x0f)     */
#define HRF_BIQ_CFG0_RX_BIQ_SHFT_OPT_Pos  (0UL)                     /*!< HRF BIQ_CFG0: RX_BIQ_SHFT_OPT (Bit 0)                 */
#define HRF_BIQ_CFG0_RX_BIQ_SHFT_OPT_Msk  (0xfUL)                   /*!< HRF BIQ_CFG0: RX_BIQ_SHFT_OPT (Bitfield-Mask: 0x0f)   */
/* =======================================================  BIQ_CFG1  ======================================================== */
#define HRF_BIQ_CFG1_RX_BIQ0_COEF0_Pos    (16UL)                    /*!< HRF BIQ_CFG1: RX_BIQ0_COEF0 (Bit 16)                  */
#define HRF_BIQ_CFG1_RX_BIQ0_COEF0_Msk    (0x3fff0000UL)            /*!< HRF BIQ_CFG1: RX_BIQ0_COEF0 (Bitfield-Mask: 0x3fff)   */
#define HRF_BIQ_CFG1_RX_BIQ0_COEF1_Pos    (0UL)                     /*!< HRF BIQ_CFG1: RX_BIQ0_COEF1 (Bit 0)                   */
#define HRF_BIQ_CFG1_RX_BIQ0_COEF1_Msk    (0x3fffUL)                /*!< HRF BIQ_CFG1: RX_BIQ0_COEF1 (Bitfield-Mask: 0x3fff)   */
/* =======================================================  BIQ_CFG2  ======================================================== */
#define HRF_BIQ_CFG2_RX_BIQ0_COEF2_Pos    (16UL)                    /*!< HRF BIQ_CFG2: RX_BIQ0_COEF2 (Bit 16)                  */
#define HRF_BIQ_CFG2_RX_BIQ0_COEF2_Msk    (0x3fff0000UL)            /*!< HRF BIQ_CFG2: RX_BIQ0_COEF2 (Bitfield-Mask: 0x3fff)   */
#define HRF_BIQ_CFG2_RX_BIQ0_COEF3_Pos    (0UL)                     /*!< HRF BIQ_CFG2: RX_BIQ0_COEF3 (Bit 0)                   */
#define HRF_BIQ_CFG2_RX_BIQ0_COEF3_Msk    (0x3fffUL)                /*!< HRF BIQ_CFG2: RX_BIQ0_COEF3 (Bitfield-Mask: 0x3fff)   */
/* =======================================================  BIQ_CFG3  ======================================================== */
#define HRF_BIQ_CFG3_RX_BIQ1_COEF0_Pos    (16UL)                    /*!< HRF BIQ_CFG3: RX_BIQ1_COEF0 (Bit 16)                  */
#define HRF_BIQ_CFG3_RX_BIQ1_COEF0_Msk    (0x3fff0000UL)            /*!< HRF BIQ_CFG3: RX_BIQ1_COEF0 (Bitfield-Mask: 0x3fff)   */
#define HRF_BIQ_CFG3_RX_BIQ1_COEF1_Pos    (0UL)                     /*!< HRF BIQ_CFG3: RX_BIQ1_COEF1 (Bit 0)                   */
#define HRF_BIQ_CFG3_RX_BIQ1_COEF1_Msk    (0x3fffUL)                /*!< HRF BIQ_CFG3: RX_BIQ1_COEF1 (Bitfield-Mask: 0x3fff)   */
/* =======================================================  BIQ_CFG4  ======================================================== */
#define HRF_BIQ_CFG4_RX_BIQ1_COEF2_Pos    (16UL)                    /*!< HRF BIQ_CFG4: RX_BIQ1_COEF2 (Bit 16)                  */
#define HRF_BIQ_CFG4_RX_BIQ1_COEF2_Msk    (0x3fff0000UL)            /*!< HRF BIQ_CFG4: RX_BIQ1_COEF2 (Bitfield-Mask: 0x3fff)   */
#define HRF_BIQ_CFG4_RX_BIQ1_COEF3_Pos    (0UL)                     /*!< HRF BIQ_CFG4: RX_BIQ1_COEF3 (Bit 0)                   */
#define HRF_BIQ_CFG4_RX_BIQ1_COEF3_Msk    (0x3fffUL)                /*!< HRF BIQ_CFG4: RX_BIQ1_COEF3 (Bitfield-Mask: 0x3fff)   */
/* =======================================================  BIQ_CFG5  ======================================================== */
#define HRF_BIQ_CFG5_RX_BIQ2_COEF0_Pos    (16UL)                    /*!< HRF BIQ_CFG5: RX_BIQ2_COEF0 (Bit 16)                  */
#define HRF_BIQ_CFG5_RX_BIQ2_COEF0_Msk    (0x3fff0000UL)            /*!< HRF BIQ_CFG5: RX_BIQ2_COEF0 (Bitfield-Mask: 0x3fff)   */
#define HRF_BIQ_CFG5_RX_BIQ2_COEF1_Pos    (0UL)                     /*!< HRF BIQ_CFG5: RX_BIQ2_COEF1 (Bit 0)                   */
#define HRF_BIQ_CFG5_RX_BIQ2_COEF1_Msk    (0x3fffUL)                /*!< HRF BIQ_CFG5: RX_BIQ2_COEF1 (Bitfield-Mask: 0x3fff)   */
/* =======================================================  BIQ_CFG6  ======================================================== */
#define HRF_BIQ_CFG6_RX_BIQ2_COEF2_Pos    (16UL)                    /*!< HRF BIQ_CFG6: RX_BIQ2_COEF2 (Bit 16)                  */
#define HRF_BIQ_CFG6_RX_BIQ2_COEF2_Msk    (0x3fff0000UL)            /*!< HRF BIQ_CFG6: RX_BIQ2_COEF2 (Bitfield-Mask: 0x3fff)   */
#define HRF_BIQ_CFG6_RX_BIQ2_COEF3_Pos    (0UL)                     /*!< HRF BIQ_CFG6: RX_BIQ2_COEF3 (Bit 0)                   */
#define HRF_BIQ_CFG6_RX_BIQ2_COEF3_Msk    (0x3fffUL)                /*!< HRF BIQ_CFG6: RX_BIQ2_COEF3 (Bitfield-Mask: 0x3fff)   */
/* =======================================================  BIQ_CFG7  ======================================================== */
#define HRF_BIQ_CFG7_RX_BIQ3_COEF0_Pos    (16UL)                    /*!< HRF BIQ_CFG7: RX_BIQ3_COEF0 (Bit 16)                  */
#define HRF_BIQ_CFG7_RX_BIQ3_COEF0_Msk    (0x3fff0000UL)            /*!< HRF BIQ_CFG7: RX_BIQ3_COEF0 (Bitfield-Mask: 0x3fff)   */
#define HRF_BIQ_CFG7_RX_BIQ3_COEF1_Pos    (0UL)                     /*!< HRF BIQ_CFG7: RX_BIQ3_COEF1 (Bit 0)                   */
#define HRF_BIQ_CFG7_RX_BIQ3_COEF1_Msk    (0x3fffUL)                /*!< HRF BIQ_CFG7: RX_BIQ3_COEF1 (Bitfield-Mask: 0x3fff)   */
/* =======================================================  BIQ_CFG8  ======================================================== */
#define HRF_BIQ_CFG8_RX_BIQ3_COEF2_Pos    (16UL)                    /*!< HRF BIQ_CFG8: RX_BIQ3_COEF2 (Bit 16)                  */
#define HRF_BIQ_CFG8_RX_BIQ3_COEF2_Msk    (0x3fff0000UL)            /*!< HRF BIQ_CFG8: RX_BIQ3_COEF2 (Bitfield-Mask: 0x3fff)   */
#define HRF_BIQ_CFG8_RX_BIQ3_COEF3_Pos    (0UL)                     /*!< HRF BIQ_CFG8: RX_BIQ3_COEF3 (Bit 0)                   */
#define HRF_BIQ_CFG8_RX_BIQ3_COEF3_Msk    (0x3fffUL)                /*!< HRF BIQ_CFG8: RX_BIQ3_COEF3 (Bitfield-Mask: 0x3fff)   */
/* ========================================================  CF_CFG0  ======================================================== */
#define HRF_CF_CFG0_CF0_LSHFT_Pos         (30UL)                    /*!< HRF CF_CFG0: CF0_LSHFT (Bit 30)                       */
#define HRF_CF_CFG0_CF0_LSHFT_Msk         (0xc0000000UL)            /*!< HRF CF_CFG0: CF0_LSHFT (Bitfield-Mask: 0x03)          */
#define HRF_CF_CFG0_CF0_A_Pos             (16UL)                    /*!< HRF CF_CFG0: CF0_A (Bit 16)                           */
#define HRF_CF_CFG0_CF0_A_Msk             (0x3fff0000UL)            /*!< HRF CF_CFG0: CF0_A (Bitfield-Mask: 0x3fff)            */
#define HRF_CF_CFG0_CF0_RSHFT_Pos         (14UL)                    /*!< HRF CF_CFG0: CF0_RSHFT (Bit 14)                       */
#define HRF_CF_CFG0_CF0_RSHFT_Msk         (0xc000UL)                /*!< HRF CF_CFG0: CF0_RSHFT (Bitfield-Mask: 0x03)          */
#define HRF_CF_CFG0_CF0_BC_Pos            (0UL)                     /*!< HRF CF_CFG0: CF0_BC (Bit 0)                           */
#define HRF_CF_CFG0_CF0_BC_Msk            (0x3fffUL)                /*!< HRF CF_CFG0: CF0_BC (Bitfield-Mask: 0x3fff)           */
/* ========================================================  CF_CFG1  ======================================================== */
#define HRF_CF_CFG1_CF_ENABLE_Pos         (30UL)                    /*!< HRF CF_CFG1: CF_ENABLE (Bit 30)                       */
#define HRF_CF_CFG1_CF_ENABLE_Msk         (0xc0000000UL)            /*!< HRF CF_CFG1: CF_ENABLE (Bitfield-Mask: 0x03)          */
#define HRF_CF_CFG1_CF1_BS_Pos            (16UL)                    /*!< HRF CF_CFG1: CF1_BS (Bit 16)                          */
#define HRF_CF_CFG1_CF1_BS_Msk            (0x3fff0000UL)            /*!< HRF CF_CFG1: CF1_BS (Bitfield-Mask: 0x3fff)           */
#define HRF_CF_CFG1_CF0_BS_Pos            (0UL)                     /*!< HRF CF_CFG1: CF0_BS (Bit 0)                           */
#define HRF_CF_CFG1_CF0_BS_Msk            (0x3fffUL)                /*!< HRF CF_CFG1: CF0_BS (Bitfield-Mask: 0x3fff)           */
/* ========================================================  CF_CFG2  ======================================================== */
#define HRF_CF_CFG2_CF1_LSHFT_Pos         (30UL)                    /*!< HRF CF_CFG2: CF1_LSHFT (Bit 30)                       */
#define HRF_CF_CFG2_CF1_LSHFT_Msk         (0xc0000000UL)            /*!< HRF CF_CFG2: CF1_LSHFT (Bitfield-Mask: 0x03)          */
#define HRF_CF_CFG2_CF1_A_Pos             (16UL)                    /*!< HRF CF_CFG2: CF1_A (Bit 16)                           */
#define HRF_CF_CFG2_CF1_A_Msk             (0x3fff0000UL)            /*!< HRF CF_CFG2: CF1_A (Bitfield-Mask: 0x3fff)            */
#define HRF_CF_CFG2_CF1_RSHFT_Pos         (14UL)                    /*!< HRF CF_CFG2: CF1_RSHFT (Bit 14)                       */
#define HRF_CF_CFG2_CF1_RSHFT_Msk         (0xc000UL)                /*!< HRF CF_CFG2: CF1_RSHFT (Bitfield-Mask: 0x03)          */
#define HRF_CF_CFG2_CF1_BC_Pos            (0UL)                     /*!< HRF CF_CFG2: CF1_BC (Bit 0)                           */
#define HRF_CF_CFG2_CF1_BC_Msk            (0x3fffUL)                /*!< HRF CF_CFG2: CF1_BC (Bitfield-Mask: 0x3fff)           */
/* =====================================================  BBP_TONEMASK  ====================================================== */
#define HRF_BBP_TONEMASK_TONE_MASK0_Pos   (0UL)                     /*!< HRF BBP_TONEMASK: TONE_MASK0 (Bit 0)                  */
#define HRF_BBP_TONEMASK_TONE_MASK0_Msk   (0xffffffffUL)            /*!< HRF BBP_TONEMASK: TONE_MASK0 (Bitfield-Mask: 0xffffffff) */
/* =====================================================  BBP_LTF_FREQ  ====================================================== */
#define HRF_BBP_LTF_FREQ_LTF_FREQ1_Pos    (0UL)                     /*!< HRF BBP_LTF_FREQ: LTF_FREQ1 (Bit 0)                   */
#define HRF_BBP_LTF_FREQ_LTF_FREQ1_Msk    (0xffffffffUL)            /*!< HRF BBP_LTF_FREQ: LTF_FREQ1 (Bitfield-Mask: 0xffffffff) */
/* =====================================================  BBP_STF_DATA  ====================================================== */
#define HRF_BBP_STF_DATA_STF_DATA0_Pos    (0UL)                     /*!< HRF BBP_STF_DATA: STF_DATA0 (Bit 0)                   */
#define HRF_BBP_STF_DATA_STF_DATA0_Msk    (0xffffffUL)              /*!< HRF BBP_STF_DATA: STF_DATA0 (Bitfield-Mask: 0xffffff) */
/* ====================================================  BBP_PILOT_TONE  ===================================================== */
#define HRF_BBP_PILOT_TONE_PILOT_TONE0_Pos (0UL)                    /*!< HRF BBP_PILOT_TONE: PILOT_TONE0 (Bit 0)               */
#define HRF_BBP_PILOT_TONE_PILOT_TONE0_Msk (0xffffffffUL)           /*!< HRF BBP_PILOT_TONE: PILOT_TONE0 (Bitfield-Mask: 0xffffffff) */
/* ========================================================  CT_CFG0  ======================================================== */
#define HRF_CT_CFG0_PHR_CT_AI_Pos         (16UL)                    /*!< HRF CT_CFG0: PHR_CT_AI (Bit 16)                       */
#define HRF_CT_CFG0_PHR_CT_AI_Msk         (0xfff0000UL)             /*!< HRF CT_CFG0: PHR_CT_AI (Bitfield-Mask: 0xfff)         */
#define HRF_CT_CFG0_PHR_CT_AL_Pos         (0UL)                     /*!< HRF CT_CFG0: PHR_CT_AL (Bit 0)                        */
#define HRF_CT_CFG0_PHR_CT_AL_Msk         (0xfffUL)                 /*!< HRF CT_CFG0: PHR_CT_AL (Bitfield-Mask: 0xfff)         */
/* ========================================================  CT_CFG1  ======================================================== */
#define HRF_CT_CFG1_PSDU_CT_AI_Pos        (16UL)                    /*!< HRF CT_CFG1: PSDU_CT_AI (Bit 16)                      */
#define HRF_CT_CFG1_PSDU_CT_AI_Msk        (0xfff0000UL)             /*!< HRF CT_CFG1: PSDU_CT_AI (Bitfield-Mask: 0xfff)        */
#define HRF_CT_CFG1_PSDU_CT_AL_Pos        (0UL)                     /*!< HRF CT_CFG1: PSDU_CT_AL (Bit 0)                       */
#define HRF_CT_CFG1_PSDU_CT_AL_Msk        (0xfffUL)                 /*!< HRF CT_CFG1: PSDU_CT_AL (Bitfield-Mask: 0xfff)        */
/* =====================================================  CFR_EDGE_CFG  ====================================================== */
#define HRF_CFR_EDGE_CFG_CFR_COEF_F0_1_Pos (16UL)                   /*!< HRF CFR_EDGE_CFG: CFR_COEF_F0_1 (Bit 16)              */
#define HRF_CFR_EDGE_CFG_CFR_COEF_F0_1_Msk (0xfff0000UL)            /*!< HRF CFR_EDGE_CFG: CFR_COEF_F0_1 (Bitfield-Mask: 0xfff) */
#define HRF_CFR_EDGE_CFG_CFR_COEF_F0_0_Pos (0UL)                    /*!< HRF CFR_EDGE_CFG: CFR_COEF_F0_0 (Bit 0)               */
#define HRF_CFR_EDGE_CFG_CFR_COEF_F0_0_Msk (0xfffUL)                /*!< HRF CFR_EDGE_CFG: CFR_COEF_F0_0 (Bitfield-Mask: 0xfff) */
/* ======================================================  BBP_SIG_MAP  ====================================================== */
#define HRF_BBP_SIG_MAP_SIG_MAP0_0_Pos    (0UL)                     /*!< HRF BBP_SIG_MAP: SIG_MAP0_0 (Bit 0)                   */
#define HRF_BBP_SIG_MAP_SIG_MAP0_0_Msk    (0xffffffffUL)            /*!< HRF BBP_SIG_MAP: SIG_MAP0_0 (Bitfield-Mask: 0xffffffff) */
/* =======================================================  GAD_CFG0  ======================================================== */
#define HRF_GAD_CFG0_GAD_REF_Pos          (16UL)                    /*!< HRF GAD_CFG0: GAD_REF (Bit 16)                        */
#define HRF_GAD_CFG0_GAD_REF_Msk          (0xffff0000UL)            /*!< HRF GAD_CFG0: GAD_REF (Bitfield-Mask: 0xffff)         */
#define HRF_GAD_CFG0_GAD_ERR_MU_Pos       (5UL)                     /*!< HRF GAD_CFG0: GAD_ERR_MU (Bit 5)                      */
#define HRF_GAD_CFG0_GAD_ERR_MU_Msk       (0xe0UL)                  /*!< HRF GAD_CFG0: GAD_ERR_MU (Bitfield-Mask: 0x07)        */
#define HRF_GAD_CFG0_GAD_MUA_Pos          (3UL)                     /*!< HRF GAD_CFG0: GAD_MUA (Bit 3)                         */
#define HRF_GAD_CFG0_GAD_MUA_Msk          (0x18UL)                  /*!< HRF GAD_CFG0: GAD_MUA (Bitfield-Mask: 0x03)           */
#define HRF_GAD_CFG0_GAD_CLP_EN_Pos       (2UL)                     /*!< HRF GAD_CFG0: GAD_CLP_EN (Bit 2)                      */
#define HRF_GAD_CFG0_GAD_CLP_EN_Msk       (0x4UL)                   /*!< HRF GAD_CFG0: GAD_CLP_EN (Bitfield-Mask: 0x01)        */
#define HRF_GAD_CFG0_GAD_BLK_EN_Pos       (1UL)                     /*!< HRF GAD_CFG0: GAD_BLK_EN (Bit 1)                      */
#define HRF_GAD_CFG0_GAD_BLK_EN_Msk       (0x2UL)                   /*!< HRF GAD_CFG0: GAD_BLK_EN (Bitfield-Mask: 0x01)        */
#define HRF_GAD_CFG0_GAD_ENABLE_Pos       (0UL)                     /*!< HRF GAD_CFG0: GAD_ENABLE (Bit 0)                      */
#define HRF_GAD_CFG0_GAD_ENABLE_Msk       (0x1UL)                   /*!< HRF GAD_CFG0: GAD_ENABLE (Bitfield-Mask: 0x01)        */
/* =======================================================  GAD_CFG1  ======================================================== */
#define HRF_GAD_CFG1_GAD_TH_CLP_Pos       (16UL)                    /*!< HRF GAD_CFG1: GAD_TH_CLP (Bit 16)                     */
#define HRF_GAD_CFG1_GAD_TH_CLP_Msk       (0xffff0000UL)            /*!< HRF GAD_CFG1: GAD_TH_CLP (Bitfield-Mask: 0xffff)      */
#define HRF_GAD_CFG1_GAD_TH_BLK_Pos       (0UL)                     /*!< HRF GAD_CFG1: GAD_TH_BLK (Bit 0)                      */
#define HRF_GAD_CFG1_GAD_TH_BLK_Msk       (0xffffUL)                /*!< HRF GAD_CFG1: GAD_TH_BLK (Bitfield-Mask: 0xffff)      */
/* =======================================================  GAD_CFG2  ======================================================== */
#define HRF_GAD_CFG2_FORCE_GAD_GAIN_Pos   (16UL)                    /*!< HRF GAD_CFG2: FORCE_GAD_GAIN (Bit 16)                 */
#define HRF_GAD_CFG2_FORCE_GAD_GAIN_Msk   (0x10000UL)               /*!< HRF GAD_CFG2: FORCE_GAD_GAIN (Bitfield-Mask: 0x01)    */
#define HRF_GAD_CFG2_GAD_CFG_GAIN_Pos     (0UL)                     /*!< HRF GAD_CFG2: GAD_CFG_GAIN (Bit 0)                    */
#define HRF_GAD_CFG2_GAD_CFG_GAIN_Msk     (0xffffUL)                /*!< HRF GAD_CFG2: GAD_CFG_GAIN (Bitfield-Mask: 0xffff)    */
/* =======================================================  GAD_GAIN  ======================================================== */
#define HRF_GAD_GAIN_GAD_GAIN_Pos         (0UL)                     /*!< HRF GAD_GAIN: GAD_GAIN (Bit 0)                        */
#define HRF_GAD_GAIN_GAD_GAIN_Msk         (0xffffffUL)              /*!< HRF GAD_GAIN: GAD_GAIN (Bitfield-Mask: 0xffffff)      */
/* =======================================================  CFOC_CFG0  ======================================================= */
#define HRF_CFOC_CFG0_CFOC_ENABLE_Pos     (31UL)                    /*!< HRF CFOC_CFG0: CFOC_ENABLE (Bit 31)                   */
#define HRF_CFOC_CFG0_CFOC_ENABLE_Msk     (0x80000000UL)            /*!< HRF CFOC_CFG0: CFOC_ENABLE (Bitfield-Mask: 0x01)      */
#define HRF_CFOC_CFG0_CFOC_FCW_Pos        (0UL)                     /*!< HRF CFOC_CFG0: CFOC_FCW (Bit 0)                       */
#define HRF_CFOC_CFG0_CFOC_FCW_Msk        (0xffffffUL)              /*!< HRF CFOC_CFG0: CFOC_FCW (Bitfield-Mask: 0xffffff)     */
/* ========================================================  HF_CFG0  ======================================================== */
#define HRF_HF_CFG0_TX_HF_UP_MODE_Pos     (14UL)                    /*!< HRF HF_CFG0: TX_HF_UP_MODE (Bit 14)                   */
#define HRF_HF_CFG0_TX_HF_UP_MODE_Msk     (0x4000UL)                /*!< HRF HF_CFG0: TX_HF_UP_MODE (Bitfield-Mask: 0x01)      */
#define HRF_HF_CFG0_TX_HF_UP_IST_POS_Pos  (9UL)                     /*!< HRF HF_CFG0: TX_HF_UP_IST_POS (Bit 9)                 */
#define HRF_HF_CFG0_TX_HF_UP_IST_POS_Msk  (0x3e00UL)                /*!< HRF HF_CFG0: TX_HF_UP_IST_POS (Bitfield-Mask: 0x1f)   */
#define HRF_HF_CFG0_TX_HF_ENABLE_Pos      (8UL)                     /*!< HRF HF_CFG0: TX_HF_ENABLE (Bit 8)                     */
#define HRF_HF_CFG0_TX_HF_ENABLE_Msk      (0x100UL)                 /*!< HRF HF_CFG0: TX_HF_ENABLE (Bitfield-Mask: 0x01)       */
#define HRF_HF_CFG0_RX_HF_UP_MODE_Pos     (6UL)                     /*!< HRF HF_CFG0: RX_HF_UP_MODE (Bit 6)                    */
#define HRF_HF_CFG0_RX_HF_UP_MODE_Msk     (0x40UL)                  /*!< HRF HF_CFG0: RX_HF_UP_MODE (Bitfield-Mask: 0x01)      */
#define HRF_HF_CFG0_RX_HF_UP_IST_POS_Pos  (1UL)                     /*!< HRF HF_CFG0: RX_HF_UP_IST_POS (Bit 1)                 */
#define HRF_HF_CFG0_RX_HF_UP_IST_POS_Msk  (0x3eUL)                  /*!< HRF HF_CFG0: RX_HF_UP_IST_POS (Bitfield-Mask: 0x1f)   */
#define HRF_HF_CFG0_RX_HF_ENABLE_Pos      (0UL)                     /*!< HRF HF_CFG0: RX_HF_ENABLE (Bit 0)                     */
#define HRF_HF_CFG0_RX_HF_ENABLE_Msk      (0x1UL)                   /*!< HRF HF_CFG0: RX_HF_ENABLE (Bitfield-Mask: 0x01)       */
/* ========================================================  HF_CFG1  ======================================================== */
#define HRF_HF_CFG1_RX_HF_COEF1_Pos       (16UL)                    /*!< HRF HF_CFG1: RX_HF_COEF1 (Bit 16)                     */
#define HRF_HF_CFG1_RX_HF_COEF1_Msk       (0x3fff0000UL)            /*!< HRF HF_CFG1: RX_HF_COEF1 (Bitfield-Mask: 0x3fff)      */
#define HRF_HF_CFG1_RX_HF_COEF0_Pos       (0UL)                     /*!< HRF HF_CFG1: RX_HF_COEF0 (Bit 0)                      */
#define HRF_HF_CFG1_RX_HF_COEF0_Msk       (0x3fffUL)                /*!< HRF HF_CFG1: RX_HF_COEF0 (Bitfield-Mask: 0x3fff)      */
/* ========================================================  HF_CFG2  ======================================================== */
#define HRF_HF_CFG2_RX_HF_COEF3_Pos       (16UL)                    /*!< HRF HF_CFG2: RX_HF_COEF3 (Bit 16)                     */
#define HRF_HF_CFG2_RX_HF_COEF3_Msk       (0x3fff0000UL)            /*!< HRF HF_CFG2: RX_HF_COEF3 (Bitfield-Mask: 0x3fff)      */
#define HRF_HF_CFG2_RX_HF_COEF2_Pos       (0UL)                     /*!< HRF HF_CFG2: RX_HF_COEF2 (Bit 0)                      */
#define HRF_HF_CFG2_RX_HF_COEF2_Msk       (0x3fffUL)                /*!< HRF HF_CFG2: RX_HF_COEF2 (Bitfield-Mask: 0x3fff)      */
/* ========================================================  HF_CFG3  ======================================================== */
#define HRF_HF_CFG3_RX_HF_COEF5_Pos       (16UL)                    /*!< HRF HF_CFG3: RX_HF_COEF5 (Bit 16)                     */
#define HRF_HF_CFG3_RX_HF_COEF5_Msk       (0x3fff0000UL)            /*!< HRF HF_CFG3: RX_HF_COEF5 (Bitfield-Mask: 0x3fff)      */
#define HRF_HF_CFG3_RX_HF_COEF4_Pos       (0UL)                     /*!< HRF HF_CFG3: RX_HF_COEF4 (Bit 0)                      */
#define HRF_HF_CFG3_RX_HF_COEF4_Msk       (0x3fffUL)                /*!< HRF HF_CFG3: RX_HF_COEF4 (Bitfield-Mask: 0x3fff)      */
/* ========================================================  HF_CFG4  ======================================================== */
#define HRF_HF_CFG4_RX_HF_COEF6_Pos       (0UL)                     /*!< HRF HF_CFG4: RX_HF_COEF6 (Bit 0)                      */
#define HRF_HF_CFG4_RX_HF_COEF6_Msk       (0x3fffUL)                /*!< HRF HF_CFG4: RX_HF_COEF6 (Bitfield-Mask: 0x3fff)      */
/* =======================================================  SRC_CFG0  ======================================================== */
#define HRF_SRC_CFG0_TX_USE_CONST_SFO_Pos (3UL)                     /*!< HRF SRC_CFG0: TX_USE_CONST_SFO (Bit 3)                */
#define HRF_SRC_CFG0_TX_USE_CONST_SFO_Msk (0x8UL)                   /*!< HRF SRC_CFG0: TX_USE_CONST_SFO (Bitfield-Mask: 0x01)  */
#define HRF_SRC_CFG0_RX_USE_CONST_SFO_Pos (2UL)                     /*!< HRF SRC_CFG0: RX_USE_CONST_SFO (Bit 2)                */
#define HRF_SRC_CFG0_RX_USE_CONST_SFO_Msk (0x4UL)                   /*!< HRF SRC_CFG0: RX_USE_CONST_SFO (Bitfield-Mask: 0x01)  */
#define HRF_SRC_CFG0_TX_SRC_ENABLE_Pos    (1UL)                     /*!< HRF SRC_CFG0: TX_SRC_ENABLE (Bit 1)                   */
#define HRF_SRC_CFG0_TX_SRC_ENABLE_Msk    (0x2UL)                   /*!< HRF SRC_CFG0: TX_SRC_ENABLE (Bitfield-Mask: 0x01)     */
#define HRF_SRC_CFG0_RX_SRC_ENABLE_Pos    (0UL)                     /*!< HRF SRC_CFG0: RX_SRC_ENABLE (Bit 0)                   */
#define HRF_SRC_CFG0_RX_SRC_ENABLE_Msk    (0x1UL)                   /*!< HRF SRC_CFG0: RX_SRC_ENABLE (Bitfield-Mask: 0x01)     */
/* =======================================================  SRC_CFG1  ======================================================== */
#define HRF_SRC_CFG1_TX_CONST_SFO_Pos     (0UL)                     /*!< HRF SRC_CFG1: TX_CONST_SFO (Bit 0)                    */
#define HRF_SRC_CFG1_TX_CONST_SFO_Msk     (0xffffffUL)              /*!< HRF SRC_CFG1: TX_CONST_SFO (Bitfield-Mask: 0xffffff)  */
/* =======================================================  SRC_CFG2  ======================================================== */
#define HRF_SRC_CFG2_RX_CONST_SFO_Pos     (0UL)                     /*!< HRF SRC_CFG2: RX_CONST_SFO (Bit 0)                    */
#define HRF_SRC_CFG2_RX_CONST_SFO_Msk     (0xffffffUL)              /*!< HRF SRC_CFG2: RX_CONST_SFO (Bitfield-Mask: 0xffffff)  */
/* ======================================================  FI_FQ_CFG0  ======================================================= */
#define HRF_FI_FQ_CFG0_FQ_RSHFT_Pos       (28UL)                    /*!< HRF FI_FQ_CFG0: FQ_RSHFT (Bit 28)                     */
#define HRF_FI_FQ_CFG0_FQ_RSHFT_Msk       (0x70000000UL)            /*!< HRF FI_FQ_CFG0: FQ_RSHFT (Bitfield-Mask: 0x07)        */
#define HRF_FI_FQ_CFG0_PILOT_UPD_MU_Pos   (16UL)                    /*!< HRF FI_FQ_CFG0: PILOT_UPD_MU (Bit 16)                 */
#define HRF_FI_FQ_CFG0_PILOT_UPD_MU_Msk   (0xfff0000UL)             /*!< HRF FI_FQ_CFG0: PILOT_UPD_MU (Bitfield-Mask: 0xfff)   */
#define HRF_FI_FQ_CFG0_LR_SHFT_Pos        (12UL)                    /*!< HRF FI_FQ_CFG0: LR_SHFT (Bit 12)                      */
#define HRF_FI_FQ_CFG0_LR_SHFT_Msk        (0x7000UL)                /*!< HRF FI_FQ_CFG0: LR_SHFT (Bitfield-Mask: 0x07)         */
#define HRF_FI_FQ_CFG0_PILOT_UPP_MU_Pos   (0UL)                     /*!< HRF FI_FQ_CFG0: PILOT_UPP_MU (Bit 0)                  */
#define HRF_FI_FQ_CFG0_PILOT_UPP_MU_Msk   (0xfffUL)                 /*!< HRF FI_FQ_CFG0: PILOT_UPP_MU (Bitfield-Mask: 0xfff)   */
/* =======================================================  CSO_CFG0  ======================================================== */
#define HRF_CSO_CFG0_CSO_ICO_OFFSET_VALID_Pos (24UL)                /*!< HRF CSO_CFG0: CSO_ICO_OFFSET_VALID (Bit 24)           */
#define HRF_CSO_CFG0_CSO_ICO_OFFSET_VALID_Msk (0x7f000000UL)        /*!< HRF CSO_CFG0: CSO_ICO_OFFSET_VALID (Bitfield-Mask: 0x7f) */
#define HRF_CSO_CFG0_CSO_RSHFT_Pos        (16UL)                    /*!< HRF CSO_CFG0: CSO_RSHFT (Bit 16)                      */
#define HRF_CSO_CFG0_CSO_RSHFT_Msk        (0x70000UL)               /*!< HRF CSO_CFG0: CSO_RSHFT (Bitfield-Mask: 0x07)         */
#define HRF_CSO_CFG0_CSO_RATE_Pos         (0UL)                     /*!< HRF CSO_CFG0: CSO_RATE (Bit 0)                        */
#define HRF_CSO_CFG0_CSO_RATE_Msk         (0x3fffUL)                /*!< HRF CSO_CFG0: CSO_RATE (Bitfield-Mask: 0x3fff)        */
/* ======================================================  BBP_STATUS  ======================================================= */
#define HRF_BBP_STATUS_CPU_GET_PHR_END_Pos (16UL)                   /*!< HRF BBP_STATUS: CPU_GET_PHR_END (Bit 16)              */
#define HRF_BBP_STATUS_CPU_GET_PHR_END_Msk (0x10000UL)              /*!< HRF BBP_STATUS: CPU_GET_PHR_END (Bitfield-Mask: 0x01) */
#define HRF_BBP_STATUS_FRAMESYNCED_Pos    (13UL)                    /*!< HRF BBP_STATUS: FRAMESYNCED (Bit 13)                  */
#define HRF_BBP_STATUS_FRAMESYNCED_Msk    (0x2000UL)                /*!< HRF BBP_STATUS: FRAMESYNCED (Bitfield-Mask: 0x01)     */
#define HRF_BBP_STATUS_TX_NTB_BUSY_Pos    (10UL)                    /*!< HRF BBP_STATUS: TX_NTB_BUSY (Bit 10)                  */
#define HRF_BBP_STATUS_TX_NTB_BUSY_Msk    (0x400UL)                 /*!< HRF BBP_STATUS: TX_NTB_BUSY (Bitfield-Mask: 0x01)     */
#define HRF_BBP_STATUS_TX_IMME_BUSY_Pos   (9UL)                     /*!< HRF BBP_STATUS: TX_IMME_BUSY (Bit 9)                  */
#define HRF_BBP_STATUS_TX_IMME_BUSY_Msk   (0x200UL)                 /*!< HRF BBP_STATUS: TX_IMME_BUSY (Bitfield-Mask: 0x01)    */
#define HRF_BBP_STATUS_TX_BUSY_Pos        (8UL)                     /*!< HRF BBP_STATUS: TX_BUSY (Bit 8)                       */
#define HRF_BBP_STATUS_TX_BUSY_Msk        (0x100UL)                 /*!< HRF BBP_STATUS: TX_BUSY (Bitfield-Mask: 0x01)         */
#define HRF_BBP_STATUS_RX_PSDU_CRC_RES_Pos (2UL)                    /*!< HRF BBP_STATUS: RX_PSDU_CRC_RES (Bit 2)               */
#define HRF_BBP_STATUS_RX_PSDU_CRC_RES_Msk (0x4UL)                  /*!< HRF BBP_STATUS: RX_PSDU_CRC_RES (Bitfield-Mask: 0x01) */
#define HRF_BBP_STATUS_RX_PHR_CRC_RES_Pos (1UL)                     /*!< HRF BBP_STATUS: RX_PHR_CRC_RES (Bit 1)                */
#define HRF_BBP_STATUS_RX_PHR_CRC_RES_Msk (0x2UL)                   /*!< HRF BBP_STATUS: RX_PHR_CRC_RES (Bitfield-Mask: 0x01)  */
#define HRF_BBP_STATUS_TX_RX_MODE_Pos     (0UL)                     /*!< HRF BBP_STATUS: TX_RX_MODE (Bit 0)                    */
#define HRF_BBP_STATUS_TX_RX_MODE_Msk     (0x1UL)                   /*!< HRF BBP_STATUS: TX_RX_MODE (Bitfield-Mask: 0x01)      */
/* =======================================================  BBP_FLAG  ======================================================== */
#define HRF_BBP_FLAG_RX_SYM_BIT_COLLISION_FLAG_Pos (24UL)           /*!< HRF BBP_FLAG: RX_SYM_BIT_COLLISION_FLAG (Bit 24)      */
#define HRF_BBP_FLAG_RX_SYM_BIT_COLLISION_FLAG_Msk (0x1000000UL)    /*!< HRF BBP_FLAG: RX_SYM_BIT_COLLISION_FLAG (Bitfield-Mask: 0x01) */
#define HRF_BBP_FLAG_TX_FAIL_FLAG_Pos     (19UL)                    /*!< HRF BBP_FLAG: TX_FAIL_FLAG (Bit 19)                   */
#define HRF_BBP_FLAG_TX_FAIL_FLAG_Msk     (0x80000UL)               /*!< HRF BBP_FLAG: TX_FAIL_FLAG (Bitfield-Mask: 0x01)      */
#define HRF_BBP_FLAG_TX_RX_COLLISION_FLAG_Pos (18UL)                /*!< HRF BBP_FLAG: TX_RX_COLLISION_FLAG (Bit 18)           */
#define HRF_BBP_FLAG_TX_RX_COLLISION_FLAG_Msk (0x40000UL)           /*!< HRF BBP_FLAG: TX_RX_COLLISION_FLAG (Bitfield-Mask: 0x01) */
#define HRF_BBP_FLAG_RX_OVERFLOW_FLAG_Pos (17UL)                    /*!< HRF BBP_FLAG: RX_OVERFLOW_FLAG (Bit 17)               */
#define HRF_BBP_FLAG_RX_OVERFLOW_FLAG_Msk (0x20000UL)               /*!< HRF BBP_FLAG: RX_OVERFLOW_FLAG (Bitfield-Mask: 0x01)  */
#define HRF_BBP_FLAG_TX_DMA_DONE_FLAG_Pos (16UL)                    /*!< HRF BBP_FLAG: TX_DMA_DONE_FLAG (Bit 16)               */
#define HRF_BBP_FLAG_TX_DMA_DONE_FLAG_Msk (0x10000UL)               /*!< HRF BBP_FLAG: TX_DMA_DONE_FLAG (Bitfield-Mask: 0x01)  */
#define HRF_BBP_FLAG_RX_FRAMESYNCED_RISE_FLAG_Pos (10UL)            /*!< HRF BBP_FLAG: RX_FRAMESYNCED_RISE_FLAG (Bit 10)       */
#define HRF_BBP_FLAG_RX_FRAMESYNCED_RISE_FLAG_Msk (0x400UL)         /*!< HRF BBP_FLAG: RX_FRAMESYNCED_RISE_FLAG (Bitfield-Mask: 0x01) */
#define HRF_BBP_FLAG_INI_LTF_DONE_FLAG_Pos (8UL)                    /*!< HRF BBP_FLAG: INI_LTF_DONE_FLAG (Bit 8)               */
#define HRF_BBP_FLAG_INI_LTF_DONE_FLAG_Msk (0x100UL)                /*!< HRF BBP_FLAG: INI_LTF_DONE_FLAG (Bitfield-Mask: 0x01) */
#define HRF_BBP_FLAG_RX_PSDU_END_FLAG_Pos (3UL)                     /*!< HRF BBP_FLAG: RX_PSDU_END_FLAG (Bit 3)                */
#define HRF_BBP_FLAG_RX_PSDU_END_FLAG_Msk (0x8UL)                   /*!< HRF BBP_FLAG: RX_PSDU_END_FLAG (Bitfield-Mask: 0x01)  */
#define HRF_BBP_FLAG_RX_PHR_END_FLAG_Pos  (2UL)                     /*!< HRF BBP_FLAG: RX_PHR_END_FLAG (Bit 2)                 */
#define HRF_BBP_FLAG_RX_PHR_END_FLAG_Msk  (0x4UL)                   /*!< HRF BBP_FLAG: RX_PHR_END_FLAG (Bitfield-Mask: 0x01)   */
#define HRF_BBP_FLAG_RX_END_FLAG_Pos      (1UL)                     /*!< HRF BBP_FLAG: RX_END_FLAG (Bit 1)                     */
#define HRF_BBP_FLAG_RX_END_FLAG_Msk      (0x2UL)                   /*!< HRF BBP_FLAG: RX_END_FLAG (Bitfield-Mask: 0x01)       */
#define HRF_BBP_FLAG_TX_END_FLAG_Pos      (0UL)                     /*!< HRF BBP_FLAG: TX_END_FLAG (Bit 0)                     */
#define HRF_BBP_FLAG_TX_END_FLAG_Msk      (0x1UL)                   /*!< HRF BBP_FLAG: TX_END_FLAG (Bitfield-Mask: 0x01)       */
/* ======================================================  BBP_INT_EN  ======================================================= */
#define HRF_BBP_INT_EN_RX_FRAMESYNCED_WAKE_EN_Pos (29UL)            /*!< HRF BBP_INT_EN: RX_FRAMESYNCED_WAKE_EN (Bit 29)       */
#define HRF_BBP_INT_EN_RX_FRAMESYNCED_WAKE_EN_Msk (0x20000000UL)    /*!< HRF BBP_INT_EN: RX_FRAMESYNCED_WAKE_EN (Bitfield-Mask: 0x01) */
#define HRF_BBP_INT_EN_RX_SYM_BIT_COLLISION_INT_EN_Pos (24UL)       /*!< HRF BBP_INT_EN: RX_SYM_BIT_COLLISION_INT_EN (Bit 24)  */
#define HRF_BBP_INT_EN_RX_SYM_BIT_COLLISION_INT_EN_Msk (0x1000000UL) /*!< HRF BBP_INT_EN: RX_SYM_BIT_COLLISION_INT_EN (Bitfield-Mask: 0x01) */
#define HRF_BBP_INT_EN_TX_FAIL_INT_EN_Pos (19UL)                    /*!< HRF BBP_INT_EN: TX_FAIL_INT_EN (Bit 19)               */
#define HRF_BBP_INT_EN_TX_FAIL_INT_EN_Msk (0x80000UL)               /*!< HRF BBP_INT_EN: TX_FAIL_INT_EN (Bitfield-Mask: 0x01)  */
#define HRF_BBP_INT_EN_TX_RX_COLLISION_INT_EN_Pos (18UL)            /*!< HRF BBP_INT_EN: TX_RX_COLLISION_INT_EN (Bit 18)       */
#define HRF_BBP_INT_EN_TX_RX_COLLISION_INT_EN_Msk (0x40000UL)       /*!< HRF BBP_INT_EN: TX_RX_COLLISION_INT_EN (Bitfield-Mask: 0x01) */
#define HRF_BBP_INT_EN_RX_OVERFLOW_INT_EN_Pos (17UL)                /*!< HRF BBP_INT_EN: RX_OVERFLOW_INT_EN (Bit 17)           */
#define HRF_BBP_INT_EN_RX_OVERFLOW_INT_EN_Msk (0x20000UL)           /*!< HRF BBP_INT_EN: RX_OVERFLOW_INT_EN (Bitfield-Mask: 0x01) */
#define HRF_BBP_INT_EN_TX_DMA_DONE_INT_EN_Pos (16UL)                /*!< HRF BBP_INT_EN: TX_DMA_DONE_INT_EN (Bit 16)           */
#define HRF_BBP_INT_EN_TX_DMA_DONE_INT_EN_Msk (0x10000UL)           /*!< HRF BBP_INT_EN: TX_DMA_DONE_INT_EN (Bitfield-Mask: 0x01) */
#define HRF_BBP_INT_EN_RX_FRAMESYNCED_RISE_INT_EN_Pos (10UL)        /*!< HRF BBP_INT_EN: RX_FRAMESYNCED_RISE_INT_EN (Bit 10)   */
#define HRF_BBP_INT_EN_RX_FRAMESYNCED_RISE_INT_EN_Msk (0x400UL)     /*!< HRF BBP_INT_EN: RX_FRAMESYNCED_RISE_INT_EN (Bitfield-Mask: 0x01) */
#define HRF_BBP_INT_EN_INI_LTF_DONE_INT_EN_Pos (8UL)                /*!< HRF BBP_INT_EN: INI_LTF_DONE_INT_EN (Bit 8)           */
#define HRF_BBP_INT_EN_INI_LTF_DONE_INT_EN_Msk (0x100UL)            /*!< HRF BBP_INT_EN: INI_LTF_DONE_INT_EN (Bitfield-Mask: 0x01) */
#define HRF_BBP_INT_EN_RX_PSDU_END_INT_EN_Pos (3UL)                 /*!< HRF BBP_INT_EN: RX_PSDU_END_INT_EN (Bit 3)            */
#define HRF_BBP_INT_EN_RX_PSDU_END_INT_EN_Msk (0x8UL)               /*!< HRF BBP_INT_EN: RX_PSDU_END_INT_EN (Bitfield-Mask: 0x01) */
#define HRF_BBP_INT_EN_RX_PHR_END_INT_EN_Pos (2UL)                  /*!< HRF BBP_INT_EN: RX_PHR_END_INT_EN (Bit 2)             */
#define HRF_BBP_INT_EN_RX_PHR_END_INT_EN_Msk (0x4UL)                /*!< HRF BBP_INT_EN: RX_PHR_END_INT_EN (Bitfield-Mask: 0x01) */
#define HRF_BBP_INT_EN_RX_END_INT_EN_Pos  (1UL)                     /*!< HRF BBP_INT_EN: RX_END_INT_EN (Bit 1)                 */
#define HRF_BBP_INT_EN_RX_END_INT_EN_Msk  (0x2UL)                   /*!< HRF BBP_INT_EN: RX_END_INT_EN (Bitfield-Mask: 0x01)   */
#define HRF_BBP_INT_EN_TX_END_INT_EN_Pos  (0UL)                     /*!< HRF BBP_INT_EN: TX_END_INT_EN (Bit 0)                 */
#define HRF_BBP_INT_EN_TX_END_INT_EN_Msk  (0x1UL)                   /*!< HRF BBP_INT_EN: TX_END_INT_EN (Bitfield-Mask: 0x01)   */
/* =====================================================  BBP_TX_PARAM  ====================================================== */
#define HRF_BBP_TX_PARAM_TX_PSDU_MCS_Pos  (12UL)                    /*!< HRF BBP_TX_PARAM: TX_PSDU_MCS (Bit 12)                */
#define HRF_BBP_TX_PARAM_TX_PSDU_MCS_Msk  (0x7000UL)                /*!< HRF BBP_TX_PARAM: TX_PSDU_MCS (Bitfield-Mask: 0x07)   */
#define HRF_BBP_TX_PARAM_TX_PBSIZE_INDEX_Pos (8UL)                  /*!< HRF BBP_TX_PARAM: TX_PBSIZE_INDEX (Bit 8)             */
#define HRF_BBP_TX_PARAM_TX_PBSIZE_INDEX_Msk (0x700UL)              /*!< HRF BBP_TX_PARAM: TX_PBSIZE_INDEX (Bitfield-Mask: 0x07) */
#define HRF_BBP_TX_PARAM_TX_PBNUM_Pos     (4UL)                     /*!< HRF BBP_TX_PARAM: TX_PBNUM (Bit 4)                    */
#define HRF_BBP_TX_PARAM_TX_PBNUM_Msk     (0x70UL)                  /*!< HRF BBP_TX_PARAM: TX_PBNUM (Bitfield-Mask: 0x07)      */
#define HRF_BBP_TX_PARAM_TX_PHR_MCS_Pos   (0UL)                     /*!< HRF BBP_TX_PARAM: TX_PHR_MCS (Bit 0)                  */
#define HRF_BBP_TX_PARAM_TX_PHR_MCS_Msk   (0x7UL)                   /*!< HRF BBP_TX_PARAM: TX_PHR_MCS (Bitfield-Mask: 0x07)    */
/* =====================================================  BBP_RX_PARAM  ====================================================== */
#define HRF_BBP_RX_PARAM_RX_PSDU_MCS_Pos  (12UL)                    /*!< HRF BBP_RX_PARAM: RX_PSDU_MCS (Bit 12)                */
#define HRF_BBP_RX_PARAM_RX_PSDU_MCS_Msk  (0x7000UL)                /*!< HRF BBP_RX_PARAM: RX_PSDU_MCS (Bitfield-Mask: 0x07)   */
#define HRF_BBP_RX_PARAM_RX_PBSIZE_INDEX_Pos (8UL)                  /*!< HRF BBP_RX_PARAM: RX_PBSIZE_INDEX (Bit 8)             */
#define HRF_BBP_RX_PARAM_RX_PBSIZE_INDEX_Msk (0x700UL)              /*!< HRF BBP_RX_PARAM: RX_PBSIZE_INDEX (Bitfield-Mask: 0x07) */
#define HRF_BBP_RX_PARAM_RX_PBNUM_Pos     (4UL)                     /*!< HRF BBP_RX_PARAM: RX_PBNUM (Bit 4)                    */
#define HRF_BBP_RX_PARAM_RX_PBNUM_Msk     (0x70UL)                  /*!< HRF BBP_RX_PARAM: RX_PBNUM (Bitfield-Mask: 0x07)      */
#define HRF_BBP_RX_PARAM_RX_PHR_MCS_Pos   (0UL)                     /*!< HRF BBP_RX_PARAM: RX_PHR_MCS (Bit 0)                  */
#define HRF_BBP_RX_PARAM_RX_PHR_MCS_Msk   (0x7UL)                   /*!< HRF BBP_RX_PARAM: RX_PHR_MCS (Bitfield-Mask: 0x07)    */
/* ===================================================  BBP_RX_BASE_ADDR  ==================================================== */
#define HRF_BBP_RX_BASE_ADDR_RX_BASE_ADDR_Pos (0UL)                 /*!< HRF BBP_RX_BASE_ADDR: RX_BASE_ADDR (Bit 0)            */
#define HRF_BBP_RX_BASE_ADDR_RX_BASE_ADDR_Msk (0xffffffffUL)        /*!< HRF BBP_RX_BASE_ADDR: RX_BASE_ADDR (Bitfield-Mask: 0xffffffff) */
/* ===================================================  BBP_TX_BASE_ADDR  ==================================================== */
#define HRF_BBP_TX_BASE_ADDR_TX_BASE_ADDR_Pos (0UL)                 /*!< HRF BBP_TX_BASE_ADDR: TX_BASE_ADDR (Bit 0)            */
#define HRF_BBP_TX_BASE_ADDR_TX_BASE_ADDR_Msk (0xffffffffUL)        /*!< HRF BBP_TX_BASE_ADDR: TX_BASE_ADDR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  ENCRYPT0  ======================================================== */
#define HRF_ENCRYPT0_ENCRYPT_CODE0_Pos    (0UL)                     /*!< HRF ENCRYPT0: ENCRYPT_CODE0 (Bit 0)                   */
#define HRF_ENCRYPT0_ENCRYPT_CODE0_Msk    (0xffffffffUL)            /*!< HRF ENCRYPT0: ENCRYPT_CODE0 (Bitfield-Mask: 0xffffffff) */
/* =======================================================  ENCRYPT1  ======================================================== */
#define HRF_ENCRYPT1_ENCRYPT_CODE1_Pos    (0UL)                     /*!< HRF ENCRYPT1: ENCRYPT_CODE1 (Bit 0)                   */
#define HRF_ENCRYPT1_ENCRYPT_CODE1_Msk    (0xffffffffUL)            /*!< HRF ENCRYPT1: ENCRYPT_CODE1 (Bitfield-Mask: 0xffffffff) */
/* =======================================================  RXWDTCFG  ======================================================== */
#define HRF_RXWDTCFG_WDT_TIMEOUT_THR_Pos  (0UL)                     /*!< HRF RXWDTCFG: WDT_TIMEOUT_THR (Bit 0)                 */
#define HRF_RXWDTCFG_WDT_TIMEOUT_THR_Msk  (0xffffffffUL)            /*!< HRF RXWDTCFG: WDT_TIMEOUT_THR (Bitfield-Mask: 0xffffffff) */
/* ========================================================  SIG_PWR  ======================================================== */
#define HRF_SIG_PWR_SIG_POW_Pos           (0UL)                     /*!< HRF SIG_PWR: SIG_POW (Bit 0)                          */
#define HRF_SIG_PWR_SIG_POW_Msk           (0xffffffffUL)            /*!< HRF SIG_PWR: SIG_POW (Bitfield-Mask: 0xffffffff)      */
/* =======================================================  NOISE_PWR  ======================================================= */
#define HRF_NOISE_PWR_NOS_POW_Pos         (0UL)                     /*!< HRF NOISE_PWR: NOS_POW (Bit 0)                        */
#define HRF_NOISE_PWR_NOS_POW_Msk         (0xffffffffUL)            /*!< HRF NOISE_PWR: NOS_POW (Bitfield-Mask: 0xffffffff)    */
/* =======================================================  FSM_STATE  ======================================================= */
#define HRF_FSM_STATE_FI_FQ_CS_Pos        (21UL)                    /*!< HRF FSM_STATE: FI_FQ_CS (Bit 21)                      */
#define HRF_FSM_STATE_FI_FQ_CS_Msk        (0xe00000UL)              /*!< HRF FSM_STATE: FI_FQ_CS (Bitfield-Mask: 0x07)         */
#define HRF_FSM_STATE_TX_CTR_CS_Pos       (16UL)                    /*!< HRF FSM_STATE: TX_CTR_CS (Bit 16)                     */
#define HRF_FSM_STATE_TX_CTR_CS_Msk       (0x1f0000UL)              /*!< HRF FSM_STATE: TX_CTR_CS (Bitfield-Mask: 0x1f)        */
#define HRF_FSM_STATE_TURBO_DEC_CS_Pos    (12UL)                    /*!< HRF FSM_STATE: TURBO_DEC_CS (Bit 12)                  */
#define HRF_FSM_STATE_TURBO_DEC_CS_Msk    (0xf000UL)                /*!< HRF FSM_STATE: TURBO_DEC_CS (Bitfield-Mask: 0x0f)     */
#define HRF_FSM_STATE_RX_CTR_CS_Pos       (8UL)                     /*!< HRF FSM_STATE: RX_CTR_CS (Bit 8)                      */
#define HRF_FSM_STATE_RX_CTR_CS_Msk       (0x700UL)                 /*!< HRF FSM_STATE: RX_CTR_CS (Bitfield-Mask: 0x07)        */
#define HRF_FSM_STATE_CHE_CS_Pos          (4UL)                     /*!< HRF FSM_STATE: CHE_CS (Bit 4)                         */
#define HRF_FSM_STATE_CHE_CS_Msk          (0xf0UL)                  /*!< HRF FSM_STATE: CHE_CS (Bitfield-Mask: 0x0f)           */
#define HRF_FSM_STATE_COPIER_CS_Pos       (0UL)                     /*!< HRF FSM_STATE: COPIER_CS (Bit 0)                      */
#define HRF_FSM_STATE_COPIER_CS_Msk       (0xfUL)                   /*!< HRF FSM_STATE: COPIER_CS (Bitfield-Mask: 0x0f)        */
/* =====================================================  LTF_FFT_COEFF  ===================================================== */
#define HRF_LTF_FFT_COEFF_LTF_FFT_COEFF_Pos (0UL)                   /*!< HRF LTF_FFT_COEFF: LTF_FFT_COEFF (Bit 0)              */
#define HRF_LTF_FFT_COEFF_LTF_FFT_COEFF_Msk (0x3fffUL)              /*!< HRF LTF_FFT_COEFF: LTF_FFT_COEFF (Bitfield-Mask: 0x3fff) */
/* ====================================================  LTF_IFFT_COEFF  ===================================================== */
#define HRF_LTF_IFFT_COEFF_LTF_IFFT_COEFF_Pos (0UL)                 /*!< HRF LTF_IFFT_COEFF: LTF_IFFT_COEFF (Bit 0)            */
#define HRF_LTF_IFFT_COEFF_LTF_IFFT_COEFF_Msk (0x3fffUL)            /*!< HRF LTF_IFFT_COEFF: LTF_IFFT_COEFF (Bitfield-Mask: 0x3fff) */
/* =====================================================  RX_FFT_COEFF  ====================================================== */
#define HRF_RX_FFT_COEFF_RX_FFT_COEFF_Pos (0UL)                     /*!< HRF RX_FFT_COEFF: RX_FFT_COEFF (Bit 0)                */
#define HRF_RX_FFT_COEFF_RX_FFT_COEFF_Msk (0x3fffUL)                /*!< HRF RX_FFT_COEFF: RX_FFT_COEFF (Bitfield-Mask: 0x3fff) */
/* =====================================================  TX_IFFT_COEFF  ===================================================== */
#define HRF_TX_IFFT_COEFF_TX_IFFT_COEFF_Pos (0UL)                   /*!< HRF TX_IFFT_COEFF: TX_IFFT_COEFF (Bit 0)              */
#define HRF_TX_IFFT_COEFF_TX_IFFT_COEFF_Msk (0x3fffUL)              /*!< HRF TX_IFFT_COEFF: TX_IFFT_COEFF (Bitfield-Mask: 0x3fff) */
/* =====================================================  FI_FLT00_COEF  ===================================================== */
#define HRF_FI_FLT00_COEF_FI_F00_COEF1_Pos (16UL)                   /*!< HRF FI_FLT00_COEF: FI_F00_COEF1 (Bit 16)              */
#define HRF_FI_FLT00_COEF_FI_F00_COEF1_Msk (0xfff0000UL)            /*!< HRF FI_FLT00_COEF: FI_F00_COEF1 (Bitfield-Mask: 0xfff) */
#define HRF_FI_FLT00_COEF_FI_F00_COEF0_Pos (0UL)                    /*!< HRF FI_FLT00_COEF: FI_F00_COEF0 (Bit 0)               */
#define HRF_FI_FLT00_COEF_FI_F00_COEF0_Msk (0xfffUL)                /*!< HRF FI_FLT00_COEF: FI_F00_COEF0 (Bitfield-Mask: 0xfff) */
/* =====================================================  FI_FLT10_COEF  ===================================================== */
#define HRF_FI_FLT10_COEF_FI_F10_COEF1_Pos (16UL)                   /*!< HRF FI_FLT10_COEF: FI_F10_COEF1 (Bit 16)              */
#define HRF_FI_FLT10_COEF_FI_F10_COEF1_Msk (0xfff0000UL)            /*!< HRF FI_FLT10_COEF: FI_F10_COEF1 (Bitfield-Mask: 0xfff) */
#define HRF_FI_FLT10_COEF_FI_F10_COEF0_Pos (0UL)                    /*!< HRF FI_FLT10_COEF: FI_F10_COEF0 (Bit 0)               */
#define HRF_FI_FLT10_COEF_FI_F10_COEF0_Msk (0xfffUL)                /*!< HRF FI_FLT10_COEF: FI_F10_COEF0 (Bitfield-Mask: 0xfff) */
/* =====================================================  FI_FLT20_COEF  ===================================================== */
#define HRF_FI_FLT20_COEF_FI_F20_COEF1_Pos (16UL)                   /*!< HRF FI_FLT20_COEF: FI_F20_COEF1 (Bit 16)              */
#define HRF_FI_FLT20_COEF_FI_F20_COEF1_Msk (0xfff0000UL)            /*!< HRF FI_FLT20_COEF: FI_F20_COEF1 (Bitfield-Mask: 0xfff) */
#define HRF_FI_FLT20_COEF_FI_F20_COEF0_Pos (0UL)                    /*!< HRF FI_FLT20_COEF: FI_F20_COEF0 (Bit 0)               */
#define HRF_FI_FLT20_COEF_FI_F20_COEF0_Msk (0xfffUL)                /*!< HRF FI_FLT20_COEF: FI_F20_COEF0 (Bitfield-Mask: 0xfff) */
/* =====================================================  RX_CFO_OFFSET  ===================================================== */
#define HRF_RX_CFO_OFFSET_ICO_Pos         (24UL)                    /*!< HRF RX_CFO_OFFSET: ICO (Bit 24)                       */
#define HRF_RX_CFO_OFFSET_ICO_Msk         (0x1f000000UL)            /*!< HRF RX_CFO_OFFSET: ICO (Bitfield-Mask: 0x1f)          */
#define HRF_RX_CFO_OFFSET_CORR_CFO_OFFSET_Pos (0UL)                 /*!< HRF RX_CFO_OFFSET: CORR_CFO_OFFSET (Bit 0)            */
#define HRF_RX_CFO_OFFSET_CORR_CFO_OFFSET_Msk (0xfffffUL)           /*!< HRF RX_CFO_OFFSET: CORR_CFO_OFFSET (Bitfield-Mask: 0xfffff) */
/* ========================================================  CO_TOT  ========================================================= */
#define HRF_CO_TOT_CO_TOT_Pos             (0UL)                     /*!< HRF CO_TOT: CO_TOT (Bit 0)                            */
#define HRF_CO_TOT_CO_TOT_Msk             (0xffffffUL)              /*!< HRF CO_TOT: CO_TOT (Bitfield-Mask: 0xffffff)          */
/* ========================================================  HF_CFG5  ======================================================== */
#define HRF_HF_CFG5_TX_HF_COEF1_Pos       (16UL)                    /*!< HRF HF_CFG5: TX_HF_COEF1 (Bit 16)                     */
#define HRF_HF_CFG5_TX_HF_COEF1_Msk       (0x3fff0000UL)            /*!< HRF HF_CFG5: TX_HF_COEF1 (Bitfield-Mask: 0x3fff)      */
#define HRF_HF_CFG5_TX_HF_COEF0_Pos       (0UL)                     /*!< HRF HF_CFG5: TX_HF_COEF0 (Bit 0)                      */
#define HRF_HF_CFG5_TX_HF_COEF0_Msk       (0x3fffUL)                /*!< HRF HF_CFG5: TX_HF_COEF0 (Bitfield-Mask: 0x3fff)      */
/* ========================================================  HF_CFG6  ======================================================== */
#define HRF_HF_CFG6_TX_HF_COEF3_Pos       (16UL)                    /*!< HRF HF_CFG6: TX_HF_COEF3 (Bit 16)                     */
#define HRF_HF_CFG6_TX_HF_COEF3_Msk       (0x3fff0000UL)            /*!< HRF HF_CFG6: TX_HF_COEF3 (Bitfield-Mask: 0x3fff)      */
#define HRF_HF_CFG6_TX_HF_COEF2_Pos       (0UL)                     /*!< HRF HF_CFG6: TX_HF_COEF2 (Bit 0)                      */
#define HRF_HF_CFG6_TX_HF_COEF2_Msk       (0x3fffUL)                /*!< HRF HF_CFG6: TX_HF_COEF2 (Bitfield-Mask: 0x3fff)      */
/* ========================================================  HF_CFG7  ======================================================== */
#define HRF_HF_CFG7_TX_HF_COEF5_Pos       (16UL)                    /*!< HRF HF_CFG7: TX_HF_COEF5 (Bit 16)                     */
#define HRF_HF_CFG7_TX_HF_COEF5_Msk       (0x3fff0000UL)            /*!< HRF HF_CFG7: TX_HF_COEF5 (Bitfield-Mask: 0x3fff)      */
#define HRF_HF_CFG7_TX_HF_COEF4_Pos       (0UL)                     /*!< HRF HF_CFG7: TX_HF_COEF4 (Bit 0)                      */
#define HRF_HF_CFG7_TX_HF_COEF4_Msk       (0x3fffUL)                /*!< HRF HF_CFG7: TX_HF_COEF4 (Bitfield-Mask: 0x3fff)      */
/* ========================================================  HF_CFG8  ======================================================== */
#define HRF_HF_CFG8_TX_HF_COEF6_Pos       (0UL)                     /*!< HRF HF_CFG8: TX_HF_COEF6 (Bit 0)                      */
#define HRF_HF_CFG8_TX_HF_COEF6_Msk       (0x3fffUL)                /*!< HRF HF_CFG8: TX_HF_COEF6 (Bitfield-Mask: 0x3fff)      */
/* =======================================================  BIQ_CFG9  ======================================================== */
#define HRF_BIQ_CFG9_TX_BIQ0_COEF0_Pos    (16UL)                    /*!< HRF BIQ_CFG9: TX_BIQ0_COEF0 (Bit 16)                  */
#define HRF_BIQ_CFG9_TX_BIQ0_COEF0_Msk    (0x3fff0000UL)            /*!< HRF BIQ_CFG9: TX_BIQ0_COEF0 (Bitfield-Mask: 0x3fff)   */
#define HRF_BIQ_CFG9_TX_BIQ0_COEF1_Pos    (0UL)                     /*!< HRF BIQ_CFG9: TX_BIQ0_COEF1 (Bit 0)                   */
#define HRF_BIQ_CFG9_TX_BIQ0_COEF1_Msk    (0x3fffUL)                /*!< HRF BIQ_CFG9: TX_BIQ0_COEF1 (Bitfield-Mask: 0x3fff)   */
/* =======================================================  BIQ_CFG10  ======================================================= */
#define HRF_BIQ_CFG10_TX_BIQ0_COEF2_Pos   (16UL)                    /*!< HRF BIQ_CFG10: TX_BIQ0_COEF2 (Bit 16)                 */
#define HRF_BIQ_CFG10_TX_BIQ0_COEF2_Msk   (0x3fff0000UL)            /*!< HRF BIQ_CFG10: TX_BIQ0_COEF2 (Bitfield-Mask: 0x3fff)  */
#define HRF_BIQ_CFG10_TX_BIQ0_COEF3_Pos   (0UL)                     /*!< HRF BIQ_CFG10: TX_BIQ0_COEF3 (Bit 0)                  */
#define HRF_BIQ_CFG10_TX_BIQ0_COEF3_Msk   (0x3fffUL)                /*!< HRF BIQ_CFG10: TX_BIQ0_COEF3 (Bitfield-Mask: 0x3fff)  */
/* =======================================================  BIQ_CFG11  ======================================================= */
#define HRF_BIQ_CFG11_TX_BIQ1_COEF0_Pos   (16UL)                    /*!< HRF BIQ_CFG11: TX_BIQ1_COEF0 (Bit 16)                 */
#define HRF_BIQ_CFG11_TX_BIQ1_COEF0_Msk   (0x3fff0000UL)            /*!< HRF BIQ_CFG11: TX_BIQ1_COEF0 (Bitfield-Mask: 0x3fff)  */
#define HRF_BIQ_CFG11_TX_BIQ1_COEF1_Pos   (0UL)                     /*!< HRF BIQ_CFG11: TX_BIQ1_COEF1 (Bit 0)                  */
#define HRF_BIQ_CFG11_TX_BIQ1_COEF1_Msk   (0x3fffUL)                /*!< HRF BIQ_CFG11: TX_BIQ1_COEF1 (Bitfield-Mask: 0x3fff)  */
/* =======================================================  BIQ_CFG12  ======================================================= */
#define HRF_BIQ_CFG12_TX_BIQ1_COEF2_Pos   (16UL)                    /*!< HRF BIQ_CFG12: TX_BIQ1_COEF2 (Bit 16)                 */
#define HRF_BIQ_CFG12_TX_BIQ1_COEF2_Msk   (0x3fff0000UL)            /*!< HRF BIQ_CFG12: TX_BIQ1_COEF2 (Bitfield-Mask: 0x3fff)  */
#define HRF_BIQ_CFG12_TX_BIQ1_COEF3_Pos   (0UL)                     /*!< HRF BIQ_CFG12: TX_BIQ1_COEF3 (Bit 0)                  */
#define HRF_BIQ_CFG12_TX_BIQ1_COEF3_Msk   (0x3fffUL)                /*!< HRF BIQ_CFG12: TX_BIQ1_COEF3 (Bitfield-Mask: 0x3fff)  */
/* =======================================================  BIQ_CFG13  ======================================================= */
#define HRF_BIQ_CFG13_TX_BIQ2_COEF0_Pos   (16UL)                    /*!< HRF BIQ_CFG13: TX_BIQ2_COEF0 (Bit 16)                 */
#define HRF_BIQ_CFG13_TX_BIQ2_COEF0_Msk   (0x3fff0000UL)            /*!< HRF BIQ_CFG13: TX_BIQ2_COEF0 (Bitfield-Mask: 0x3fff)  */
#define HRF_BIQ_CFG13_TX_BIQ2_COEF1_Pos   (0UL)                     /*!< HRF BIQ_CFG13: TX_BIQ2_COEF1 (Bit 0)                  */
#define HRF_BIQ_CFG13_TX_BIQ2_COEF1_Msk   (0x3fffUL)                /*!< HRF BIQ_CFG13: TX_BIQ2_COEF1 (Bitfield-Mask: 0x3fff)  */
/* =======================================================  BIQ_CFG14  ======================================================= */
#define HRF_BIQ_CFG14_TX_BIQ2_COEF2_Pos   (16UL)                    /*!< HRF BIQ_CFG14: TX_BIQ2_COEF2 (Bit 16)                 */
#define HRF_BIQ_CFG14_TX_BIQ2_COEF2_Msk   (0x3fff0000UL)            /*!< HRF BIQ_CFG14: TX_BIQ2_COEF2 (Bitfield-Mask: 0x3fff)  */
#define HRF_BIQ_CFG14_TX_BIQ2_COEF3_Pos   (0UL)                     /*!< HRF BIQ_CFG14: TX_BIQ2_COEF3 (Bit 0)                  */
#define HRF_BIQ_CFG14_TX_BIQ2_COEF3_Msk   (0x3fffUL)                /*!< HRF BIQ_CFG14: TX_BIQ2_COEF3 (Bitfield-Mask: 0x3fff)  */
/* =======================================================  BIQ_CFG15  ======================================================= */
#define HRF_BIQ_CFG15_TX_BIQ3_COEF0_Pos   (16UL)                    /*!< HRF BIQ_CFG15: TX_BIQ3_COEF0 (Bit 16)                 */
#define HRF_BIQ_CFG15_TX_BIQ3_COEF0_Msk   (0x3fff0000UL)            /*!< HRF BIQ_CFG15: TX_BIQ3_COEF0 (Bitfield-Mask: 0x3fff)  */
#define HRF_BIQ_CFG15_TX_BIQ3_COEF1_Pos   (0UL)                     /*!< HRF BIQ_CFG15: TX_BIQ3_COEF1 (Bit 0)                  */
#define HRF_BIQ_CFG15_TX_BIQ3_COEF1_Msk   (0x3fffUL)                /*!< HRF BIQ_CFG15: TX_BIQ3_COEF1 (Bitfield-Mask: 0x3fff)  */
/* =======================================================  BIQ_CFG16  ======================================================= */
#define HRF_BIQ_CFG16_TX_BIQ3_COEF2_Pos   (16UL)                    /*!< HRF BIQ_CFG16: TX_BIQ3_COEF2 (Bit 16)                 */
#define HRF_BIQ_CFG16_TX_BIQ3_COEF2_Msk   (0x3fff0000UL)            /*!< HRF BIQ_CFG16: TX_BIQ3_COEF2 (Bitfield-Mask: 0x3fff)  */
#define HRF_BIQ_CFG16_TX_BIQ3_COEF3_Pos   (0UL)                     /*!< HRF BIQ_CFG16: TX_BIQ3_COEF3 (Bit 0)                  */
#define HRF_BIQ_CFG16_TX_BIQ3_COEF3_Msk   (0x3fffUL)                /*!< HRF BIQ_CFG16: TX_BIQ3_COEF3 (Bitfield-Mask: 0x3fff)  */


/* =========================================================================================================================== */
/* ================                                           BPLC                                            ================ */
/* =========================================================================================================================== */

/* ====================================================  PHY_ATTRIBUTE0  ===================================================== */
#define BPLC_PHY_ATTRIBUTE0_MRC_ENABLE_Pos (28UL)                   /*!< BPLC PHY_ATTRIBUTE0: MRC_ENABLE (Bit 28)              */
#define BPLC_PHY_ATTRIBUTE0_MRC_ENABLE_Msk (0x10000000UL)           /*!< BPLC PHY_ATTRIBUTE0: MRC_ENABLE (Bitfield-Mask: 0x01) */
#define BPLC_PHY_ATTRIBUTE0_SNR_THR_Pos   (25UL)                    /*!< BPLC PHY_ATTRIBUTE0: SNR_THR (Bit 25)                 */
#define BPLC_PHY_ATTRIBUTE0_SNR_THR_Msk   (0xe000000UL)             /*!< BPLC PHY_ATTRIBUTE0: SNR_THR (Bitfield-Mask: 0x07)    */
#define BPLC_PHY_ATTRIBUTE0_AMP_MAP_ENABLE_Pos (24UL)               /*!< BPLC PHY_ATTRIBUTE0: AMP_MAP_ENABLE (Bit 24)          */
#define BPLC_PHY_ATTRIBUTE0_AMP_MAP_ENABLE_Msk (0x1000000UL)        /*!< BPLC PHY_ATTRIBUTE0: AMP_MAP_ENABLE (Bitfield-Mask: 0x01) */
#define BPLC_PHY_ATTRIBUTE0_OVER_WRITE_RXMEM_EN_Pos (23UL)          /*!< BPLC PHY_ATTRIBUTE0: OVER_WRITE_RXMEM_EN (Bit 23)     */
#define BPLC_PHY_ATTRIBUTE0_OVER_WRITE_RXMEM_EN_Msk (0x800000UL)    /*!< BPLC PHY_ATTRIBUTE0: OVER_WRITE_RXMEM_EN (Bitfield-Mask: 0x01) */
#define BPLC_PHY_ATTRIBUTE0_PROTOCOL_VERSION_Pos (22UL)             /*!< BPLC PHY_ATTRIBUTE0: PROTOCOL_VERSION (Bit 22)        */
#define BPLC_PHY_ATTRIBUTE0_PROTOCOL_VERSION_Msk (0x400000UL)       /*!< BPLC PHY_ATTRIBUTE0: PROTOCOL_VERSION (Bitfield-Mask: 0x01) */
#define BPLC_PHY_ATTRIBUTE0_IEEE_PROTOCOL_Pos (21UL)                /*!< BPLC PHY_ATTRIBUTE0: IEEE_PROTOCOL (Bit 21)           */
#define BPLC_PHY_ATTRIBUTE0_IEEE_PROTOCOL_Msk (0x200000UL)          /*!< BPLC PHY_ATTRIBUTE0: IEEE_PROTOCOL (Bitfield-Mask: 0x01) */
#define BPLC_PHY_ATTRIBUTE0_PUNC_MODE_DIR_OPT_Pos (20UL)            /*!< BPLC PHY_ATTRIBUTE0: PUNC_MODE_DIR_OPT (Bit 20)       */
#define BPLC_PHY_ATTRIBUTE0_PUNC_MODE_DIR_OPT_Msk (0x100000UL)      /*!< BPLC PHY_ATTRIBUTE0: PUNC_MODE_DIR_OPT (Bitfield-Mask: 0x01) */
#define BPLC_PHY_ATTRIBUTE0_NIBBLE_ROT_MODE_Pos (19UL)              /*!< BPLC PHY_ATTRIBUTE0: NIBBLE_ROT_MODE (Bit 19)         */
#define BPLC_PHY_ATTRIBUTE0_NIBBLE_ROT_MODE_Msk (0x80000UL)         /*!< BPLC PHY_ATTRIBUTE0: NIBBLE_ROT_MODE (Bitfield-Mask: 0x01) */
#define BPLC_PHY_ATTRIBUTE0_SCRAMBLE_RST_MODE_Pos (18UL)            /*!< BPLC PHY_ATTRIBUTE0: SCRAMBLE_RST_MODE (Bit 18)       */
#define BPLC_PHY_ATTRIBUTE0_SCRAMBLE_RST_MODE_Msk (0x40000UL)       /*!< BPLC PHY_ATTRIBUTE0: SCRAMBLE_RST_MODE (Bitfield-Mask: 0x01) */
#define BPLC_PHY_ATTRIBUTE0_PL_CRC_SEL_Pos (17UL)                   /*!< BPLC PHY_ATTRIBUTE0: PL_CRC_SEL (Bit 17)              */
#define BPLC_PHY_ATTRIBUTE0_PL_CRC_SEL_Msk (0x20000UL)              /*!< BPLC PHY_ATTRIBUTE0: PL_CRC_SEL (Bitfield-Mask: 0x01) */
#define BPLC_PHY_ATTRIBUTE0_DISABLE_PL_CRC_Pos (16UL)               /*!< BPLC PHY_ATTRIBUTE0: DISABLE_PL_CRC (Bit 16)          */
#define BPLC_PHY_ATTRIBUTE0_DISABLE_PL_CRC_Msk (0x10000UL)          /*!< BPLC PHY_ATTRIBUTE0: DISABLE_PL_CRC (Bitfield-Mask: 0x01) */
#define BPLC_PHY_ATTRIBUTE0_TURBO_DEC_ITER_THR_Pos (12UL)           /*!< BPLC PHY_ATTRIBUTE0: TURBO_DEC_ITER_THR (Bit 12)      */
#define BPLC_PHY_ATTRIBUTE0_TURBO_DEC_ITER_THR_Msk (0xf000UL)       /*!< BPLC PHY_ATTRIBUTE0: TURBO_DEC_ITER_THR (Bitfield-Mask: 0x0f) */
#define BPLC_PHY_ATTRIBUTE0_FC_SYM_NUM_Pos (8UL)                    /*!< BPLC PHY_ATTRIBUTE0: FC_SYM_NUM (Bit 8)               */
#define BPLC_PHY_ATTRIBUTE0_FC_SYM_NUM_Msk (0xf00UL)                /*!< BPLC PHY_ATTRIBUTE0: FC_SYM_NUM (Bitfield-Mask: 0x0f) */
#define BPLC_PHY_ATTRIBUTE0_FC_MAP_MODE_Pos (5UL)                   /*!< BPLC PHY_ATTRIBUTE0: FC_MAP_MODE (Bit 5)              */
#define BPLC_PHY_ATTRIBUTE0_FC_MAP_MODE_Msk (0x60UL)                /*!< BPLC PHY_ATTRIBUTE0: FC_MAP_MODE (Bitfield-Mask: 0x03) */
#define BPLC_PHY_ATTRIBUTE0_CRC_ERR_INSERT_Pos (0UL)                /*!< BPLC PHY_ATTRIBUTE0: CRC_ERR_INSERT (Bit 0)           */
#define BPLC_PHY_ATTRIBUTE0_CRC_ERR_INSERT_Msk (0x1fUL)             /*!< BPLC PHY_ATTRIBUTE0: CRC_ERR_INSERT (Bitfield-Mask: 0x1f) */
/* ====================================================  PHY_ATTRIBUTE1  ===================================================== */
#define BPLC_PHY_ATTRIBUTE1_PI_LEN1_Pos   (17UL)                    /*!< BPLC PHY_ATTRIBUTE1: PI_LEN1 (Bit 17)                 */
#define BPLC_PHY_ATTRIBUTE1_PI_LEN1_Msk   (0x3fe0000UL)             /*!< BPLC PHY_ATTRIBUTE1: PI_LEN1 (Bitfield-Mask: 0x1ff)   */
#define BPLC_PHY_ATTRIBUTE1_PI_LEN0_Pos   (8UL)                     /*!< BPLC PHY_ATTRIBUTE1: PI_LEN0 (Bit 8)                  */
#define BPLC_PHY_ATTRIBUTE1_PI_LEN0_Msk   (0x1ff00UL)               /*!< BPLC PHY_ATTRIBUTE1: PI_LEN0 (Bitfield-Mask: 0x1ff)   */
#define BPLC_PHY_ATTRIBUTE1_RI_LEN_Pos    (0UL)                     /*!< BPLC PHY_ATTRIBUTE1: RI_LEN (Bit 0)                   */
#define BPLC_PHY_ATTRIBUTE1_RI_LEN_Msk    (0xffUL)                  /*!< BPLC PHY_ATTRIBUTE1: RI_LEN (Bitfield-Mask: 0xff)     */
/* ====================================================  PHY_ATTRIBUTE2  ===================================================== */
#define BPLC_PHY_ATTRIBUTE2_VALID_TONE_NUM_Pos (18UL)               /*!< BPLC PHY_ATTRIBUTE2: VALID_TONE_NUM (Bit 18)          */
#define BPLC_PHY_ATTRIBUTE2_VALID_TONE_NUM_Msk (0x7fc0000UL)        /*!< BPLC PHY_ATTRIBUTE2: VALID_TONE_NUM (Bitfield-Mask: 0x1ff) */
#define BPLC_PHY_ATTRIBUTE2_START_TONE_NUM_Pos (9UL)                /*!< BPLC PHY_ATTRIBUTE2: START_TONE_NUM (Bit 9)           */
#define BPLC_PHY_ATTRIBUTE2_START_TONE_NUM_Msk (0x3fe00UL)          /*!< BPLC PHY_ATTRIBUTE2: START_TONE_NUM (Bitfield-Mask: 0x1ff) */
#define BPLC_PHY_ATTRIBUTE2_END_TONE_NUM_Pos (0UL)                  /*!< BPLC PHY_ATTRIBUTE2: END_TONE_NUM (Bit 0)             */
#define BPLC_PHY_ATTRIBUTE2_END_TONE_NUM_Msk (0x1ffUL)              /*!< BPLC PHY_ATTRIBUTE2: END_TONE_NUM (Bitfield-Mask: 0x1ff) */
/* ======================================================  BBP_CONTROL  ====================================================== */
#define BPLC_BBP_CONTROL_HCLK_EN_Pos      (31UL)                    /*!< BPLC BBP_CONTROL: HCLK_EN (Bit 31)                    */
#define BPLC_BBP_CONTROL_HCLK_EN_Msk      (0x80000000UL)            /*!< BPLC BBP_CONTROL: HCLK_EN (Bitfield-Mask: 0x01)       */
#define BPLC_BBP_CONTROL_FORCE_CLK_EN_Pos (30UL)                    /*!< BPLC BBP_CONTROL: FORCE_CLK_EN (Bit 30)               */
#define BPLC_BBP_CONTROL_FORCE_CLK_EN_Msk (0x40000000UL)            /*!< BPLC BBP_CONTROL: FORCE_CLK_EN (Bitfield-Mask: 0x01)  */
#define BPLC_BBP_CONTROL_ADC_CLK_INV_Pos  (8UL)                     /*!< BPLC BBP_CONTROL: ADC_CLK_INV (Bit 8)                 */
#define BPLC_BBP_CONTROL_ADC_CLK_INV_Msk  (0x100UL)                 /*!< BPLC BBP_CONTROL: ADC_CLK_INV (Bitfield-Mask: 0x01)   */
#define BPLC_BBP_CONTROL_DAC_CLK_INV_Pos  (7UL)                     /*!< BPLC BBP_CONTROL: DAC_CLK_INV (Bit 7)                 */
#define BPLC_BBP_CONTROL_DAC_CLK_INV_Msk  (0x80UL)                  /*!< BPLC BBP_CONTROL: DAC_CLK_INV (Bitfield-Mask: 0x01)   */
#define BPLC_BBP_CONTROL_ADC_MSB_OPT_Pos  (6UL)                     /*!< BPLC BBP_CONTROL: ADC_MSB_OPT (Bit 6)                 */
#define BPLC_BBP_CONTROL_ADC_MSB_OPT_Msk  (0x40UL)                  /*!< BPLC BBP_CONTROL: ADC_MSB_OPT (Bitfield-Mask: 0x01)   */
#define BPLC_BBP_CONTROL_DAC_MSB_OPT_Pos  (5UL)                     /*!< BPLC BBP_CONTROL: DAC_MSB_OPT (Bit 5)                 */
#define BPLC_BBP_CONTROL_DAC_MSB_OPT_Msk  (0x20UL)                  /*!< BPLC BBP_CONTROL: DAC_MSB_OPT (Bitfield-Mask: 0x01)   */
#define BPLC_BBP_CONTROL_INI_PREAMBLE_Pos (4UL)                     /*!< BPLC BBP_CONTROL: INI_PREAMBLE (Bit 4)                */
#define BPLC_BBP_CONTROL_INI_PREAMBLE_Msk (0x10UL)                  /*!< BPLC BBP_CONTROL: INI_PREAMBLE (Bitfield-Mask: 0x01)  */
#define BPLC_BBP_CONTROL_INI_TX_PREAMBLE_Pos (3UL)                  /*!< BPLC BBP_CONTROL: INI_TX_PREAMBLE (Bit 3)             */
#define BPLC_BBP_CONTROL_INI_TX_PREAMBLE_Msk (0x8UL)                /*!< BPLC BBP_CONTROL: INI_TX_PREAMBLE (Bitfield-Mask: 0x01) */
#define BPLC_BBP_CONTROL_SOFT_RST_REG_Pos (2UL)                     /*!< BPLC BBP_CONTROL: SOFT_RST_REG (Bit 2)                */
#define BPLC_BBP_CONTROL_SOFT_RST_REG_Msk (0x4UL)                   /*!< BPLC BBP_CONTROL: SOFT_RST_REG (Bitfield-Mask: 0x01)  */
#define BPLC_BBP_CONTROL_TX_IMME_START_Pos (1UL)                    /*!< BPLC BBP_CONTROL: TX_IMME_START (Bit 1)               */
#define BPLC_BBP_CONTROL_TX_IMME_START_Msk (0x2UL)                  /*!< BPLC BBP_CONTROL: TX_IMME_START (Bitfield-Mask: 0x01) */
#define BPLC_BBP_CONTROL_BPLC_ENABLE_Pos  (0UL)                     /*!< BPLC BBP_CONTROL: BPLC_ENABLE (Bit 0)                 */
#define BPLC_BBP_CONTROL_BPLC_ENABLE_Msk  (0x1UL)                   /*!< BPLC BBP_CONTROL: BPLC_ENABLE (Bitfield-Mask: 0x01)   */
/* ======================================================  BBP_STATUS  ======================================================= */
#define BPLC_BBP_STATUS_TX_RX_MODE_Pos    (31UL)                    /*!< BPLC BBP_STATUS: TX_RX_MODE (Bit 31)                  */
#define BPLC_BBP_STATUS_TX_RX_MODE_Msk    (0x80000000UL)            /*!< BPLC BBP_STATUS: TX_RX_MODE (Bitfield-Mask: 0x01)     */
#define BPLC_BBP_STATUS_RX_FC_CRC_RES_Pos (30UL)                    /*!< BPLC BBP_STATUS: RX_FC_CRC_RES (Bit 30)               */
#define BPLC_BBP_STATUS_RX_FC_CRC_RES_Msk (0x40000000UL)            /*!< BPLC BBP_STATUS: RX_FC_CRC_RES (Bitfield-Mask: 0x01)  */
#define BPLC_BBP_STATUS_SYNC_BEGIN_Pos    (29UL)                    /*!< BPLC BBP_STATUS: SYNC_BEGIN (Bit 29)                  */
#define BPLC_BBP_STATUS_SYNC_BEGIN_Msk    (0x20000000UL)            /*!< BPLC BBP_STATUS: SYNC_BEGIN (Bitfield-Mask: 0x01)     */
#define BPLC_BBP_STATUS_RX_PL_CRC_RES_Pos (25UL)                    /*!< BPLC BBP_STATUS: RX_PL_CRC_RES (Bit 25)               */
#define BPLC_BBP_STATUS_RX_PL_CRC_RES_Msk (0x1e000000UL)            /*!< BPLC BBP_STATUS: RX_PL_CRC_RES (Bitfield-Mask: 0x0f)  */
#define BPLC_BBP_STATUS_NBI_DET_END_FLAG_Pos (22UL)                 /*!< BPLC BBP_STATUS: NBI_DET_END_FLAG (Bit 22)            */
#define BPLC_BBP_STATUS_NBI_DET_END_FLAG_Msk (0x400000UL)           /*!< BPLC BBP_STATUS: NBI_DET_END_FLAG (Bitfield-Mask: 0x01) */
#define BPLC_BBP_STATUS_PREAM_INI_END_FLAG_Pos (21UL)               /*!< BPLC BBP_STATUS: PREAM_INI_END_FLAG (Bit 21)          */
#define BPLC_BBP_STATUS_PREAM_INI_END_FLAG_Msk (0x200000UL)         /*!< BPLC BBP_STATUS: PREAM_INI_END_FLAG (Bitfield-Mask: 0x01) */
#define BPLC_BBP_STATUS_NTB_TX_START_SUCCESS_Pos (20UL)             /*!< BPLC BBP_STATUS: NTB_TX_START_SUCCESS (Bit 20)        */
#define BPLC_BBP_STATUS_NTB_TX_START_SUCCESS_Msk (0x100000UL)       /*!< BPLC BBP_STATUS: NTB_TX_START_SUCCESS (Bitfield-Mask: 0x01) */
#define BPLC_BBP_STATUS_TX_DMA_DONE_FLAG_Pos (19UL)                 /*!< BPLC BBP_STATUS: TX_DMA_DONE_FLAG (Bit 19)            */
#define BPLC_BBP_STATUS_TX_DMA_DONE_FLAG_Msk (0x80000UL)            /*!< BPLC BBP_STATUS: TX_DMA_DONE_FLAG (Bitfield-Mask: 0x01) */
#define BPLC_BBP_STATUS_TX_START_FAIL_Pos (18UL)                    /*!< BPLC BBP_STATUS: TX_START_FAIL (Bit 18)               */
#define BPLC_BBP_STATUS_TX_START_FAIL_Msk (0x40000UL)               /*!< BPLC BBP_STATUS: TX_START_FAIL (Bitfield-Mask: 0x01)  */
#define BPLC_BBP_STATUS_SYNC_BEGIN_FLAG_Pos (17UL)                  /*!< BPLC BBP_STATUS: SYNC_BEGIN_FLAG (Bit 17)             */
#define BPLC_BBP_STATUS_SYNC_BEGIN_FLAG_Msk (0x20000UL)             /*!< BPLC BBP_STATUS: SYNC_BEGIN_FLAG (Bitfield-Mask: 0x01) */
#define BPLC_BBP_STATUS_FRAMESYNCED_FLAG_Pos (16UL)                 /*!< BPLC BBP_STATUS: FRAMESYNCED_FLAG (Bit 16)            */
#define BPLC_BBP_STATUS_FRAMESYNCED_FLAG_Msk (0x10000UL)            /*!< BPLC BBP_STATUS: FRAMESYNCED_FLAG (Bitfield-Mask: 0x01) */
#define BPLC_BBP_STATUS_RX_FC_RCV_FLAG_Pos (15UL)                   /*!< BPLC BBP_STATUS: RX_FC_RCV_FLAG (Bit 15)              */
#define BPLC_BBP_STATUS_RX_FC_RCV_FLAG_Msk (0x8000UL)               /*!< BPLC BBP_STATUS: RX_FC_RCV_FLAG (Bitfield-Mask: 0x01) */
#define BPLC_BBP_STATUS_RX_END_FLAG_Pos   (14UL)                    /*!< BPLC BBP_STATUS: RX_END_FLAG (Bit 14)                 */
#define BPLC_BBP_STATUS_RX_END_FLAG_Msk   (0x4000UL)                /*!< BPLC BBP_STATUS: RX_END_FLAG (Bitfield-Mask: 0x01)    */
#define BPLC_BBP_STATUS_RX_OVER_FLOW_Pos  (13UL)                    /*!< BPLC BBP_STATUS: RX_OVER_FLOW (Bit 13)                */
#define BPLC_BBP_STATUS_RX_OVER_FLOW_Msk  (0x2000UL)                /*!< BPLC BBP_STATUS: RX_OVER_FLOW (Bitfield-Mask: 0x01)   */
#define BPLC_BBP_STATUS_TX_END_FLAG_Pos   (12UL)                    /*!< BPLC BBP_STATUS: TX_END_FLAG (Bit 12)                 */
#define BPLC_BBP_STATUS_TX_END_FLAG_Msk   (0x1000UL)                /*!< BPLC BBP_STATUS: TX_END_FLAG (Bitfield-Mask: 0x01)    */
#define BPLC_BBP_STATUS_RX_PL_RCV_FLAG_Pos (8UL)                    /*!< BPLC BBP_STATUS: RX_PL_RCV_FLAG (Bit 8)               */
#define BPLC_BBP_STATUS_RX_PL_RCV_FLAG_Msk (0xf00UL)                /*!< BPLC BBP_STATUS: RX_PL_RCV_FLAG (Bitfield-Mask: 0x0f) */
#define BPLC_BBP_STATUS_NTB_MATCH_FLAG_Pos (0UL)                    /*!< BPLC BBP_STATUS: NTB_MATCH_FLAG (Bit 0)               */
#define BPLC_BBP_STATUS_NTB_MATCH_FLAG_Msk (0xffUL)                 /*!< BPLC BBP_STATUS: NTB_MATCH_FLAG (Bitfield-Mask: 0xff) */
/* ======================================================  BBP_INT_EN  ======================================================= */
#define BPLC_BBP_INT_EN_NBI_DET_END_INT_EN_Pos (22UL)               /*!< BPLC BBP_INT_EN: NBI_DET_END_INT_EN (Bit 22)          */
#define BPLC_BBP_INT_EN_NBI_DET_END_INT_EN_Msk (0x400000UL)         /*!< BPLC BBP_INT_EN: NBI_DET_END_INT_EN (Bitfield-Mask: 0x01) */
#define BPLC_BBP_INT_EN_PREAM_INI_INT_EN_Pos (21UL)                 /*!< BPLC BBP_INT_EN: PREAM_INI_INT_EN (Bit 21)            */
#define BPLC_BBP_INT_EN_PREAM_INI_INT_EN_Msk (0x200000UL)           /*!< BPLC BBP_INT_EN: PREAM_INI_INT_EN (Bitfield-Mask: 0x01) */
#define BPLC_BBP_INT_EN_NTB_TX_START_INT_EN_Pos (20UL)              /*!< BPLC BBP_INT_EN: NTB_TX_START_INT_EN (Bit 20)         */
#define BPLC_BBP_INT_EN_NTB_TX_START_INT_EN_Msk (0x100000UL)        /*!< BPLC BBP_INT_EN: NTB_TX_START_INT_EN (Bitfield-Mask: 0x01) */
#define BPLC_BBP_INT_EN_TX_DMA_DONE_INT_EN_Pos (19UL)               /*!< BPLC BBP_INT_EN: TX_DMA_DONE_INT_EN (Bit 19)          */
#define BPLC_BBP_INT_EN_TX_DMA_DONE_INT_EN_Msk (0x80000UL)          /*!< BPLC BBP_INT_EN: TX_DMA_DONE_INT_EN (Bitfield-Mask: 0x01) */
#define BPLC_BBP_INT_EN_TX_START_FAIL_INT_EN_Pos (18UL)             /*!< BPLC BBP_INT_EN: TX_START_FAIL_INT_EN (Bit 18)        */
#define BPLC_BBP_INT_EN_TX_START_FAIL_INT_EN_Msk (0x40000UL)        /*!< BPLC BBP_INT_EN: TX_START_FAIL_INT_EN (Bitfield-Mask: 0x01) */
#define BPLC_BBP_INT_EN_SYNC_BEGIN_INT_EN_Pos (17UL)                /*!< BPLC BBP_INT_EN: SYNC_BEGIN_INT_EN (Bit 17)           */
#define BPLC_BBP_INT_EN_SYNC_BEGIN_INT_EN_Msk (0x20000UL)           /*!< BPLC BBP_INT_EN: SYNC_BEGIN_INT_EN (Bitfield-Mask: 0x01) */
#define BPLC_BBP_INT_EN_FRAMESYNCED_INT_EN_Pos (16UL)               /*!< BPLC BBP_INT_EN: FRAMESYNCED_INT_EN (Bit 16)          */
#define BPLC_BBP_INT_EN_FRAMESYNCED_INT_EN_Msk (0x10000UL)          /*!< BPLC BBP_INT_EN: FRAMESYNCED_INT_EN (Bitfield-Mask: 0x01) */
#define BPLC_BBP_INT_EN_RX_FC_RCV_INT_EN_Pos (15UL)                 /*!< BPLC BBP_INT_EN: RX_FC_RCV_INT_EN (Bit 15)            */
#define BPLC_BBP_INT_EN_RX_FC_RCV_INT_EN_Msk (0x8000UL)             /*!< BPLC BBP_INT_EN: RX_FC_RCV_INT_EN (Bitfield-Mask: 0x01) */
#define BPLC_BBP_INT_EN_RX_END_INT_EN_Pos (14UL)                    /*!< BPLC BBP_INT_EN: RX_END_INT_EN (Bit 14)               */
#define BPLC_BBP_INT_EN_RX_END_INT_EN_Msk (0x4000UL)                /*!< BPLC BBP_INT_EN: RX_END_INT_EN (Bitfield-Mask: 0x01)  */
#define BPLC_BBP_INT_EN_RX_OVER_FLOW_INT_EN_Pos (13UL)              /*!< BPLC BBP_INT_EN: RX_OVER_FLOW_INT_EN (Bit 13)         */
#define BPLC_BBP_INT_EN_RX_OVER_FLOW_INT_EN_Msk (0x2000UL)          /*!< BPLC BBP_INT_EN: RX_OVER_FLOW_INT_EN (Bitfield-Mask: 0x01) */
#define BPLC_BBP_INT_EN_TX_END_INT_EN_Pos (12UL)                    /*!< BPLC BBP_INT_EN: TX_END_INT_EN (Bit 12)               */
#define BPLC_BBP_INT_EN_TX_END_INT_EN_Msk (0x1000UL)                /*!< BPLC BBP_INT_EN: TX_END_INT_EN (Bitfield-Mask: 0x01)  */
#define BPLC_BBP_INT_EN_RX_PL_RCV_INT_EN_Pos (8UL)                  /*!< BPLC BBP_INT_EN: RX_PL_RCV_INT_EN (Bit 8)             */
#define BPLC_BBP_INT_EN_RX_PL_RCV_INT_EN_Msk (0xf00UL)              /*!< BPLC BBP_INT_EN: RX_PL_RCV_INT_EN (Bitfield-Mask: 0x0f) */
#define BPLC_BBP_INT_EN_NTB_MATCH_INT_EN_Pos (0UL)                  /*!< BPLC BBP_INT_EN: NTB_MATCH_INT_EN (Bit 0)             */
#define BPLC_BBP_INT_EN_NTB_MATCH_INT_EN_Msk (0xffUL)               /*!< BPLC BBP_INT_EN: NTB_MATCH_INT_EN (Bitfield-Mask: 0xff) */
/* =====================================================  TONEMASKTABLE  ===================================================== */
#define BPLC_TONEMASKTABLE_TONE_MASK_TAB0_Pos (0UL)                 /*!< BPLC TONEMASKTABLE: TONE_MASK_TAB0 (Bit 0)            */
#define BPLC_TONEMASKTABLE_TONE_MASK_TAB0_Msk (0xffffffffUL)        /*!< BPLC TONEMASKTABLE: TONE_MASK_TAB0 (Bitfield-Mask: 0xffffffff) */
/* ====================================================  FC_ADDR_OFFSET0  ==================================================== */
#define BPLC_FC_ADDR_OFFSET0_FC_ADDR_OFFSET0_Pos (24UL)             /*!< BPLC FC_ADDR_OFFSET0: FC_ADDR_OFFSET0 (Bit 24)        */
#define BPLC_FC_ADDR_OFFSET0_FC_ADDR_OFFSET0_Msk (0xff000000UL)     /*!< BPLC FC_ADDR_OFFSET0: FC_ADDR_OFFSET0 (Bitfield-Mask: 0xff) */
#define BPLC_FC_ADDR_OFFSET0_FC_ADDR_OFFSET1_Pos (16UL)             /*!< BPLC FC_ADDR_OFFSET0: FC_ADDR_OFFSET1 (Bit 16)        */
#define BPLC_FC_ADDR_OFFSET0_FC_ADDR_OFFSET1_Msk (0xff0000UL)       /*!< BPLC FC_ADDR_OFFSET0: FC_ADDR_OFFSET1 (Bitfield-Mask: 0xff) */
#define BPLC_FC_ADDR_OFFSET0_FC_ADDR_OFFSET2_Pos (8UL)              /*!< BPLC FC_ADDR_OFFSET0: FC_ADDR_OFFSET2 (Bit 8)         */
#define BPLC_FC_ADDR_OFFSET0_FC_ADDR_OFFSET2_Msk (0xff00UL)         /*!< BPLC FC_ADDR_OFFSET0: FC_ADDR_OFFSET2 (Bitfield-Mask: 0xff) */
#define BPLC_FC_ADDR_OFFSET0_FC_ADDR_OFFSET3_Pos (0UL)              /*!< BPLC FC_ADDR_OFFSET0: FC_ADDR_OFFSET3 (Bit 0)         */
#define BPLC_FC_ADDR_OFFSET0_FC_ADDR_OFFSET3_Msk (0xffUL)           /*!< BPLC FC_ADDR_OFFSET0: FC_ADDR_OFFSET3 (Bitfield-Mask: 0xff) */
/* ====================================================  FC_ADDR_OFFSET1  ==================================================== */
#define BPLC_FC_ADDR_OFFSET1_FC_ADDR_OFFSET4_Pos (24UL)             /*!< BPLC FC_ADDR_OFFSET1: FC_ADDR_OFFSET4 (Bit 24)        */
#define BPLC_FC_ADDR_OFFSET1_FC_ADDR_OFFSET4_Msk (0xff000000UL)     /*!< BPLC FC_ADDR_OFFSET1: FC_ADDR_OFFSET4 (Bitfield-Mask: 0xff) */
#define BPLC_FC_ADDR_OFFSET1_FC_ADDR_OFFSET5_Pos (16UL)             /*!< BPLC FC_ADDR_OFFSET1: FC_ADDR_OFFSET5 (Bit 16)        */
#define BPLC_FC_ADDR_OFFSET1_FC_ADDR_OFFSET5_Msk (0xff0000UL)       /*!< BPLC FC_ADDR_OFFSET1: FC_ADDR_OFFSET5 (Bitfield-Mask: 0xff) */
#define BPLC_FC_ADDR_OFFSET1_FC_ADDR_OFFSET6_Pos (8UL)              /*!< BPLC FC_ADDR_OFFSET1: FC_ADDR_OFFSET6 (Bit 8)         */
#define BPLC_FC_ADDR_OFFSET1_FC_ADDR_OFFSET6_Msk (0xff00UL)         /*!< BPLC FC_ADDR_OFFSET1: FC_ADDR_OFFSET6 (Bitfield-Mask: 0xff) */
#define BPLC_FC_ADDR_OFFSET1_FC_ADDR_OFFSET7_Pos (0UL)              /*!< BPLC FC_ADDR_OFFSET1: FC_ADDR_OFFSET7 (Bit 0)         */
#define BPLC_FC_ADDR_OFFSET1_FC_ADDR_OFFSET7_Msk (0xffUL)           /*!< BPLC FC_ADDR_OFFSET1: FC_ADDR_OFFSET7 (Bitfield-Mask: 0xff) */
/* ====================================================  FC_ADDR_OFFSET2  ==================================================== */
#define BPLC_FC_ADDR_OFFSET2_FC_ADDR_OFFSET8_Pos (24UL)             /*!< BPLC FC_ADDR_OFFSET2: FC_ADDR_OFFSET8 (Bit 24)        */
#define BPLC_FC_ADDR_OFFSET2_FC_ADDR_OFFSET8_Msk (0xff000000UL)     /*!< BPLC FC_ADDR_OFFSET2: FC_ADDR_OFFSET8 (Bitfield-Mask: 0xff) */
#define BPLC_FC_ADDR_OFFSET2_FC_ADDR_OFFSET9_Pos (16UL)             /*!< BPLC FC_ADDR_OFFSET2: FC_ADDR_OFFSET9 (Bit 16)        */
#define BPLC_FC_ADDR_OFFSET2_FC_ADDR_OFFSET9_Msk (0xff0000UL)       /*!< BPLC FC_ADDR_OFFSET2: FC_ADDR_OFFSET9 (Bitfield-Mask: 0xff) */
#define BPLC_FC_ADDR_OFFSET2_FC_ADDR_OFFSET10_Pos (8UL)             /*!< BPLC FC_ADDR_OFFSET2: FC_ADDR_OFFSET10 (Bit 8)        */
#define BPLC_FC_ADDR_OFFSET2_FC_ADDR_OFFSET10_Msk (0xff00UL)        /*!< BPLC FC_ADDR_OFFSET2: FC_ADDR_OFFSET10 (Bitfield-Mask: 0xff) */
#define BPLC_FC_ADDR_OFFSET2_FC_ADDR_OFFSET11_Pos (0UL)             /*!< BPLC FC_ADDR_OFFSET2: FC_ADDR_OFFSET11 (Bit 0)        */
#define BPLC_FC_ADDR_OFFSET2_FC_ADDR_OFFSET11_Msk (0xffUL)          /*!< BPLC FC_ADDR_OFFSET2: FC_ADDR_OFFSET11 (Bitfield-Mask: 0xff) */
/* =======================================================  ENCRYPT0  ======================================================== */
#define BPLC_ENCRYPT0_ENCRYPT_CODE0_Pos   (0UL)                     /*!< BPLC ENCRYPT0: ENCRYPT_CODE0 (Bit 0)                  */
#define BPLC_ENCRYPT0_ENCRYPT_CODE0_Msk   (0xffffffffUL)            /*!< BPLC ENCRYPT0: ENCRYPT_CODE0 (Bitfield-Mask: 0xffffffff) */
/* =======================================================  ENCRYPT1  ======================================================== */
#define BPLC_ENCRYPT1_ENCRYPT_CODE1_Pos   (0UL)                     /*!< BPLC ENCRYPT1: ENCRYPT_CODE1 (Bit 0)                  */
#define BPLC_ENCRYPT1_ENCRYPT_CODE1_Msk   (0xffffffffUL)            /*!< BPLC ENCRYPT1: ENCRYPT_CODE1 (Bitfield-Mask: 0xffffffff) */
/* ======================================================  FFT_COEFF0  ======================================================= */
#define BPLC_FFT_COEFF0_OFDM_POS_PRE_Pos  (24UL)                    /*!< BPLC FFT_COEFF0: OFDM_POS_PRE (Bit 24)                */
#define BPLC_FFT_COEFF0_OFDM_POS_PRE_Msk  (0xff000000UL)            /*!< BPLC FFT_COEFF0: OFDM_POS_PRE (Bitfield-Mask: 0xff)   */
#define BPLC_FFT_COEFF0_GEN_PRE_IFFT_COEFF_Pos (10UL)               /*!< BPLC FFT_COEFF0: GEN_PRE_IFFT_COEFF (Bit 10)          */
#define BPLC_FFT_COEFF0_GEN_PRE_IFFT_COEFF_Msk (0xffc00UL)          /*!< BPLC FFT_COEFF0: GEN_PRE_IFFT_COEFF (Bitfield-Mask: 0x3ff) */
#define BPLC_FFT_COEFF0_GEN_LOCAL_PRE_IFFT_COEFF_Pos (0UL)          /*!< BPLC FFT_COEFF0: GEN_LOCAL_PRE_IFFT_COEFF (Bit 0)     */
#define BPLC_FFT_COEFF0_GEN_LOCAL_PRE_IFFT_COEFF_Msk (0x3ffUL)      /*!< BPLC FFT_COEFF0: GEN_LOCAL_PRE_IFFT_COEFF (Bitfield-Mask: 0x3ff) */
/* ======================================================  FFT_COEFF1  ======================================================= */
#define BPLC_FFT_COEFF1_TX_FC_IFFT_COEFF_Pos (10UL)                 /*!< BPLC FFT_COEFF1: TX_FC_IFFT_COEFF (Bit 10)            */
#define BPLC_FFT_COEFF1_TX_FC_IFFT_COEFF_Msk (0xffc00UL)            /*!< BPLC FFT_COEFF1: TX_FC_IFFT_COEFF (Bitfield-Mask: 0x3ff) */
#define BPLC_FFT_COEFF1_TX_PL_IFFT_COEFF_Pos (0UL)                  /*!< BPLC FFT_COEFF1: TX_PL_IFFT_COEFF (Bit 0)             */
#define BPLC_FFT_COEFF1_TX_PL_IFFT_COEFF_Msk (0x3ffUL)              /*!< BPLC FFT_COEFF1: TX_PL_IFFT_COEFF (Bitfield-Mask: 0x3ff) */
/* ======================================================  FFT_COEFF2  ======================================================= */
#define BPLC_FFT_COEFF2_RX_FC_FFT_COEFF_Pos (10UL)                  /*!< BPLC FFT_COEFF2: RX_FC_FFT_COEFF (Bit 10)             */
#define BPLC_FFT_COEFF2_RX_FC_FFT_COEFF_Msk (0xffc00UL)             /*!< BPLC FFT_COEFF2: RX_FC_FFT_COEFF (Bitfield-Mask: 0x3ff) */
#define BPLC_FFT_COEFF2_RX_PL_FFT_COEFF_Pos (0UL)                   /*!< BPLC FFT_COEFF2: RX_PL_FFT_COEFF (Bit 0)              */
#define BPLC_FFT_COEFF2_RX_PL_FFT_COEFF_Msk (0x3ffUL)               /*!< BPLC FFT_COEFF2: RX_PL_FFT_COEFF (Bitfield-Mask: 0x3ff) */
/* ======================================================  FFT_COEFF3  ======================================================= */
#define BPLC_FFT_COEFF3_SYNC_FFT_COEFF_Pos (10UL)                   /*!< BPLC FFT_COEFF3: SYNC_FFT_COEFF (Bit 10)              */
#define BPLC_FFT_COEFF3_SYNC_FFT_COEFF_Msk (0xffc00UL)              /*!< BPLC FFT_COEFF3: SYNC_FFT_COEFF (Bitfield-Mask: 0x3ff) */
#define BPLC_FFT_COEFF3_NBI_DET_FFT_COEFF_Pos (0UL)                 /*!< BPLC FFT_COEFF3: NBI_DET_FFT_COEFF (Bit 0)            */
#define BPLC_FFT_COEFF3_NBI_DET_FFT_COEFF_Msk (0x3ffUL)             /*!< BPLC FFT_COEFF3: NBI_DET_FFT_COEFF (Bitfield-Mask: 0x3ff) */
/* =====================================================  CORR_ADJ_CFG0  ===================================================== */
#define BPLC_CORR_ADJ_CFG0_AUTO_ADJ_CORR_THR_EN_Pos (31UL)          /*!< BPLC CORR_ADJ_CFG0: AUTO_ADJ_CORR_THR_EN (Bit 31)     */
#define BPLC_CORR_ADJ_CFG0_AUTO_ADJ_CORR_THR_EN_Msk (0x80000000UL)  /*!< BPLC CORR_ADJ_CFG0: AUTO_ADJ_CORR_THR_EN (Bitfield-Mask: 0x01) */
#define BPLC_CORR_ADJ_CFG0_ADD_STEP_THR_Pos (20UL)                  /*!< BPLC CORR_ADJ_CFG0: ADD_STEP_THR (Bit 20)             */
#define BPLC_CORR_ADJ_CFG0_ADD_STEP_THR_Msk (0x3ff00000UL)          /*!< BPLC CORR_ADJ_CFG0: ADD_STEP_THR (Bitfield-Mask: 0x3ff) */
#define BPLC_CORR_ADJ_CFG0_CORR_THR_MAX_Pos (0UL)                   /*!< BPLC CORR_ADJ_CFG0: CORR_THR_MAX (Bit 0)              */
#define BPLC_CORR_ADJ_CFG0_CORR_THR_MAX_Msk (0xfffffUL)             /*!< BPLC CORR_ADJ_CFG0: CORR_THR_MAX (Bitfield-Mask: 0xfffff) */
/* =====================================================  CORR_ADJ_CFG1  ===================================================== */
#define BPLC_CORR_ADJ_CFG1_MIN_STEP_THR_Pos (20UL)                  /*!< BPLC CORR_ADJ_CFG1: MIN_STEP_THR (Bit 20)             */
#define BPLC_CORR_ADJ_CFG1_MIN_STEP_THR_Msk (0x3ff00000UL)          /*!< BPLC CORR_ADJ_CFG1: MIN_STEP_THR (Bitfield-Mask: 0x3ff) */
#define BPLC_CORR_ADJ_CFG1_CORR_THR_MIN_Pos (0UL)                   /*!< BPLC CORR_ADJ_CFG1: CORR_THR_MIN (Bit 0)              */
#define BPLC_CORR_ADJ_CFG1_CORR_THR_MIN_Msk (0xfffffUL)             /*!< BPLC CORR_ADJ_CFG1: CORR_THR_MIN (Bitfield-Mask: 0xfffff) */
/* =====================================================  CORR_ADJ_CFG2  ===================================================== */
#define BPLC_CORR_ADJ_CFG2_THR_ADJ_STEP_Pos (16UL)                  /*!< BPLC CORR_ADJ_CFG2: THR_ADJ_STEP (Bit 16)             */
#define BPLC_CORR_ADJ_CFG2_THR_ADJ_STEP_Msk (0x3ff0000UL)           /*!< BPLC CORR_ADJ_CFG2: THR_ADJ_STEP (Bitfield-Mask: 0x3ff) */
#define BPLC_CORR_ADJ_CFG2_CORR_THR_MARGIN_Pos (0UL)                /*!< BPLC CORR_ADJ_CFG2: CORR_THR_MARGIN (Bit 0)           */
#define BPLC_CORR_ADJ_CFG2_CORR_THR_MARGIN_Msk (0xffffUL)           /*!< BPLC CORR_ADJ_CFG2: CORR_THR_MARGIN (Bitfield-Mask: 0xffff) */
/* =====================================================  CORR_ADJ_CFG3  ===================================================== */
#define BPLC_CORR_ADJ_CFG3_FSYNC_INTERVAL_CNT_Pos (0UL)             /*!< BPLC CORR_ADJ_CFG3: FSYNC_INTERVAL_CNT (Bit 0)        */
#define BPLC_CORR_ADJ_CFG3_FSYNC_INTERVAL_CNT_Msk (0xffffffffUL)    /*!< BPLC CORR_ADJ_CFG3: FSYNC_INTERVAL_CNT (Bitfield-Mask: 0xffffffff) */
/* =====================================================  CORR_ADJ_RES  ====================================================== */
#define BPLC_CORR_ADJ_RES_AUTO_CORR_THR_ADJ_RES_Pos (0UL)           /*!< BPLC CORR_ADJ_RES: AUTO_CORR_THR_ADJ_RES (Bit 0)      */
#define BPLC_CORR_ADJ_RES_AUTO_CORR_THR_ADJ_RES_Msk (0xfffffUL)     /*!< BPLC CORR_ADJ_RES: AUTO_CORR_THR_ADJ_RES (Bitfield-Mask: 0xfffff) */
/* ======================================================  FRAMESYNC0  ======================================================= */
#define BPLC_FRAMESYNC0_FS_MAX_WIN_LEN_Pos (20UL)                   /*!< BPLC FRAMESYNC0: FS_MAX_WIN_LEN (Bit 20)              */
#define BPLC_FRAMESYNC0_FS_MAX_WIN_LEN_Msk (0xfff00000UL)           /*!< BPLC FRAMESYNC0: FS_MAX_WIN_LEN (Bitfield-Mask: 0xfff) */
#define BPLC_FRAMESYNC0_AUTO_CORR_THR_Pos (0UL)                     /*!< BPLC FRAMESYNC0: AUTO_CORR_THR (Bit 0)                */
#define BPLC_FRAMESYNC0_AUTO_CORR_THR_Msk (0xfffffUL)               /*!< BPLC FRAMESYNC0: AUTO_CORR_THR (Bitfield-Mask: 0xfffff) */
/* ======================================================  FRAMESYNC1  ======================================================= */
#define BPLC_FRAMESYNC1_SYNC_BEGIN_CONT_THR_Pos (28UL)              /*!< BPLC FRAMESYNC1: SYNC_BEGIN_CONT_THR (Bit 28)         */
#define BPLC_FRAMESYNC1_SYNC_BEGIN_CONT_THR_Msk (0xf0000000UL)      /*!< BPLC FRAMESYNC1: SYNC_BEGIN_CONT_THR (Bitfield-Mask: 0x0f) */
#define BPLC_FRAMESYNC1_SYNCM_RATIO_THR_Pos (22UL)                  /*!< BPLC FRAMESYNC1: SYNCM_RATIO_THR (Bit 22)             */
#define BPLC_FRAMESYNC1_SYNCM_RATIO_THR_Msk (0xfc00000UL)           /*!< BPLC FRAMESYNC1: SYNCM_RATIO_THR (Bitfield-Mask: 0x3f) */
#define BPLC_FRAMESYNC1_RATIO_THR_Pos     (16UL)                    /*!< BPLC FRAMESYNC1: RATIO_THR (Bit 16)                   */
#define BPLC_FRAMESYNC1_RATIO_THR_Msk     (0x3f0000UL)              /*!< BPLC FRAMESYNC1: RATIO_THR (Bitfield-Mask: 0x3f)      */
#define BPLC_FRAMESYNC1_AUTO_CORR_SYNCM_THR_Pos (0UL)               /*!< BPLC FRAMESYNC1: AUTO_CORR_SYNCM_THR (Bit 0)          */
#define BPLC_FRAMESYNC1_AUTO_CORR_SYNCM_THR_Msk (0xffffUL)          /*!< BPLC FRAMESYNC1: AUTO_CORR_SYNCM_THR (Bitfield-Mask: 0xffff) */
/* ======================================================  FRAMESYNC2  ======================================================= */
#define BPLC_FRAMESYNC2_SKIP_LEN_Pos      (26UL)                    /*!< BPLC FRAMESYNC2: SKIP_LEN (Bit 26)                    */
#define BPLC_FRAMESYNC2_SKIP_LEN_Msk      (0x7c000000UL)            /*!< BPLC FRAMESYNC2: SKIP_LEN (Bitfield-Mask: 0x1f)       */
#define BPLC_FRAMESYNC2_CHECK_LEN_Pos     (16UL)                    /*!< BPLC FRAMESYNC2: CHECK_LEN (Bit 16)                   */
#define BPLC_FRAMESYNC2_CHECK_LEN_Msk     (0x3ff0000UL)             /*!< BPLC FRAMESYNC2: CHECK_LEN (Bitfield-Mask: 0x3ff)     */
#define BPLC_FRAMESYNC2_ALPHA_Pos         (14UL)                    /*!< BPLC FRAMESYNC2: ALPHA (Bit 14)                       */
#define BPLC_FRAMESYNC2_ALPHA_Msk         (0xc000UL)                /*!< BPLC FRAMESYNC2: ALPHA (Bitfield-Mask: 0x03)          */
#define BPLC_FRAMESYNC2_CONT_DISTANCE_THR_Pos (8UL)                 /*!< BPLC FRAMESYNC2: CONT_DISTANCE_THR (Bit 8)            */
#define BPLC_FRAMESYNC2_CONT_DISTANCE_THR_Msk (0x3f00UL)            /*!< BPLC FRAMESYNC2: CONT_DISTANCE_THR (Bitfield-Mask: 0x3f) */
#define BPLC_FRAMESYNC2_SYNCM_CHECK_LEN_Pos (0UL)                   /*!< BPLC FRAMESYNC2: SYNCM_CHECK_LEN (Bit 0)              */
#define BPLC_FRAMESYNC2_SYNCM_CHECK_LEN_Msk (0xffUL)                /*!< BPLC FRAMESYNC2: SYNCM_CHECK_LEN (Bitfield-Mask: 0xff) */
/* =====================================================  DMA_RX_BADDR  ====================================================== */
#define BPLC_DMA_RX_BADDR_RX_BASE_ADDR_Pos (0UL)                    /*!< BPLC DMA_RX_BADDR: RX_BASE_ADDR (Bit 0)               */
#define BPLC_DMA_RX_BADDR_RX_BASE_ADDR_Msk (0xffffffffUL)           /*!< BPLC DMA_RX_BADDR: RX_BASE_ADDR (Bitfield-Mask: 0xffffffff) */
/* =====================================================  DMA_TX_BADDR  ====================================================== */
#define BPLC_DMA_TX_BADDR_TX_BASE_ADDR_Pos (0UL)                    /*!< BPLC DMA_TX_BADDR: TX_BASE_ADDR (Bit 0)               */
#define BPLC_DMA_TX_BADDR_TX_BASE_ADDR_Msk (0xffffffffUL)           /*!< BPLC DMA_TX_BADDR: TX_BASE_ADDR (Bitfield-Mask: 0xffffffff) */
/* ======================================================  DMA_CONTROL  ====================================================== */
#define BPLC_DMA_CONTROL_TX_HMASTLOCK_EN_Pos (1UL)                  /*!< BPLC DMA_CONTROL: TX_HMASTLOCK_EN (Bit 1)             */
#define BPLC_DMA_CONTROL_TX_HMASTLOCK_EN_Msk (0x2UL)                /*!< BPLC DMA_CONTROL: TX_HMASTLOCK_EN (Bitfield-Mask: 0x01) */
#define BPLC_DMA_CONTROL_RX_HMASTLOCK_EN_Pos (0UL)                  /*!< BPLC DMA_CONTROL: RX_HMASTLOCK_EN (Bit 0)             */
#define BPLC_DMA_CONTROL_RX_HMASTLOCK_EN_Msk (0x1UL)                /*!< BPLC DMA_CONTROL: RX_HMASTLOCK_EN (Bitfield-Mask: 0x01) */
/* ======================================================  NBI_CONTROL  ====================================================== */
#define BPLC_NBI_CONTROL_NBI_SMP_RATE_Pos (16UL)                    /*!< BPLC NBI_CONTROL: NBI_SMP_RATE (Bit 16)               */
#define BPLC_NBI_CONTROL_NBI_SMP_RATE_Msk (0xff0000UL)              /*!< BPLC NBI_CONTROL: NBI_SMP_RATE (Bitfield-Mask: 0xff)  */
#define BPLC_NBI_CONTROL_NBI_FFT_MAX_CNT_Pos (12UL)                 /*!< BPLC NBI_CONTROL: NBI_FFT_MAX_CNT (Bit 12)            */
#define BPLC_NBI_CONTROL_NBI_FFT_MAX_CNT_Msk (0xf000UL)             /*!< BPLC NBI_CONTROL: NBI_FFT_MAX_CNT (Bitfield-Mask: 0x0f) */
#define BPLC_NBI_CONTROL_STOP_NBI_DET_Pos (11UL)                    /*!< BPLC NBI_CONTROL: STOP_NBI_DET (Bit 11)               */
#define BPLC_NBI_CONTROL_STOP_NBI_DET_Msk (0x800UL)                 /*!< BPLC NBI_CONTROL: STOP_NBI_DET (Bitfield-Mask: 0x01)  */
#define BPLC_NBI_CONTROL_NBI_DET_SKIP_LEN_Pos (1UL)                 /*!< BPLC NBI_CONTROL: NBI_DET_SKIP_LEN (Bit 1)            */
#define BPLC_NBI_CONTROL_NBI_DET_SKIP_LEN_Msk (0x7feUL)             /*!< BPLC NBI_CONTROL: NBI_DET_SKIP_LEN (Bitfield-Mask: 0x3ff) */
#define BPLC_NBI_CONTROL_NBI_SOFT_START_Pos (0UL)                   /*!< BPLC NBI_CONTROL: NBI_SOFT_START (Bit 0)              */
#define BPLC_NBI_CONTROL_NBI_SOFT_START_Msk (0x1UL)                 /*!< BPLC NBI_CONTROL: NBI_SOFT_START (Bitfield-Mask: 0x01) */
/* =====================================================  NBI_TIMER_CFG  ===================================================== */
#define BPLC_NBI_TIMER_CFG_NBI_DET_TIMER_ENABLE_Pos (31UL)          /*!< BPLC NBI_TIMER_CFG: NBI_DET_TIMER_ENABLE (Bit 31)     */
#define BPLC_NBI_TIMER_CFG_NBI_DET_TIMER_ENABLE_Msk (0x80000000UL)  /*!< BPLC NBI_TIMER_CFG: NBI_DET_TIMER_ENABLE (Bitfield-Mask: 0x01) */
#define BPLC_NBI_TIMER_CFG_NBI_DET_INTERVAL_Pos (0UL)               /*!< BPLC NBI_TIMER_CFG: NBI_DET_INTERVAL (Bit 0)          */
#define BPLC_NBI_TIMER_CFG_NBI_DET_INTERVAL_Msk (0x3fffffffUL)      /*!< BPLC NBI_TIMER_CFG: NBI_DET_INTERVAL (Bitfield-Mask: 0x3fffffff) */
/* ===================================================  NBI_TIMER_STATUS  ==================================================== */
#define BPLC_NBI_TIMER_STATUS_NBI_DET_GOING_Pos (31UL)              /*!< BPLC NBI_TIMER_STATUS: NBI_DET_GOING (Bit 31)         */
#define BPLC_NBI_TIMER_STATUS_NBI_DET_GOING_Msk (0x80000000UL)      /*!< BPLC NBI_TIMER_STATUS: NBI_DET_GOING (Bitfield-Mask: 0x01) */
#define BPLC_NBI_TIMER_STATUS_NBI_DET_PEND_Pos (30UL)               /*!< BPLC NBI_TIMER_STATUS: NBI_DET_PEND (Bit 30)          */
#define BPLC_NBI_TIMER_STATUS_NBI_DET_PEND_Msk (0x40000000UL)       /*!< BPLC NBI_TIMER_STATUS: NBI_DET_PEND (Bitfield-Mask: 0x01) */
#define BPLC_NBI_TIMER_STATUS_NBI_TIMER_START_DISTANCE_Pos (0UL)    /*!< BPLC NBI_TIMER_STATUS: NBI_TIMER_START_DISTANCE (Bit 0) */
#define BPLC_NBI_TIMER_STATUS_NBI_TIMER_START_DISTANCE_Msk (0x3fffffffUL) /*!< BPLC NBI_TIMER_STATUS: NBI_TIMER_START_DISTANCE (Bitfield-Mask: 0x3fffffff) */
/* ========================================================  NBI_RES  ======================================================== */
#define BPLC_NBI_RES_NBI_AVE_AMP_Pos      (10UL)                    /*!< BPLC NBI_RES: NBI_AVE_AMP (Bit 10)                    */
#define BPLC_NBI_RES_NBI_AVE_AMP_Msk      (0xfffffc00UL)            /*!< BPLC NBI_RES: NBI_AVE_AMP (Bitfield-Mask: 0x3fffff)   */
#define BPLC_NBI_RES_NBI_MAX_TONE_VALID_Pos (9UL)                   /*!< BPLC NBI_RES: NBI_MAX_TONE_VALID (Bit 9)              */
#define BPLC_NBI_RES_NBI_MAX_TONE_VALID_Msk (0x200UL)               /*!< BPLC NBI_RES: NBI_MAX_TONE_VALID (Bitfield-Mask: 0x01) */
#define BPLC_NBI_RES_NBI_MAX_AMP_TONE_Pos (0UL)                     /*!< BPLC NBI_RES: NBI_MAX_AMP_TONE (Bit 0)                */
#define BPLC_NBI_RES_NBI_MAX_AMP_TONE_Msk (0x1ffUL)                 /*!< BPLC NBI_RES: NBI_MAX_AMP_TONE (Bitfield-Mask: 0x1ff) */
/* ======================================================  NTB_CONTROL  ====================================================== */
#define BPLC_NTB_CONTROL_TIMER_TX_START_ENABLE2_Pos (29UL)          /*!< BPLC NTB_CONTROL: TIMER_TX_START_ENABLE2 (Bit 29)     */
#define BPLC_NTB_CONTROL_TIMER_TX_START_ENABLE2_Msk (0x20000000UL)  /*!< BPLC NTB_CONTROL: TIMER_TX_START_ENABLE2 (Bitfield-Mask: 0x01) */
#define BPLC_NTB_CONTROL_ZERO_CROSSING0_SEL_Pos (28UL)              /*!< BPLC NTB_CONTROL: ZERO_CROSSING0_SEL (Bit 28)         */
#define BPLC_NTB_CONTROL_ZERO_CROSSING0_SEL_Msk (0x10000000UL)      /*!< BPLC NTB_CONTROL: ZERO_CROSSING0_SEL (Bitfield-Mask: 0x01) */
#define BPLC_NTB_CONTROL_FRAMESYNC_CAPTURE_ENABLE_Pos (27UL)        /*!< BPLC NTB_CONTROL: FRAMESYNC_CAPTURE_ENABLE (Bit 27)   */
#define BPLC_NTB_CONTROL_FRAMESYNC_CAPTURE_ENABLE_Msk (0x8000000UL) /*!< BPLC NTB_CONTROL: FRAMESYNC_CAPTURE_ENABLE (Bitfield-Mask: 0x01) */
#define BPLC_NTB_CONTROL_NTB_ENABLE_Pos   (26UL)                    /*!< BPLC NTB_CONTROL: NTB_ENABLE (Bit 26)                 */
#define BPLC_NTB_CONTROL_NTB_ENABLE_Msk   (0x4000000UL)             /*!< BPLC NTB_CONTROL: NTB_ENABLE (Bitfield-Mask: 0x01)    */
#define BPLC_NTB_CONTROL_TIMER_TX_START_ENABLE_Pos (25UL)           /*!< BPLC NTB_CONTROL: TIMER_TX_START_ENABLE (Bit 25)      */
#define BPLC_NTB_CONTROL_TIMER_TX_START_ENABLE_Msk (0x2000000UL)    /*!< BPLC NTB_CONTROL: TIMER_TX_START_ENABLE (Bitfield-Mask: 0x01) */
#define BPLC_NTB_CONTROL_TX_TIME_AUTO_ADJ_EN_Pos (24UL)             /*!< BPLC NTB_CONTROL: TX_TIME_AUTO_ADJ_EN (Bit 24)        */
#define BPLC_NTB_CONTROL_TX_TIME_AUTO_ADJ_EN_Msk (0x1000000UL)      /*!< BPLC NTB_CONTROL: TX_TIME_AUTO_ADJ_EN (Bitfield-Mask: 0x01) */
#define BPLC_NTB_CONTROL_TARGET_AUTO_ADJ_EN_Pos (16UL)              /*!< BPLC NTB_CONTROL: TARGET_AUTO_ADJ_EN (Bit 16)         */
#define BPLC_NTB_CONTROL_TARGET_AUTO_ADJ_EN_Msk (0xff0000UL)        /*!< BPLC NTB_CONTROL: TARGET_AUTO_ADJ_EN (Bitfield-Mask: 0xff) */
#define BPLC_NTB_CONTROL_ZC_CAPTURE_ENABLE_Pos (8UL)                /*!< BPLC NTB_CONTROL: ZC_CAPTURE_ENABLE (Bit 8)           */
#define BPLC_NTB_CONTROL_ZC_CAPTURE_ENABLE_Msk (0xff00UL)           /*!< BPLC NTB_CONTROL: ZC_CAPTURE_ENABLE (Bitfield-Mask: 0xff) */
#define BPLC_NTB_CONTROL_TARGET_MATCH_ENABLE_Pos (0UL)              /*!< BPLC NTB_CONTROL: TARGET_MATCH_ENABLE (Bit 0)         */
#define BPLC_NTB_CONTROL_TARGET_MATCH_ENABLE_Msk (0xffUL)           /*!< BPLC NTB_CONTROL: TARGET_MATCH_ENABLE (Bitfield-Mask: 0xff) */
/* ===================================================  NTB_AUTO_ADJ_CFG  ==================================================== */
#define BPLC_NTB_AUTO_ADJ_CFG_NTB_AUTO_ADJ_ENABLE_Pos (31UL)        /*!< BPLC NTB_AUTO_ADJ_CFG: NTB_AUTO_ADJ_ENABLE (Bit 31)   */
#define BPLC_NTB_AUTO_ADJ_CFG_NTB_AUTO_ADJ_ENABLE_Msk (0x80000000UL) /*!< BPLC NTB_AUTO_ADJ_CFG: NTB_AUTO_ADJ_ENABLE (Bitfield-Mask: 0x01) */
#define BPLC_NTB_AUTO_ADJ_CFG_NTB_AUTO_ADJ_DIR_Pos (30UL)           /*!< BPLC NTB_AUTO_ADJ_CFG: NTB_AUTO_ADJ_DIR (Bit 30)      */
#define BPLC_NTB_AUTO_ADJ_CFG_NTB_AUTO_ADJ_DIR_Msk (0x40000000UL)   /*!< BPLC NTB_AUTO_ADJ_CFG: NTB_AUTO_ADJ_DIR (Bitfield-Mask: 0x01) */
#define BPLC_NTB_AUTO_ADJ_CFG_NTB_AUTO_ADJ_INTERVAL_Pos (0UL)       /*!< BPLC NTB_AUTO_ADJ_CFG: NTB_AUTO_ADJ_INTERVAL (Bit 0)  */
#define BPLC_NTB_AUTO_ADJ_CFG_NTB_AUTO_ADJ_INTERVAL_Msk (0x3fffffffUL) /*!< BPLC NTB_AUTO_ADJ_CFG: NTB_AUTO_ADJ_INTERVAL (Bitfield-Mask: 0x3fffffff) */
/* ====================================================  NTB_OFFSET_ADJ  ===================================================== */
#define BPLC_NTB_OFFSET_ADJ_NTB_OFFSET_Pos (0UL)                    /*!< BPLC NTB_OFFSET_ADJ: NTB_OFFSET (Bit 0)               */
#define BPLC_NTB_OFFSET_ADJ_NTB_OFFSET_Msk (0xffffffffUL)           /*!< BPLC NTB_OFFSET_ADJ: NTB_OFFSET (Bitfield-Mask: 0xffffffff) */
/* ======================================================  NTB_RELOAD  ======================================================= */
#define BPLC_NTB_RELOAD_NTB_RELOAD_VALUE_Pos (0UL)                  /*!< BPLC NTB_RELOAD: NTB_RELOAD_VALUE (Bit 0)             */
#define BPLC_NTB_RELOAD_NTB_RELOAD_VALUE_Msk (0xffffffffUL)         /*!< BPLC NTB_RELOAD: NTB_RELOAD_VALUE (Bitfield-Mask: 0xffffffff) */
/* ===================================================  NTB_TX_START_TIME  =================================================== */
#define BPLC_NTB_TX_START_TIME_NTB_TX_START_TARGET_Pos (0UL)        /*!< BPLC NTB_TX_START_TIME: NTB_TX_START_TARGET (Bit 0)   */
#define BPLC_NTB_TX_START_TIME_NTB_TX_START_TARGET_Msk (0xffffffffUL) /*!< BPLC NTB_TX_START_TIME: NTB_TX_START_TARGET (Bitfield-Mask: 0xffffffff) */
/* ===================================================  NTB_MATCH_TARGET  ==================================================== */
#define BPLC_NTB_MATCH_TARGET_TIMER_MATCH_TARGET0_Pos (0UL)         /*!< BPLC NTB_MATCH_TARGET: TIMER_MATCH_TARGET0 (Bit 0)    */
#define BPLC_NTB_MATCH_TARGET_TIMER_MATCH_TARGET0_Msk (0xffffffffUL) /*!< BPLC NTB_MATCH_TARGET: TIMER_MATCH_TARGET0 (Bitfield-Mask: 0xffffffff) */
/* ===================================================  NTB_COUNTER_VALUE  =================================================== */
#define BPLC_NTB_COUNTER_VALUE_NTB_COUNTER_OUT_Pos (0UL)            /*!< BPLC NTB_COUNTER_VALUE: NTB_COUNTER_OUT (Bit 0)       */
#define BPLC_NTB_COUNTER_VALUE_NTB_COUNTER_OUT_Msk (0xffffffffUL)   /*!< BPLC NTB_COUNTER_VALUE: NTB_COUNTER_OUT (Bitfield-Mask: 0xffffffff) */
/* ===================================================  NTB_OFFSET_LATCH  ==================================================== */
#define BPLC_NTB_OFFSET_LATCH_NTB_OFFSET_LATCH_VALUE_Pos (0UL)      /*!< BPLC NTB_OFFSET_LATCH: NTB_OFFSET_LATCH_VALUE (Bit 0) */
#define BPLC_NTB_OFFSET_LATCH_NTB_OFFSET_LATCH_VALUE_Msk (0xffffffffUL) /*!< BPLC NTB_OFFSET_LATCH: NTB_OFFSET_LATCH_VALUE (Bitfield-Mask: 0xffffffff) */
/* =====================================================  NTB_FRAMESYNC  ===================================================== */
#define BPLC_NTB_FRAMESYNC_NTB_FRAMESYNC_Pos (0UL)                  /*!< BPLC NTB_FRAMESYNC: NTB_FRAMESYNC (Bit 0)             */
#define BPLC_NTB_FRAMESYNC_NTB_FRAMESYNC_Msk (0xffffffffUL)         /*!< BPLC NTB_FRAMESYNC: NTB_FRAMESYNC (Bitfield-Mask: 0xffffffff) */
/* ==================================================  NTB_ZERO_CROSSING0  =================================================== */
#define BPLC_NTB_ZERO_CROSSING0_NTB_ZERO_CROSSING0_Pos (0UL)        /*!< BPLC NTB_ZERO_CROSSING0: NTB_ZERO_CROSSING0 (Bit 0)   */
#define BPLC_NTB_ZERO_CROSSING0_NTB_ZERO_CROSSING0_Msk (0xffffffffUL) /*!< BPLC NTB_ZERO_CROSSING0: NTB_ZERO_CROSSING0 (Bitfield-Mask: 0xffffffff) */
/* ==================================================  NTB_ZERO_CROSSING1  =================================================== */
#define BPLC_NTB_ZERO_CROSSING1_NTB_ZERO_CROSSING1_Pos (0UL)        /*!< BPLC NTB_ZERO_CROSSING1: NTB_ZERO_CROSSING1 (Bit 0)   */
#define BPLC_NTB_ZERO_CROSSING1_NTB_ZERO_CROSSING1_Msk (0xffffffffUL) /*!< BPLC NTB_ZERO_CROSSING1: NTB_ZERO_CROSSING1 (Bitfield-Mask: 0xffffffff) */
/* ==================================================  NTB_ZERO_CROSSING2  =================================================== */
#define BPLC_NTB_ZERO_CROSSING2_NTB_ZERO_CROSSING2_Pos (0UL)        /*!< BPLC NTB_ZERO_CROSSING2: NTB_ZERO_CROSSING2 (Bit 0)   */
#define BPLC_NTB_ZERO_CROSSING2_NTB_ZERO_CROSSING2_Msk (0xffffffffUL) /*!< BPLC NTB_ZERO_CROSSING2: NTB_ZERO_CROSSING2 (Bitfield-Mask: 0xffffffff) */
/* ==================================================  NTB_ZERO_CROSSING3  =================================================== */
#define BPLC_NTB_ZERO_CROSSING3_NTB_ZERO_CROSSING3_Pos (0UL)        /*!< BPLC NTB_ZERO_CROSSING3: NTB_ZERO_CROSSING3 (Bit 0)   */
#define BPLC_NTB_ZERO_CROSSING3_NTB_ZERO_CROSSING3_Msk (0xffffffffUL) /*!< BPLC NTB_ZERO_CROSSING3: NTB_ZERO_CROSSING3 (Bitfield-Mask: 0xffffffff) */
/* ==================================================  NTB_ZERO_CROSSING4  =================================================== */
#define BPLC_NTB_ZERO_CROSSING4_NTB_ZERO_CROSSING4_Pos (0UL)        /*!< BPLC NTB_ZERO_CROSSING4: NTB_ZERO_CROSSING4 (Bit 0)   */
#define BPLC_NTB_ZERO_CROSSING4_NTB_ZERO_CROSSING4_Msk (0xffffffffUL) /*!< BPLC NTB_ZERO_CROSSING4: NTB_ZERO_CROSSING4 (Bitfield-Mask: 0xffffffff) */
/* ==================================================  NTB_ZERO_CROSSING5  =================================================== */
#define BPLC_NTB_ZERO_CROSSING5_NTB_ZERO_CROSSING5_Pos (0UL)        /*!< BPLC NTB_ZERO_CROSSING5: NTB_ZERO_CROSSING5 (Bit 0)   */
#define BPLC_NTB_ZERO_CROSSING5_NTB_ZERO_CROSSING5_Msk (0xffffffffUL) /*!< BPLC NTB_ZERO_CROSSING5: NTB_ZERO_CROSSING5 (Bitfield-Mask: 0xffffffff) */
/* ==================================================  NTB_ZERO_CROSSING6  =================================================== */
#define BPLC_NTB_ZERO_CROSSING6_NTB_ZERO_CROSSING6_Pos (0UL)        /*!< BPLC NTB_ZERO_CROSSING6: NTB_ZERO_CROSSING6 (Bit 0)   */
#define BPLC_NTB_ZERO_CROSSING6_NTB_ZERO_CROSSING6_Msk (0xffffffffUL) /*!< BPLC NTB_ZERO_CROSSING6: NTB_ZERO_CROSSING6 (Bitfield-Mask: 0xffffffff) */
/* ==================================================  NTB_ZERO_CROSSING7  =================================================== */
#define BPLC_NTB_ZERO_CROSSING7_NTB_ZERO_CROSSING7_Pos (0UL)        /*!< BPLC NTB_ZERO_CROSSING7: NTB_ZERO_CROSSING7 (Bit 0)   */
#define BPLC_NTB_ZERO_CROSSING7_NTB_ZERO_CROSSING7_Msk (0xffffffffUL) /*!< BPLC NTB_ZERO_CROSSING7: NTB_ZERO_CROSSING7 (Bitfield-Mask: 0xffffffff) */
/* ====================================================  NONMASK_PWR_SUM  ==================================================== */
#define BPLC_NONMASK_PWR_SUM_AVE_PWR_SUM_Pos (0UL)                  /*!< BPLC NONMASK_PWR_SUM: AVE_PWR_SUM (Bit 0)             */
#define BPLC_NONMASK_PWR_SUM_AVE_PWR_SUM_Msk (0x1ffffffUL)          /*!< BPLC NONMASK_PWR_SUM: AVE_PWR_SUM (Bitfield-Mask: 0x1ffffff) */
/* ===================================================  NONMASK_NOISE_SUM  =================================================== */
#define BPLC_NONMASK_NOISE_SUM_NOISE_SUM_Pos (0UL)                  /*!< BPLC NONMASK_NOISE_SUM: NOISE_SUM (Bit 0)             */
#define BPLC_NONMASK_NOISE_SUM_NOISE_SUM_Msk (0x1ffffffUL)          /*!< BPLC NONMASK_NOISE_SUM: NOISE_SUM (Bitfield-Mask: 0x1ffffff) */
/* =======================================================  AGC_CFG0  ======================================================== */
#define BPLC_AGC_CFG0_AGC_BLK_EN_Pos      (31UL)                    /*!< BPLC AGC_CFG0: AGC_BLK_EN (Bit 31)                    */
#define BPLC_AGC_CFG0_AGC_BLK_EN_Msk      (0x80000000UL)            /*!< BPLC AGC_CFG0: AGC_BLK_EN (Bitfield-Mask: 0x01)       */
#define BPLC_AGC_CFG0_AGC_GAIN_LOCK_EN_Pos (30UL)                   /*!< BPLC AGC_CFG0: AGC_GAIN_LOCK_EN (Bit 30)              */
#define BPLC_AGC_CFG0_AGC_GAIN_LOCK_EN_Msk (0x40000000UL)           /*!< BPLC AGC_CFG0: AGC_GAIN_LOCK_EN (Bitfield-Mask: 0x01) */
#define BPLC_AGC_CFG0_AGC_IN_OPT_Pos      (29UL)                    /*!< BPLC AGC_CFG0: AGC_IN_OPT (Bit 29)                    */
#define BPLC_AGC_CFG0_AGC_IN_OPT_Msk      (0x20000000UL)            /*!< BPLC AGC_CFG0: AGC_IN_OPT (Bitfield-Mask: 0x01)       */
#define BPLC_AGC_CFG0_AGC_MUA_Pos         (24UL)                    /*!< BPLC AGC_CFG0: AGC_MUA (Bit 24)                       */
#define BPLC_AGC_CFG0_AGC_MUA_Msk         (0x7000000UL)             /*!< BPLC AGC_CFG0: AGC_MUA (Bitfield-Mask: 0x07)          */
#define BPLC_AGC_CFG0_FORCE_GAIN_Pos      (23UL)                    /*!< BPLC AGC_CFG0: FORCE_GAIN (Bit 23)                    */
#define BPLC_AGC_CFG0_FORCE_GAIN_Msk      (0x800000UL)              /*!< BPLC AGC_CFG0: FORCE_GAIN (Bitfield-Mask: 0x01)       */
#define BPLC_AGC_CFG0_GAIN_FORCED_Pos     (16UL)                    /*!< BPLC AGC_CFG0: GAIN_FORCED (Bit 16)                   */
#define BPLC_AGC_CFG0_GAIN_FORCED_Msk     (0x1f0000UL)              /*!< BPLC AGC_CFG0: GAIN_FORCED (Bitfield-Mask: 0x1f)      */
#define BPLC_AGC_CFG0_AGC_TARGET_Pos      (0UL)                     /*!< BPLC AGC_CFG0: AGC_TARGET (Bit 0)                     */
#define BPLC_AGC_CFG0_AGC_TARGET_Msk      (0xfffUL)                 /*!< BPLC AGC_CFG0: AGC_TARGET (Bitfield-Mask: 0xfff)      */
/* =======================================================  AGC_CFG1  ======================================================== */
#define BPLC_AGC_CFG1_AGC_SMP_RATE_Pos    (28UL)                    /*!< BPLC AGC_CFG1: AGC_SMP_RATE (Bit 28)                  */
#define BPLC_AGC_CFG1_AGC_SMP_RATE_Msk    (0xf0000000UL)            /*!< BPLC AGC_CFG1: AGC_SMP_RATE (Bitfield-Mask: 0x0f)     */
#define BPLC_AGC_CFG1_AGC_TH_BLK_Pos      (16UL)                    /*!< BPLC AGC_CFG1: AGC_TH_BLK (Bit 16)                    */
#define BPLC_AGC_CFG1_AGC_TH_BLK_Msk      (0xfff0000UL)             /*!< BPLC AGC_CFG1: AGC_TH_BLK (Bitfield-Mask: 0xfff)      */
#define BPLC_AGC_CFG1_AGC_ERR_MU_INC_Pos  (13UL)                    /*!< BPLC AGC_CFG1: AGC_ERR_MU_INC (Bit 13)                */
#define BPLC_AGC_CFG1_AGC_ERR_MU_INC_Msk  (0xe000UL)                /*!< BPLC AGC_CFG1: AGC_ERR_MU_INC (Bitfield-Mask: 0x07)   */
#define BPLC_AGC_CFG1_MAX_GAIN_Pos        (8UL)                     /*!< BPLC AGC_CFG1: MAX_GAIN (Bit 8)                       */
#define BPLC_AGC_CFG1_MAX_GAIN_Msk        (0x1f00UL)                /*!< BPLC AGC_CFG1: MAX_GAIN (Bitfield-Mask: 0x1f)         */
#define BPLC_AGC_CFG1_AGC_ERR_MU_DEC_Pos  (5UL)                     /*!< BPLC AGC_CFG1: AGC_ERR_MU_DEC (Bit 5)                 */
#define BPLC_AGC_CFG1_AGC_ERR_MU_DEC_Msk  (0xe0UL)                  /*!< BPLC AGC_CFG1: AGC_ERR_MU_DEC (Bitfield-Mask: 0x07)   */
#define BPLC_AGC_CFG1_MIN_GAIN_Pos        (0UL)                     /*!< BPLC AGC_CFG1: MIN_GAIN (Bit 0)                       */
#define BPLC_AGC_CFG1_MIN_GAIN_Msk        (0x1fUL)                  /*!< BPLC AGC_CFG1: MIN_GAIN (Bitfield-Mask: 0x1f)         */
/* ======================================================  AGC_STATUS0  ====================================================== */
#define BPLC_AGC_STATUS0_AGC_LOCKED_GAIN_Pos (16UL)                 /*!< BPLC AGC_STATUS0: AGC_LOCKED_GAIN (Bit 16)            */
#define BPLC_AGC_STATUS0_AGC_LOCKED_GAIN_Msk (0x1f0000UL)           /*!< BPLC AGC_STATUS0: AGC_LOCKED_GAIN (Bitfield-Mask: 0x1f) */
#define BPLC_AGC_STATUS0_AGC_RMS_LOCKED_Pos (0UL)                   /*!< BPLC AGC_STATUS0: AGC_RMS_LOCKED (Bit 0)              */
#define BPLC_AGC_STATUS0_AGC_RMS_LOCKED_Msk (0xffffUL)              /*!< BPLC AGC_STATUS0: AGC_RMS_LOCKED (Bitfield-Mask: 0xffff) */
/* ======================================================  AGC_STATUS1  ====================================================== */
#define BPLC_AGC_STATUS1_AGC_CUR_GAIN_Pos (16UL)                    /*!< BPLC AGC_STATUS1: AGC_CUR_GAIN (Bit 16)               */
#define BPLC_AGC_STATUS1_AGC_CUR_GAIN_Msk (0x1f0000UL)              /*!< BPLC AGC_STATUS1: AGC_CUR_GAIN (Bitfield-Mask: 0x1f)  */
#define BPLC_AGC_STATUS1_AGC_RMS_Pos      (0UL)                     /*!< BPLC AGC_STATUS1: AGC_RMS (Bit 0)                     */
#define BPLC_AGC_STATUS1_AGC_RMS_Msk      (0xffffUL)                /*!< BPLC AGC_STATUS1: AGC_RMS (Bitfield-Mask: 0xffff)     */
/* =========================================================  DEBUG  ========================================================= */
#define BPLC_DEBUG_TURBO_DEC_CS_Pos       (20UL)                    /*!< BPLC DEBUG: TURBO_DEC_CS (Bit 20)                     */
#define BPLC_DEBUG_TURBO_DEC_CS_Msk       (0xf00000UL)              /*!< BPLC DEBUG: TURBO_DEC_CS (Bitfield-Mask: 0x0f)        */
#define BPLC_DEBUG_RX_SYM_CS_Pos          (14UL)                    /*!< BPLC DEBUG: RX_SYM_CS (Bit 14)                        */
#define BPLC_DEBUG_RX_SYM_CS_Msk          (0x1c000UL)               /*!< BPLC DEBUG: RX_SYM_CS (Bitfield-Mask: 0x07)           */
#define BPLC_DEBUG_FRAMESYNC_CS_Pos       (11UL)                    /*!< BPLC DEBUG: FRAMESYNC_CS (Bit 11)                     */
#define BPLC_DEBUG_FRAMESYNC_CS_Msk       (0x3800UL)                /*!< BPLC DEBUG: FRAMESYNC_CS (Bitfield-Mask: 0x07)        */
#define BPLC_DEBUG_CHNEST_CS_Pos          (8UL)                     /*!< BPLC DEBUG: CHNEST_CS (Bit 8)                         */
#define BPLC_DEBUG_CHNEST_CS_Msk          (0x700UL)                 /*!< BPLC DEBUG: CHNEST_CS (Bitfield-Mask: 0x07)           */
#define BPLC_DEBUG_TX_CTR_CS_Pos          (4UL)                     /*!< BPLC DEBUG: TX_CTR_CS (Bit 4)                         */
#define BPLC_DEBUG_TX_CTR_CS_Msk          (0xf0UL)                  /*!< BPLC DEBUG: TX_CTR_CS (Bitfield-Mask: 0x0f)           */
#define BPLC_DEBUG_COPIER_CS_Pos          (0UL)                     /*!< BPLC DEBUG: COPIER_CS (Bit 0)                         */
#define BPLC_DEBUG_COPIER_CS_Msk          (0xfUL)                   /*!< BPLC DEBUG: COPIER_CS (Bitfield-Mask: 0x0f)           */
/* ======================================================  RX_WDT_CFG  ======================================================= */
#define BPLC_RX_WDT_CFG_WDT_ENABLE_Pos    (31UL)                    /*!< BPLC RX_WDT_CFG: WDT_ENABLE (Bit 31)                  */
#define BPLC_RX_WDT_CFG_WDT_ENABLE_Msk    (0x80000000UL)            /*!< BPLC RX_WDT_CFG: WDT_ENABLE (Bitfield-Mask: 0x01)     */
#define BPLC_RX_WDT_CFG_WDT_TIMEOUT_THR_Pos (0UL)                   /*!< BPLC RX_WDT_CFG: WDT_TIMEOUT_THR (Bit 0)              */
#define BPLC_RX_WDT_CFG_WDT_TIMEOUT_THR_Msk (0x3fffffffUL)          /*!< BPLC RX_WDT_CFG: WDT_TIMEOUT_THR (Bitfield-Mask: 0x3fffffff) */
/* =======================================================  CIC_CFG0  ======================================================== */
#define BPLC_CIC_CFG0_CIC_DC_RM_ALPH_Pos  (25UL)                    /*!< BPLC CIC_CFG0: CIC_DC_RM_ALPH (Bit 25)                */
#define BPLC_CIC_CFG0_CIC_DC_RM_ALPH_Msk  (0xe000000UL)             /*!< BPLC CIC_CFG0: CIC_DC_RM_ALPH (Bitfield-Mask: 0x07)   */
#define BPLC_CIC_CFG0_CIC_DC_RM_ENABLE_Pos (24UL)                   /*!< BPLC CIC_CFG0: CIC_DC_RM_ENABLE (Bit 24)              */
#define BPLC_CIC_CFG0_CIC_DC_RM_ENABLE_Msk (0x1000000UL)            /*!< BPLC CIC_CFG0: CIC_DC_RM_ENABLE (Bitfield-Mask: 0x01) */
#define BPLC_CIC_CFG0_CIC_COMB_NUM_Pos    (17UL)                    /*!< BPLC CIC_CFG0: CIC_COMB_NUM (Bit 17)                  */
#define BPLC_CIC_CFG0_CIC_COMB_NUM_Msk    (0x60000UL)               /*!< BPLC CIC_CFG0: CIC_COMB_NUM (Bitfield-Mask: 0x03)     */
#define BPLC_CIC_CFG0_CIC_ENABLE_Pos      (16UL)                    /*!< BPLC CIC_CFG0: CIC_ENABLE (Bit 16)                    */
#define BPLC_CIC_CFG0_CIC_ENABLE_Msk      (0x10000UL)               /*!< BPLC CIC_CFG0: CIC_ENABLE (Bitfield-Mask: 0x01)       */
#define BPLC_CIC_CFG0_CIC_RSHFT_Pos       (12UL)                    /*!< BPLC CIC_CFG0: CIC_RSHFT (Bit 12)                     */
#define BPLC_CIC_CFG0_CIC_RSHFT_Msk       (0xf000UL)                /*!< BPLC CIC_CFG0: CIC_RSHFT (Bitfield-Mask: 0x0f)        */
#define BPLC_CIC_CFG0_CIC_INT_NUM_Pos     (10UL)                    /*!< BPLC CIC_CFG0: CIC_INT_NUM (Bit 10)                   */
#define BPLC_CIC_CFG0_CIC_INT_NUM_Msk     (0xc00UL)                 /*!< BPLC CIC_CFG0: CIC_INT_NUM (Bitfield-Mask: 0x03)      */
#define BPLC_CIC_CFG0_CIC_DIFF_DELAY_Pos  (0UL)                     /*!< BPLC CIC_CFG0: CIC_DIFF_DELAY (Bit 0)                 */
#define BPLC_CIC_CFG0_CIC_DIFF_DELAY_Msk  (0x3ffUL)                 /*!< BPLC CIC_CFG0: CIC_DIFF_DELAY (Bitfield-Mask: 0x3ff)  */
/* =====================================================  RX_BPF0_CFG0  ====================================================== */
#define BPLC_RX_BPF0_CFG0_RX_BPF0_ENABLE_Pos (31UL)                 /*!< BPLC RX_BPF0_CFG0: RX_BPF0_ENABLE (Bit 31)            */
#define BPLC_RX_BPF0_CFG0_RX_BPF0_ENABLE_Msk (0x80000000UL)         /*!< BPLC RX_BPF0_CFG0: RX_BPF0_ENABLE (Bitfield-Mask: 0x01) */
#define BPLC_RX_BPF0_CFG0_RX_BPF0_GAIN_Pos (0UL)                    /*!< BPLC RX_BPF0_CFG0: RX_BPF0_GAIN (Bit 0)               */
#define BPLC_RX_BPF0_CFG0_RX_BPF0_GAIN_Msk (0xffffUL)               /*!< BPLC RX_BPF0_CFG0: RX_BPF0_GAIN (Bitfield-Mask: 0xffff) */
/* =====================================================  RX_BPF0_CFG1  ====================================================== */
#define BPLC_RX_BPF0_CFG1_RX_BPF0_A1_Pos  (16UL)                    /*!< BPLC RX_BPF0_CFG1: RX_BPF0_A1 (Bit 16)                */
#define BPLC_RX_BPF0_CFG1_RX_BPF0_A1_Msk  (0xffff0000UL)            /*!< BPLC RX_BPF0_CFG1: RX_BPF0_A1 (Bitfield-Mask: 0xffff) */
#define BPLC_RX_BPF0_CFG1_RX_BPF0_A2_Pos  (0UL)                     /*!< BPLC RX_BPF0_CFG1: RX_BPF0_A2 (Bit 0)                 */
#define BPLC_RX_BPF0_CFG1_RX_BPF0_A2_Msk  (0xffffUL)                /*!< BPLC RX_BPF0_CFG1: RX_BPF0_A2 (Bitfield-Mask: 0xffff) */
/* =====================================================  RX_BPF1_CFG0  ====================================================== */
#define BPLC_RX_BPF1_CFG0_RX_BPF1_ENABLE_Pos (31UL)                 /*!< BPLC RX_BPF1_CFG0: RX_BPF1_ENABLE (Bit 31)            */
#define BPLC_RX_BPF1_CFG0_RX_BPF1_ENABLE_Msk (0x80000000UL)         /*!< BPLC RX_BPF1_CFG0: RX_BPF1_ENABLE (Bitfield-Mask: 0x01) */
#define BPLC_RX_BPF1_CFG0_RX_BPF1_GAIN_Pos (0UL)                    /*!< BPLC RX_BPF1_CFG0: RX_BPF1_GAIN (Bit 0)               */
#define BPLC_RX_BPF1_CFG0_RX_BPF1_GAIN_Msk (0xffffUL)               /*!< BPLC RX_BPF1_CFG0: RX_BPF1_GAIN (Bitfield-Mask: 0xffff) */
/* =====================================================  RX_BPF1_CFG1  ====================================================== */
#define BPLC_RX_BPF1_CFG1_RX_BPF1_A1_Pos  (16UL)                    /*!< BPLC RX_BPF1_CFG1: RX_BPF1_A1 (Bit 16)                */
#define BPLC_RX_BPF1_CFG1_RX_BPF1_A1_Msk  (0xffff0000UL)            /*!< BPLC RX_BPF1_CFG1: RX_BPF1_A1 (Bitfield-Mask: 0xffff) */
#define BPLC_RX_BPF1_CFG1_RX_BPF1_A2_Pos  (0UL)                     /*!< BPLC RX_BPF1_CFG1: RX_BPF1_A2 (Bit 0)                 */
#define BPLC_RX_BPF1_CFG1_RX_BPF1_A2_Msk  (0xffffUL)                /*!< BPLC RX_BPF1_CFG1: RX_BPF1_A2 (Bitfield-Mask: 0xffff) */
/* =====================================================  RX_BPF2_CFG0  ====================================================== */
#define BPLC_RX_BPF2_CFG0_RX_BPF2_ENABLE_Pos (31UL)                 /*!< BPLC RX_BPF2_CFG0: RX_BPF2_ENABLE (Bit 31)            */
#define BPLC_RX_BPF2_CFG0_RX_BPF2_ENABLE_Msk (0x80000000UL)         /*!< BPLC RX_BPF2_CFG0: RX_BPF2_ENABLE (Bitfield-Mask: 0x01) */
#define BPLC_RX_BPF2_CFG0_RX_BPF2_GAIN_Pos (0UL)                    /*!< BPLC RX_BPF2_CFG0: RX_BPF2_GAIN (Bit 0)               */
#define BPLC_RX_BPF2_CFG0_RX_BPF2_GAIN_Msk (0xffffUL)               /*!< BPLC RX_BPF2_CFG0: RX_BPF2_GAIN (Bitfield-Mask: 0xffff) */
/* =====================================================  RX_BPF2_CFG1  ====================================================== */
#define BPLC_RX_BPF2_CFG1_RX_BPF2_A1_Pos  (16UL)                    /*!< BPLC RX_BPF2_CFG1: RX_BPF2_A1 (Bit 16)                */
#define BPLC_RX_BPF2_CFG1_RX_BPF2_A1_Msk  (0xffff0000UL)            /*!< BPLC RX_BPF2_CFG1: RX_BPF2_A1 (Bitfield-Mask: 0xffff) */
#define BPLC_RX_BPF2_CFG1_RX_BPF2_A2_Pos  (0UL)                     /*!< BPLC RX_BPF2_CFG1: RX_BPF2_A2 (Bit 0)                 */
#define BPLC_RX_BPF2_CFG1_RX_BPF2_A2_Msk  (0xffffUL)                /*!< BPLC RX_BPF2_CFG1: RX_BPF2_A2 (Bitfield-Mask: 0xffff) */
/* =====================================================  RX_BPF3_CFG0  ====================================================== */
#define BPLC_RX_BPF3_CFG0_RX_BPF3_ENABLE_Pos (31UL)                 /*!< BPLC RX_BPF3_CFG0: RX_BPF3_ENABLE (Bit 31)            */
#define BPLC_RX_BPF3_CFG0_RX_BPF3_ENABLE_Msk (0x80000000UL)         /*!< BPLC RX_BPF3_CFG0: RX_BPF3_ENABLE (Bitfield-Mask: 0x01) */
#define BPLC_RX_BPF3_CFG0_RX_BPF3_GAIN_Pos (0UL)                    /*!< BPLC RX_BPF3_CFG0: RX_BPF3_GAIN (Bit 0)               */
#define BPLC_RX_BPF3_CFG0_RX_BPF3_GAIN_Msk (0xffffUL)               /*!< BPLC RX_BPF3_CFG0: RX_BPF3_GAIN (Bitfield-Mask: 0xffff) */
/* =====================================================  RX_BPF3_CFG1  ====================================================== */
#define BPLC_RX_BPF3_CFG1_RX_BPF3_A1_Pos  (16UL)                    /*!< BPLC RX_BPF3_CFG1: RX_BPF3_A1 (Bit 16)                */
#define BPLC_RX_BPF3_CFG1_RX_BPF3_A1_Msk  (0xffff0000UL)            /*!< BPLC RX_BPF3_CFG1: RX_BPF3_A1 (Bitfield-Mask: 0xffff) */
#define BPLC_RX_BPF3_CFG1_RX_BPF3_A2_Pos  (0UL)                     /*!< BPLC RX_BPF3_CFG1: RX_BPF3_A2 (Bit 0)                 */
#define BPLC_RX_BPF3_CFG1_RX_BPF3_A2_Msk  (0xffffUL)                /*!< BPLC RX_BPF3_CFG1: RX_BPF3_A2 (Bitfield-Mask: 0xffff) */
/* =====================================================  RX_BPF4_CFG0  ====================================================== */
#define BPLC_RX_BPF4_CFG0_RX_BPF4_ENABLE_Pos (31UL)                 /*!< BPLC RX_BPF4_CFG0: RX_BPF4_ENABLE (Bit 31)            */
#define BPLC_RX_BPF4_CFG0_RX_BPF4_ENABLE_Msk (0x80000000UL)         /*!< BPLC RX_BPF4_CFG0: RX_BPF4_ENABLE (Bitfield-Mask: 0x01) */
#define BPLC_RX_BPF4_CFG0_RX_BPF4_GAIN_Pos (0UL)                    /*!< BPLC RX_BPF4_CFG0: RX_BPF4_GAIN (Bit 0)               */
#define BPLC_RX_BPF4_CFG0_RX_BPF4_GAIN_Msk (0xffffUL)               /*!< BPLC RX_BPF4_CFG0: RX_BPF4_GAIN (Bitfield-Mask: 0xffff) */
/* =====================================================  RX_BPF4_CFG1  ====================================================== */
#define BPLC_RX_BPF4_CFG1_RX_BPF4_A1_Pos  (16UL)                    /*!< BPLC RX_BPF4_CFG1: RX_BPF4_A1 (Bit 16)                */
#define BPLC_RX_BPF4_CFG1_RX_BPF4_A1_Msk  (0xffff0000UL)            /*!< BPLC RX_BPF4_CFG1: RX_BPF4_A1 (Bitfield-Mask: 0xffff) */
#define BPLC_RX_BPF4_CFG1_RX_BPF4_A2_Pos  (0UL)                     /*!< BPLC RX_BPF4_CFG1: RX_BPF4_A2 (Bit 0)                 */
#define BPLC_RX_BPF4_CFG1_RX_BPF4_A2_Msk  (0xffffUL)                /*!< BPLC RX_BPF4_CFG1: RX_BPF4_A2 (Bitfield-Mask: 0xffff) */
/* =====================================================  RX_BPF5_CFG0  ====================================================== */
#define BPLC_RX_BPF5_CFG0_RX_BPF5_ENABLE_Pos (31UL)                 /*!< BPLC RX_BPF5_CFG0: RX_BPF5_ENABLE (Bit 31)            */
#define BPLC_RX_BPF5_CFG0_RX_BPF5_ENABLE_Msk (0x80000000UL)         /*!< BPLC RX_BPF5_CFG0: RX_BPF5_ENABLE (Bitfield-Mask: 0x01) */
#define BPLC_RX_BPF5_CFG0_RX_BPF5_GAIN_Pos (0UL)                    /*!< BPLC RX_BPF5_CFG0: RX_BPF5_GAIN (Bit 0)               */
#define BPLC_RX_BPF5_CFG0_RX_BPF5_GAIN_Msk (0xffffUL)               /*!< BPLC RX_BPF5_CFG0: RX_BPF5_GAIN (Bitfield-Mask: 0xffff) */
/* =====================================================  RX_BPF5_CFG1  ====================================================== */
#define BPLC_RX_BPF5_CFG1_RX_BPF5_A1_Pos  (16UL)                    /*!< BPLC RX_BPF5_CFG1: RX_BPF5_A1 (Bit 16)                */
#define BPLC_RX_BPF5_CFG1_RX_BPF5_A1_Msk  (0xffff0000UL)            /*!< BPLC RX_BPF5_CFG1: RX_BPF5_A1 (Bitfield-Mask: 0xffff) */
#define BPLC_RX_BPF5_CFG1_RX_BPF5_A2_Pos  (0UL)                     /*!< BPLC RX_BPF5_CFG1: RX_BPF5_A2 (Bit 0)                 */
#define BPLC_RX_BPF5_CFG1_RX_BPF5_A2_Msk  (0xffffUL)                /*!< BPLC RX_BPF5_CFG1: RX_BPF5_A2 (Bitfield-Mask: 0xffff) */
/* =====================================================  TX_BPF0_CFG0  ====================================================== */
#define BPLC_TX_BPF0_CFG0_TX_BPF0_ENABLE_Pos (31UL)                 /*!< BPLC TX_BPF0_CFG0: TX_BPF0_ENABLE (Bit 31)            */
#define BPLC_TX_BPF0_CFG0_TX_BPF0_ENABLE_Msk (0x80000000UL)         /*!< BPLC TX_BPF0_CFG0: TX_BPF0_ENABLE (Bitfield-Mask: 0x01) */
#define BPLC_TX_BPF0_CFG0_TX_BPF0_GAIN_Pos (0UL)                    /*!< BPLC TX_BPF0_CFG0: TX_BPF0_GAIN (Bit 0)               */
#define BPLC_TX_BPF0_CFG0_TX_BPF0_GAIN_Msk (0xffffUL)               /*!< BPLC TX_BPF0_CFG0: TX_BPF0_GAIN (Bitfield-Mask: 0xffff) */
/* =====================================================  TX_BPF0_CFG1  ====================================================== */
#define BPLC_TX_BPF0_CFG1_TX_BPF0_A1_Pos  (16UL)                    /*!< BPLC TX_BPF0_CFG1: TX_BPF0_A1 (Bit 16)                */
#define BPLC_TX_BPF0_CFG1_TX_BPF0_A1_Msk  (0xffff0000UL)            /*!< BPLC TX_BPF0_CFG1: TX_BPF0_A1 (Bitfield-Mask: 0xffff) */
#define BPLC_TX_BPF0_CFG1_TX_BPF0_A2_Pos  (0UL)                     /*!< BPLC TX_BPF0_CFG1: TX_BPF0_A2 (Bit 0)                 */
#define BPLC_TX_BPF0_CFG1_TX_BPF0_A2_Msk  (0xffffUL)                /*!< BPLC TX_BPF0_CFG1: TX_BPF0_A2 (Bitfield-Mask: 0xffff) */
/* =====================================================  TX_BPF1_CFG0  ====================================================== */
#define BPLC_TX_BPF1_CFG0_TX_BPF1_ENABLE_Pos (31UL)                 /*!< BPLC TX_BPF1_CFG0: TX_BPF1_ENABLE (Bit 31)            */
#define BPLC_TX_BPF1_CFG0_TX_BPF1_ENABLE_Msk (0x80000000UL)         /*!< BPLC TX_BPF1_CFG0: TX_BPF1_ENABLE (Bitfield-Mask: 0x01) */
#define BPLC_TX_BPF1_CFG0_TX_BPF1_GAIN_Pos (0UL)                    /*!< BPLC TX_BPF1_CFG0: TX_BPF1_GAIN (Bit 0)               */
#define BPLC_TX_BPF1_CFG0_TX_BPF1_GAIN_Msk (0xffffUL)               /*!< BPLC TX_BPF1_CFG0: TX_BPF1_GAIN (Bitfield-Mask: 0xffff) */
/* =====================================================  TX_BPF1_CFG1  ====================================================== */
#define BPLC_TX_BPF1_CFG1_TX_BPF1_A1_Pos  (16UL)                    /*!< BPLC TX_BPF1_CFG1: TX_BPF1_A1 (Bit 16)                */
#define BPLC_TX_BPF1_CFG1_TX_BPF1_A1_Msk  (0xffff0000UL)            /*!< BPLC TX_BPF1_CFG1: TX_BPF1_A1 (Bitfield-Mask: 0xffff) */
#define BPLC_TX_BPF1_CFG1_TX_BPF1_A2_Pos  (0UL)                     /*!< BPLC TX_BPF1_CFG1: TX_BPF1_A2 (Bit 0)                 */
#define BPLC_TX_BPF1_CFG1_TX_BPF1_A2_Msk  (0xffffUL)                /*!< BPLC TX_BPF1_CFG1: TX_BPF1_A2 (Bitfield-Mask: 0xffff) */
/* =====================================================  TX_BPF2_CFG0  ====================================================== */
#define BPLC_TX_BPF2_CFG0_TX_BPF2_ENABLE_Pos (31UL)                 /*!< BPLC TX_BPF2_CFG0: TX_BPF2_ENABLE (Bit 31)            */
#define BPLC_TX_BPF2_CFG0_TX_BPF2_ENABLE_Msk (0x80000000UL)         /*!< BPLC TX_BPF2_CFG0: TX_BPF2_ENABLE (Bitfield-Mask: 0x01) */
#define BPLC_TX_BPF2_CFG0_TX_BPF2_GAIN_Pos (0UL)                    /*!< BPLC TX_BPF2_CFG0: TX_BPF2_GAIN (Bit 0)               */
#define BPLC_TX_BPF2_CFG0_TX_BPF2_GAIN_Msk (0xffffUL)               /*!< BPLC TX_BPF2_CFG0: TX_BPF2_GAIN (Bitfield-Mask: 0xffff) */
/* =====================================================  TX_BPF2_CFG1  ====================================================== */
#define BPLC_TX_BPF2_CFG1_TX_BPF2_A1_Pos  (16UL)                    /*!< BPLC TX_BPF2_CFG1: TX_BPF2_A1 (Bit 16)                */
#define BPLC_TX_BPF2_CFG1_TX_BPF2_A1_Msk  (0xffff0000UL)            /*!< BPLC TX_BPF2_CFG1: TX_BPF2_A1 (Bitfield-Mask: 0xffff) */
#define BPLC_TX_BPF2_CFG1_TX_BPF2_A2_Pos  (0UL)                     /*!< BPLC TX_BPF2_CFG1: TX_BPF2_A2 (Bit 0)                 */
#define BPLC_TX_BPF2_CFG1_TX_BPF2_A2_Msk  (0xffffUL)                /*!< BPLC TX_BPF2_CFG1: TX_BPF2_A2 (Bitfield-Mask: 0xffff) */
/* =====================================================  TX_BPF3_CFG0  ====================================================== */
#define BPLC_TX_BPF3_CFG0_TX_BPF3_ENABLE_Pos (31UL)                 /*!< BPLC TX_BPF3_CFG0: TX_BPF3_ENABLE (Bit 31)            */
#define BPLC_TX_BPF3_CFG0_TX_BPF3_ENABLE_Msk (0x80000000UL)         /*!< BPLC TX_BPF3_CFG0: TX_BPF3_ENABLE (Bitfield-Mask: 0x01) */
#define BPLC_TX_BPF3_CFG0_TX_BPF3_GAIN_Pos (0UL)                    /*!< BPLC TX_BPF3_CFG0: TX_BPF3_GAIN (Bit 0)               */
#define BPLC_TX_BPF3_CFG0_TX_BPF3_GAIN_Msk (0xffffUL)               /*!< BPLC TX_BPF3_CFG0: TX_BPF3_GAIN (Bitfield-Mask: 0xffff) */
/* =====================================================  TX_BPF3_CFG1  ====================================================== */
#define BPLC_TX_BPF3_CFG1_TX_BPF3_A1_Pos  (16UL)                    /*!< BPLC TX_BPF3_CFG1: TX_BPF3_A1 (Bit 16)                */
#define BPLC_TX_BPF3_CFG1_TX_BPF3_A1_Msk  (0xffff0000UL)            /*!< BPLC TX_BPF3_CFG1: TX_BPF3_A1 (Bitfield-Mask: 0xffff) */
#define BPLC_TX_BPF3_CFG1_TX_BPF3_A2_Pos  (0UL)                     /*!< BPLC TX_BPF3_CFG1: TX_BPF3_A2 (Bit 0)                 */
#define BPLC_TX_BPF3_CFG1_TX_BPF3_A2_Msk  (0xffffUL)                /*!< BPLC TX_BPF3_CFG1: TX_BPF3_A2 (Bitfield-Mask: 0xffff) */
/* =====================================================  TX_BPF4_CFG0  ====================================================== */
#define BPLC_TX_BPF4_CFG0_TX_BPF4_ENABLE_Pos (31UL)                 /*!< BPLC TX_BPF4_CFG0: TX_BPF4_ENABLE (Bit 31)            */
#define BPLC_TX_BPF4_CFG0_TX_BPF4_ENABLE_Msk (0x80000000UL)         /*!< BPLC TX_BPF4_CFG0: TX_BPF4_ENABLE (Bitfield-Mask: 0x01) */
#define BPLC_TX_BPF4_CFG0_TX_BPF4_GAIN_Pos (0UL)                    /*!< BPLC TX_BPF4_CFG0: TX_BPF4_GAIN (Bit 0)               */
#define BPLC_TX_BPF4_CFG0_TX_BPF4_GAIN_Msk (0xffffUL)               /*!< BPLC TX_BPF4_CFG0: TX_BPF4_GAIN (Bitfield-Mask: 0xffff) */
/* =====================================================  TX_BPF4_CFG1  ====================================================== */
#define BPLC_TX_BPF4_CFG1_TX_BPF4_A1_Pos  (16UL)                    /*!< BPLC TX_BPF4_CFG1: TX_BPF4_A1 (Bit 16)                */
#define BPLC_TX_BPF4_CFG1_TX_BPF4_A1_Msk  (0xffff0000UL)            /*!< BPLC TX_BPF4_CFG1: TX_BPF4_A1 (Bitfield-Mask: 0xffff) */
#define BPLC_TX_BPF4_CFG1_TX_BPF4_A2_Pos  (0UL)                     /*!< BPLC TX_BPF4_CFG1: TX_BPF4_A2 (Bit 0)                 */
#define BPLC_TX_BPF4_CFG1_TX_BPF4_A2_Msk  (0xffffUL)                /*!< BPLC TX_BPF4_CFG1: TX_BPF4_A2 (Bitfield-Mask: 0xffff) */
/* =====================================================  TX_BPF5_CFG0  ====================================================== */
#define BPLC_TX_BPF5_CFG0_TX_BPF5_ENABLE_Pos (31UL)                 /*!< BPLC TX_BPF5_CFG0: TX_BPF5_ENABLE (Bit 31)            */
#define BPLC_TX_BPF5_CFG0_TX_BPF5_ENABLE_Msk (0x80000000UL)         /*!< BPLC TX_BPF5_CFG0: TX_BPF5_ENABLE (Bitfield-Mask: 0x01) */
#define BPLC_TX_BPF5_CFG0_TX_BPF5_GAIN_Pos (0UL)                    /*!< BPLC TX_BPF5_CFG0: TX_BPF5_GAIN (Bit 0)               */
#define BPLC_TX_BPF5_CFG0_TX_BPF5_GAIN_Msk (0xffffUL)               /*!< BPLC TX_BPF5_CFG0: TX_BPF5_GAIN (Bitfield-Mask: 0xffff) */
/* =====================================================  TX_BPF5_CFG1  ====================================================== */
#define BPLC_TX_BPF5_CFG1_TX_BPF5_A1_Pos  (16UL)                    /*!< BPLC TX_BPF5_CFG1: TX_BPF5_A1 (Bit 16)                */
#define BPLC_TX_BPF5_CFG1_TX_BPF5_A1_Msk  (0xffff0000UL)            /*!< BPLC TX_BPF5_CFG1: TX_BPF5_A1 (Bitfield-Mask: 0xffff) */
#define BPLC_TX_BPF5_CFG1_TX_BPF5_A2_Pos  (0UL)                     /*!< BPLC TX_BPF5_CFG1: TX_BPF5_A2 (Bit 0)                 */
#define BPLC_TX_BPF5_CFG1_TX_BPF5_A2_Msk  (0xffffUL)                /*!< BPLC TX_BPF5_CFG1: TX_BPF5_A2 (Bitfield-Mask: 0xffff) */
/* =======================================================  PF0_CFG0  ======================================================== */
#define BPLC_PF0_CFG0_PF0_RISE_CONT_CNT_Pos (26UL)                  /*!< BPLC PF0_CFG0: PF0_RISE_CONT_CNT (Bit 26)             */
#define BPLC_PF0_CFG0_PF0_RISE_CONT_CNT_Msk (0xfc000000UL)          /*!< BPLC PF0_CFG0: PF0_RISE_CONT_CNT (Bitfield-Mask: 0x3f) */
#define BPLC_PF0_CFG0_PF0_FALL_CONT_CNT_Pos (20UL)                  /*!< BPLC PF0_CFG0: PF0_FALL_CONT_CNT (Bit 20)             */
#define BPLC_PF0_CFG0_PF0_FALL_CONT_CNT_Msk (0x3f00000UL)           /*!< BPLC PF0_CFG0: PF0_FALL_CONT_CNT (Bitfield-Mask: 0x3f) */
#define BPLC_PF0_CFG0_PF0_MASK_RISE_RATIO_Pos (12UL)                /*!< BPLC PF0_CFG0: PF0_MASK_RISE_RATIO (Bit 12)           */
#define BPLC_PF0_CFG0_PF0_MASK_RISE_RATIO_Msk (0xff000UL)           /*!< BPLC PF0_CFG0: PF0_MASK_RISE_RATIO (Bitfield-Mask: 0xff) */
#define BPLC_PF0_CFG0_PF0_MASK_FALL_RATIO_Pos (4UL)                 /*!< BPLC PF0_CFG0: PF0_MASK_FALL_RATIO (Bit 4)            */
#define BPLC_PF0_CFG0_PF0_MASK_FALL_RATIO_Msk (0xff0UL)             /*!< BPLC PF0_CFG0: PF0_MASK_FALL_RATIO (Bitfield-Mask: 0xff) */
#define BPLC_PF0_CFG0_PF0_MASK_EN_Pos     (3UL)                     /*!< BPLC PF0_CFG0: PF0_MASK_EN (Bit 3)                    */
#define BPLC_PF0_CFG0_PF0_MASK_EN_Msk     (0x8UL)                   /*!< BPLC PF0_CFG0: PF0_MASK_EN (Bitfield-Mask: 0x01)      */
#define BPLC_PF0_CFG0_PF0_RMS_FLT_ALPH_Pos (0UL)                    /*!< BPLC PF0_CFG0: PF0_RMS_FLT_ALPH (Bit 0)               */
#define BPLC_PF0_CFG0_PF0_RMS_FLT_ALPH_Msk (0x7UL)                  /*!< BPLC PF0_CFG0: PF0_RMS_FLT_ALPH (Bitfield-Mask: 0x07) */
/* =======================================================  PF1_CFG0  ======================================================== */
#define BPLC_PF1_CFG0_PF1_RISE_CONT_CNT_Pos (26UL)                  /*!< BPLC PF1_CFG0: PF1_RISE_CONT_CNT (Bit 26)             */
#define BPLC_PF1_CFG0_PF1_RISE_CONT_CNT_Msk (0xfc000000UL)          /*!< BPLC PF1_CFG0: PF1_RISE_CONT_CNT (Bitfield-Mask: 0x3f) */
#define BPLC_PF1_CFG0_PF1_FALL_CONT_CNT_Pos (20UL)                  /*!< BPLC PF1_CFG0: PF1_FALL_CONT_CNT (Bit 20)             */
#define BPLC_PF1_CFG0_PF1_FALL_CONT_CNT_Msk (0x3f00000UL)           /*!< BPLC PF1_CFG0: PF1_FALL_CONT_CNT (Bitfield-Mask: 0x3f) */
#define BPLC_PF1_CFG0_PF1_MASK_RISE_RATIO_Pos (12UL)                /*!< BPLC PF1_CFG0: PF1_MASK_RISE_RATIO (Bit 12)           */
#define BPLC_PF1_CFG0_PF1_MASK_RISE_RATIO_Msk (0xff000UL)           /*!< BPLC PF1_CFG0: PF1_MASK_RISE_RATIO (Bitfield-Mask: 0xff) */
#define BPLC_PF1_CFG0_PF1_MASK_FALL_RATIO_Pos (4UL)                 /*!< BPLC PF1_CFG0: PF1_MASK_FALL_RATIO (Bit 4)            */
#define BPLC_PF1_CFG0_PF1_MASK_FALL_RATIO_Msk (0xff0UL)             /*!< BPLC PF1_CFG0: PF1_MASK_FALL_RATIO (Bitfield-Mask: 0xff) */
#define BPLC_PF1_CFG0_PF1_MASK_EN_Pos     (3UL)                     /*!< BPLC PF1_CFG0: PF1_MASK_EN (Bit 3)                    */
#define BPLC_PF1_CFG0_PF1_MASK_EN_Msk     (0x8UL)                   /*!< BPLC PF1_CFG0: PF1_MASK_EN (Bitfield-Mask: 0x01)      */
#define BPLC_PF1_CFG0_PF1_RMS_FLT_ALPH_Pos (0UL)                    /*!< BPLC PF1_CFG0: PF1_RMS_FLT_ALPH (Bit 0)               */
#define BPLC_PF1_CFG0_PF1_RMS_FLT_ALPH_Msk (0x7UL)                  /*!< BPLC PF1_CFG0: PF1_RMS_FLT_ALPH (Bitfield-Mask: 0x07) */
/* =======================================================  RX_PARAM  ======================================================== */
#define BPLC_RX_PARAM_RX_TMI_EXT_Pos      (20UL)                    /*!< BPLC RX_PARAM: RX_TMI_EXT (Bit 20)                    */
#define BPLC_RX_PARAM_RX_TMI_EXT_Msk      (0xf00000UL)              /*!< BPLC RX_PARAM: RX_TMI_EXT (Bitfield-Mask: 0x0f)       */
#define BPLC_RX_PARAM_RX_TMI_Pos          (16UL)                    /*!< BPLC RX_PARAM: RX_TMI (Bit 16)                        */
#define BPLC_RX_PARAM_RX_TMI_Msk          (0xf0000UL)               /*!< BPLC RX_PARAM: RX_TMI (Bitfield-Mask: 0x0f)           */
#define BPLC_RX_PARAM_RX_PB_NUM_Pos       (10UL)                    /*!< BPLC RX_PARAM: RX_PB_NUM (Bit 10)                     */
#define BPLC_RX_PARAM_RX_PB_NUM_Msk       (0x1c00UL)                /*!< BPLC RX_PARAM: RX_PB_NUM (Bitfield-Mask: 0x07)        */
#define BPLC_RX_PARAM_RX_PBSIZE_Pos       (0UL)                     /*!< BPLC RX_PARAM: RX_PBSIZE (Bit 0)                      */
#define BPLC_RX_PARAM_RX_PBSIZE_Msk       (0x3ffUL)                 /*!< BPLC RX_PARAM: RX_PBSIZE (Bitfield-Mask: 0x3ff)       */
/* ==================================================  NTB_TX_START_TIME2  =================================================== */
#define BPLC_NTB_TX_START_TIME2_NTB_TX_START_TARGET2_Pos (0UL)      /*!< BPLC NTB_TX_START_TIME2: NTB_TX_START_TARGET2 (Bit 0) */
#define BPLC_NTB_TX_START_TIME2_NTB_TX_START_TARGET2_Msk (0xffffffffUL) /*!< BPLC NTB_TX_START_TIME2: NTB_TX_START_TARGET2 (Bitfield-Mask: 0xffffffff) */
/* =====================================================  AGC_TAB_CFG0  ====================================================== */
#define BPLC_AGC_TAB_CFG0_AFE_GAIN_TAB3_Pos (24UL)                  /*!< BPLC AGC_TAB_CFG0: AFE_GAIN_TAB3 (Bit 24)             */
#define BPLC_AGC_TAB_CFG0_AFE_GAIN_TAB3_Msk (0xff000000UL)          /*!< BPLC AGC_TAB_CFG0: AFE_GAIN_TAB3 (Bitfield-Mask: 0xff) */
#define BPLC_AGC_TAB_CFG0_AFE_GAIN_TAB2_Pos (16UL)                  /*!< BPLC AGC_TAB_CFG0: AFE_GAIN_TAB2 (Bit 16)             */
#define BPLC_AGC_TAB_CFG0_AFE_GAIN_TAB2_Msk (0xff0000UL)            /*!< BPLC AGC_TAB_CFG0: AFE_GAIN_TAB2 (Bitfield-Mask: 0xff) */
#define BPLC_AGC_TAB_CFG0_AFE_GAIN_TAB1_Pos (8UL)                   /*!< BPLC AGC_TAB_CFG0: AFE_GAIN_TAB1 (Bit 8)              */
#define BPLC_AGC_TAB_CFG0_AFE_GAIN_TAB1_Msk (0xff00UL)              /*!< BPLC AGC_TAB_CFG0: AFE_GAIN_TAB1 (Bitfield-Mask: 0xff) */
#define BPLC_AGC_TAB_CFG0_AFE_GAIN_TAB0_Pos (0UL)                   /*!< BPLC AGC_TAB_CFG0: AFE_GAIN_TAB0 (Bit 0)              */
#define BPLC_AGC_TAB_CFG0_AFE_GAIN_TAB0_Msk (0xffUL)                /*!< BPLC AGC_TAB_CFG0: AFE_GAIN_TAB0 (Bitfield-Mask: 0xff) */
/* =====================================================  AGC_TAB_CFG1  ====================================================== */
#define BPLC_AGC_TAB_CFG1_AFE_GAIN_TAB7_Pos (24UL)                  /*!< BPLC AGC_TAB_CFG1: AFE_GAIN_TAB7 (Bit 24)             */
#define BPLC_AGC_TAB_CFG1_AFE_GAIN_TAB7_Msk (0xff000000UL)          /*!< BPLC AGC_TAB_CFG1: AFE_GAIN_TAB7 (Bitfield-Mask: 0xff) */
#define BPLC_AGC_TAB_CFG1_AFE_GAIN_TAB6_Pos (16UL)                  /*!< BPLC AGC_TAB_CFG1: AFE_GAIN_TAB6 (Bit 16)             */
#define BPLC_AGC_TAB_CFG1_AFE_GAIN_TAB6_Msk (0xff0000UL)            /*!< BPLC AGC_TAB_CFG1: AFE_GAIN_TAB6 (Bitfield-Mask: 0xff) */
#define BPLC_AGC_TAB_CFG1_AFE_GAIN_TAB5_Pos (8UL)                   /*!< BPLC AGC_TAB_CFG1: AFE_GAIN_TAB5 (Bit 8)              */
#define BPLC_AGC_TAB_CFG1_AFE_GAIN_TAB5_Msk (0xff00UL)              /*!< BPLC AGC_TAB_CFG1: AFE_GAIN_TAB5 (Bitfield-Mask: 0xff) */
#define BPLC_AGC_TAB_CFG1_AFE_GAIN_TAB4_Pos (0UL)                   /*!< BPLC AGC_TAB_CFG1: AFE_GAIN_TAB4 (Bit 0)              */
#define BPLC_AGC_TAB_CFG1_AFE_GAIN_TAB4_Msk (0xffUL)                /*!< BPLC AGC_TAB_CFG1: AFE_GAIN_TAB4 (Bitfield-Mask: 0xff) */
/* =====================================================  AGC_TAB_CFG2  ====================================================== */
#define BPLC_AGC_TAB_CFG2_AFE_GAIN_TAB11_Pos (24UL)                 /*!< BPLC AGC_TAB_CFG2: AFE_GAIN_TAB11 (Bit 24)            */
#define BPLC_AGC_TAB_CFG2_AFE_GAIN_TAB11_Msk (0xff000000UL)         /*!< BPLC AGC_TAB_CFG2: AFE_GAIN_TAB11 (Bitfield-Mask: 0xff) */
#define BPLC_AGC_TAB_CFG2_AFE_GAIN_TAB10_Pos (16UL)                 /*!< BPLC AGC_TAB_CFG2: AFE_GAIN_TAB10 (Bit 16)            */
#define BPLC_AGC_TAB_CFG2_AFE_GAIN_TAB10_Msk (0xff0000UL)           /*!< BPLC AGC_TAB_CFG2: AFE_GAIN_TAB10 (Bitfield-Mask: 0xff) */
#define BPLC_AGC_TAB_CFG2_AFE_GAIN_TAB9_Pos (8UL)                   /*!< BPLC AGC_TAB_CFG2: AFE_GAIN_TAB9 (Bit 8)              */
#define BPLC_AGC_TAB_CFG2_AFE_GAIN_TAB9_Msk (0xff00UL)              /*!< BPLC AGC_TAB_CFG2: AFE_GAIN_TAB9 (Bitfield-Mask: 0xff) */
#define BPLC_AGC_TAB_CFG2_AFE_GAIN_TAB8_Pos (0UL)                   /*!< BPLC AGC_TAB_CFG2: AFE_GAIN_TAB8 (Bit 0)              */
#define BPLC_AGC_TAB_CFG2_AFE_GAIN_TAB8_Msk (0xffUL)                /*!< BPLC AGC_TAB_CFG2: AFE_GAIN_TAB8 (Bitfield-Mask: 0xff) */
/* =====================================================  AGC_TAB_CFG3  ====================================================== */
#define BPLC_AGC_TAB_CFG3_AFE_GAIN_TAB15_Pos (24UL)                 /*!< BPLC AGC_TAB_CFG3: AFE_GAIN_TAB15 (Bit 24)            */
#define BPLC_AGC_TAB_CFG3_AFE_GAIN_TAB15_Msk (0xff000000UL)         /*!< BPLC AGC_TAB_CFG3: AFE_GAIN_TAB15 (Bitfield-Mask: 0xff) */
#define BPLC_AGC_TAB_CFG3_AFE_GAIN_TAB14_Pos (16UL)                 /*!< BPLC AGC_TAB_CFG3: AFE_GAIN_TAB14 (Bit 16)            */
#define BPLC_AGC_TAB_CFG3_AFE_GAIN_TAB14_Msk (0xff0000UL)           /*!< BPLC AGC_TAB_CFG3: AFE_GAIN_TAB14 (Bitfield-Mask: 0xff) */
#define BPLC_AGC_TAB_CFG3_AFE_GAIN_TAB13_Pos (8UL)                  /*!< BPLC AGC_TAB_CFG3: AFE_GAIN_TAB13 (Bit 8)             */
#define BPLC_AGC_TAB_CFG3_AFE_GAIN_TAB13_Msk (0xff00UL)             /*!< BPLC AGC_TAB_CFG3: AFE_GAIN_TAB13 (Bitfield-Mask: 0xff) */
#define BPLC_AGC_TAB_CFG3_AFE_GAIN_TAB12_Pos (0UL)                  /*!< BPLC AGC_TAB_CFG3: AFE_GAIN_TAB12 (Bit 0)             */
#define BPLC_AGC_TAB_CFG3_AFE_GAIN_TAB12_Msk (0xffUL)               /*!< BPLC AGC_TAB_CFG3: AFE_GAIN_TAB12 (Bitfield-Mask: 0xff) */
/* =====================================================  AGC_TAB_CFG4  ====================================================== */
#define BPLC_AGC_TAB_CFG4_AFE_GAIN_TAB19_Pos (24UL)                 /*!< BPLC AGC_TAB_CFG4: AFE_GAIN_TAB19 (Bit 24)            */
#define BPLC_AGC_TAB_CFG4_AFE_GAIN_TAB19_Msk (0xff000000UL)         /*!< BPLC AGC_TAB_CFG4: AFE_GAIN_TAB19 (Bitfield-Mask: 0xff) */
#define BPLC_AGC_TAB_CFG4_AFE_GAIN_TAB18_Pos (16UL)                 /*!< BPLC AGC_TAB_CFG4: AFE_GAIN_TAB18 (Bit 16)            */
#define BPLC_AGC_TAB_CFG4_AFE_GAIN_TAB18_Msk (0xff0000UL)           /*!< BPLC AGC_TAB_CFG4: AFE_GAIN_TAB18 (Bitfield-Mask: 0xff) */
#define BPLC_AGC_TAB_CFG4_AFE_GAIN_TAB17_Pos (8UL)                  /*!< BPLC AGC_TAB_CFG4: AFE_GAIN_TAB17 (Bit 8)             */
#define BPLC_AGC_TAB_CFG4_AFE_GAIN_TAB17_Msk (0xff00UL)             /*!< BPLC AGC_TAB_CFG4: AFE_GAIN_TAB17 (Bitfield-Mask: 0xff) */
#define BPLC_AGC_TAB_CFG4_AFE_GAIN_TAB16_Pos (0UL)                  /*!< BPLC AGC_TAB_CFG4: AFE_GAIN_TAB16 (Bit 0)             */
#define BPLC_AGC_TAB_CFG4_AFE_GAIN_TAB16_Msk (0xffUL)               /*!< BPLC AGC_TAB_CFG4: AFE_GAIN_TAB16 (Bitfield-Mask: 0xff) */
/* =====================================================  AGC_TAB_CFG5  ====================================================== */
#define BPLC_AGC_TAB_CFG5_AFE_GAIN_TAB23_Pos (24UL)                 /*!< BPLC AGC_TAB_CFG5: AFE_GAIN_TAB23 (Bit 24)            */
#define BPLC_AGC_TAB_CFG5_AFE_GAIN_TAB23_Msk (0xff000000UL)         /*!< BPLC AGC_TAB_CFG5: AFE_GAIN_TAB23 (Bitfield-Mask: 0xff) */
#define BPLC_AGC_TAB_CFG5_AFE_GAIN_TAB22_Pos (16UL)                 /*!< BPLC AGC_TAB_CFG5: AFE_GAIN_TAB22 (Bit 16)            */
#define BPLC_AGC_TAB_CFG5_AFE_GAIN_TAB22_Msk (0xff0000UL)           /*!< BPLC AGC_TAB_CFG5: AFE_GAIN_TAB22 (Bitfield-Mask: 0xff) */
#define BPLC_AGC_TAB_CFG5_AFE_GAIN_TAB21_Pos (8UL)                  /*!< BPLC AGC_TAB_CFG5: AFE_GAIN_TAB21 (Bit 8)             */
#define BPLC_AGC_TAB_CFG5_AFE_GAIN_TAB21_Msk (0xff00UL)             /*!< BPLC AGC_TAB_CFG5: AFE_GAIN_TAB21 (Bitfield-Mask: 0xff) */
#define BPLC_AGC_TAB_CFG5_AFE_GAIN_TAB20_Pos (0UL)                  /*!< BPLC AGC_TAB_CFG5: AFE_GAIN_TAB20 (Bit 0)             */
#define BPLC_AGC_TAB_CFG5_AFE_GAIN_TAB20_Msk (0xffUL)               /*!< BPLC AGC_TAB_CFG5: AFE_GAIN_TAB20 (Bitfield-Mask: 0xff) */
/* =====================================================  AGC_TAB_CFG6  ====================================================== */
#define BPLC_AGC_TAB_CFG6_AFE_GAIN_TAB27_Pos (24UL)                 /*!< BPLC AGC_TAB_CFG6: AFE_GAIN_TAB27 (Bit 24)            */
#define BPLC_AGC_TAB_CFG6_AFE_GAIN_TAB27_Msk (0xff000000UL)         /*!< BPLC AGC_TAB_CFG6: AFE_GAIN_TAB27 (Bitfield-Mask: 0xff) */
#define BPLC_AGC_TAB_CFG6_AFE_GAIN_TAB26_Pos (16UL)                 /*!< BPLC AGC_TAB_CFG6: AFE_GAIN_TAB26 (Bit 16)            */
#define BPLC_AGC_TAB_CFG6_AFE_GAIN_TAB26_Msk (0xff0000UL)           /*!< BPLC AGC_TAB_CFG6: AFE_GAIN_TAB26 (Bitfield-Mask: 0xff) */
#define BPLC_AGC_TAB_CFG6_AFE_GAIN_TAB25_Pos (8UL)                  /*!< BPLC AGC_TAB_CFG6: AFE_GAIN_TAB25 (Bit 8)             */
#define BPLC_AGC_TAB_CFG6_AFE_GAIN_TAB25_Msk (0xff00UL)             /*!< BPLC AGC_TAB_CFG6: AFE_GAIN_TAB25 (Bitfield-Mask: 0xff) */
#define BPLC_AGC_TAB_CFG6_AFE_GAIN_TAB24_Pos (0UL)                  /*!< BPLC AGC_TAB_CFG6: AFE_GAIN_TAB24 (Bit 0)             */
#define BPLC_AGC_TAB_CFG6_AFE_GAIN_TAB24_Msk (0xffUL)               /*!< BPLC AGC_TAB_CFG6: AFE_GAIN_TAB24 (Bitfield-Mask: 0xff) */
/* =====================================================  AGC_TAB_CFG7  ====================================================== */
#define BPLC_AGC_TAB_CFG7_AFE_GAIN_TAB31_Pos (24UL)                 /*!< BPLC AGC_TAB_CFG7: AFE_GAIN_TAB31 (Bit 24)            */
#define BPLC_AGC_TAB_CFG7_AFE_GAIN_TAB31_Msk (0xff000000UL)         /*!< BPLC AGC_TAB_CFG7: AFE_GAIN_TAB31 (Bitfield-Mask: 0xff) */
#define BPLC_AGC_TAB_CFG7_AFE_GAIN_TAB30_Pos (16UL)                 /*!< BPLC AGC_TAB_CFG7: AFE_GAIN_TAB30 (Bit 16)            */
#define BPLC_AGC_TAB_CFG7_AFE_GAIN_TAB30_Msk (0xff0000UL)           /*!< BPLC AGC_TAB_CFG7: AFE_GAIN_TAB30 (Bitfield-Mask: 0xff) */
#define BPLC_AGC_TAB_CFG7_AFE_GAIN_TAB29_Pos (8UL)                  /*!< BPLC AGC_TAB_CFG7: AFE_GAIN_TAB29 (Bit 8)             */
#define BPLC_AGC_TAB_CFG7_AFE_GAIN_TAB29_Msk (0xff00UL)             /*!< BPLC AGC_TAB_CFG7: AFE_GAIN_TAB29 (Bitfield-Mask: 0xff) */
#define BPLC_AGC_TAB_CFG7_AFE_GAIN_TAB28_Pos (0UL)                  /*!< BPLC AGC_TAB_CFG7: AFE_GAIN_TAB28 (Bit 0)             */
#define BPLC_AGC_TAB_CFG7_AFE_GAIN_TAB28_Msk (0xffUL)               /*!< BPLC AGC_TAB_CFG7: AFE_GAIN_TAB28 (Bitfield-Mask: 0xff) */
/* =======================================================  GAD_CFG0  ======================================================== */
#define BPLC_GAD_CFG0_GAD_CFG_GAIN_Pos    (16UL)                    /*!< BPLC GAD_CFG0: GAD_CFG_GAIN (Bit 16)                  */
#define BPLC_GAD_CFG0_GAD_CFG_GAIN_Msk    (0xffff0000UL)            /*!< BPLC GAD_CFG0: GAD_CFG_GAIN (Bitfield-Mask: 0xffff)   */
#define BPLC_GAD_CFG0_GAD_SMP_RATE_Pos    (10UL)                    /*!< BPLC GAD_CFG0: GAD_SMP_RATE (Bit 10)                  */
#define BPLC_GAD_CFG0_GAD_SMP_RATE_Msk    (0x3c00UL)                /*!< BPLC GAD_CFG0: GAD_SMP_RATE (Bitfield-Mask: 0x0f)     */
#define BPLC_GAD_CFG0_FORCE_GAD_GAIN_Pos  (9UL)                     /*!< BPLC GAD_CFG0: FORCE_GAD_GAIN (Bit 9)                 */
#define BPLC_GAD_CFG0_FORCE_GAD_GAIN_Msk  (0x200UL)                 /*!< BPLC GAD_CFG0: FORCE_GAD_GAIN (Bitfield-Mask: 0x01)   */
#define BPLC_GAD_CFG0_GAD_GAIN_LOCK_EN_Pos (8UL)                    /*!< BPLC GAD_CFG0: GAD_GAIN_LOCK_EN (Bit 8)               */
#define BPLC_GAD_CFG0_GAD_GAIN_LOCK_EN_Msk (0x100UL)                /*!< BPLC GAD_CFG0: GAD_GAIN_LOCK_EN (Bitfield-Mask: 0x01) */
#define BPLC_GAD_CFG0_GAD_BLK_EN_Pos      (7UL)                     /*!< BPLC GAD_CFG0: GAD_BLK_EN (Bit 7)                     */
#define BPLC_GAD_CFG0_GAD_BLK_EN_Msk      (0x80UL)                  /*!< BPLC GAD_CFG0: GAD_BLK_EN (Bitfield-Mask: 0x01)       */
#define BPLC_GAD_CFG0_GAD_CLP_EN_Pos      (6UL)                     /*!< BPLC GAD_CFG0: GAD_CLP_EN (Bit 6)                     */
#define BPLC_GAD_CFG0_GAD_CLP_EN_Msk      (0x40UL)                  /*!< BPLC GAD_CFG0: GAD_CLP_EN (Bitfield-Mask: 0x01)       */
#define BPLC_GAD_CFG0_GAD_ENABLE_Pos      (5UL)                     /*!< BPLC GAD_CFG0: GAD_ENABLE (Bit 5)                     */
#define BPLC_GAD_CFG0_GAD_ENABLE_Msk      (0x20UL)                  /*!< BPLC GAD_CFG0: GAD_ENABLE (Bitfield-Mask: 0x01)       */
#define BPLC_GAD_CFG0_GAD_ERR_MU_Pos      (2UL)                     /*!< BPLC GAD_CFG0: GAD_ERR_MU (Bit 2)                     */
#define BPLC_GAD_CFG0_GAD_ERR_MU_Msk      (0x1cUL)                  /*!< BPLC GAD_CFG0: GAD_ERR_MU (Bitfield-Mask: 0x07)       */
#define BPLC_GAD_CFG0_GAD_MUA_Pos         (0UL)                     /*!< BPLC GAD_CFG0: GAD_MUA (Bit 0)                        */
#define BPLC_GAD_CFG0_GAD_MUA_Msk         (0x3UL)                   /*!< BPLC GAD_CFG0: GAD_MUA (Bitfield-Mask: 0x03)          */
/* =======================================================  GAD_CFG1  ======================================================== */
#define BPLC_GAD_CFG1_GAD_TH_BLK_Pos      (16UL)                    /*!< BPLC GAD_CFG1: GAD_TH_BLK (Bit 16)                    */
#define BPLC_GAD_CFG1_GAD_TH_BLK_Msk      (0xffff0000UL)            /*!< BPLC GAD_CFG1: GAD_TH_BLK (Bitfield-Mask: 0xffff)     */
#define BPLC_GAD_CFG1_GAD_TH_CLP_Pos      (0UL)                     /*!< BPLC GAD_CFG1: GAD_TH_CLP (Bit 0)                     */
#define BPLC_GAD_CFG1_GAD_TH_CLP_Msk      (0xffffUL)                /*!< BPLC GAD_CFG1: GAD_TH_CLP (Bitfield-Mask: 0xffff)     */
/* =======================================================  GAD_CFG2  ======================================================== */
#define BPLC_GAD_CFG2_GAD_REF_Pos         (0UL)                     /*!< BPLC GAD_CFG2: GAD_REF (Bit 0)                        */
#define BPLC_GAD_CFG2_GAD_REF_Msk         (0xffffUL)                /*!< BPLC GAD_CFG2: GAD_REF (Bitfield-Mask: 0xffff)        */
/* ======================================================  GAD_STATUS0  ====================================================== */
#define BPLC_GAD_STATUS0_GAD_LOCKED_GAIN_Pos (0UL)                  /*!< BPLC GAD_STATUS0: GAD_LOCKED_GAIN (Bit 0)             */
#define BPLC_GAD_STATUS0_GAD_LOCKED_GAIN_Msk (0xfffffffUL)          /*!< BPLC GAD_STATUS0: GAD_LOCKED_GAIN (Bitfield-Mask: 0xfffffff) */
/* ======================================================  GAD_STATUS1  ====================================================== */
#define BPLC_GAD_STATUS1_GAD_RMS_Pos      (16UL)                    /*!< BPLC GAD_STATUS1: GAD_RMS (Bit 16)                    */
#define BPLC_GAD_STATUS1_GAD_RMS_Msk      (0xffff0000UL)            /*!< BPLC GAD_STATUS1: GAD_RMS (Bitfield-Mask: 0xffff)     */
#define BPLC_GAD_STATUS1_GAD_LOCKED_RMS_Pos (0UL)                   /*!< BPLC GAD_STATUS1: GAD_LOCKED_RMS (Bit 0)              */
#define BPLC_GAD_STATUS1_GAD_LOCKED_RMS_Msk (0xffffUL)              /*!< BPLC GAD_STATUS1: GAD_LOCKED_RMS (Bitfield-Mask: 0xffff) */
/* =======================================================  DC_RM_CFG  ======================================================= */
#define BPLC_DC_RM_CFG_DC_RM_ALPHA_Pos    (1UL)                     /*!< BPLC DC_RM_CFG: DC_RM_ALPHA (Bit 1)                   */
#define BPLC_DC_RM_CFG_DC_RM_ALPHA_Msk    (0xeUL)                   /*!< BPLC DC_RM_CFG: DC_RM_ALPHA (Bitfield-Mask: 0x07)     */
#define BPLC_DC_RM_CFG_DC_RM_ENABLE_Pos   (0UL)                     /*!< BPLC DC_RM_CFG: DC_RM_ENABLE (Bit 0)                  */
#define BPLC_DC_RM_CFG_DC_RM_ENABLE_Msk   (0x1UL)                   /*!< BPLC DC_RM_CFG: DC_RM_ENABLE (Bitfield-Mask: 0x01)    */
/* =====================================================  TONE_RM_CFG0  ====================================================== */
#define BPLC_TONE_RM_CFG0_TONE_RM_LSHFT_Pos (16UL)                  /*!< BPLC TONE_RM_CFG0: TONE_RM_LSHFT (Bit 16)             */
#define BPLC_TONE_RM_CFG0_TONE_RM_LSHFT_Msk (0xff0000UL)            /*!< BPLC TONE_RM_CFG0: TONE_RM_LSHFT (Bitfield-Mask: 0xff) */
#define BPLC_TONE_RM_CFG0_TONE_RM_ENABLE_Pos (0UL)                  /*!< BPLC TONE_RM_CFG0: TONE_RM_ENABLE (Bit 0)             */
#define BPLC_TONE_RM_CFG0_TONE_RM_ENABLE_Msk (0xffUL)               /*!< BPLC TONE_RM_CFG0: TONE_RM_ENABLE (Bitfield-Mask: 0xff) */
/* =====================================================  TONE_RM_CFG1  ====================================================== */
#define BPLC_TONE_RM_CFG1_TONE_RM_ALPHA7_Pos (28UL)                 /*!< BPLC TONE_RM_CFG1: TONE_RM_ALPHA7 (Bit 28)            */
#define BPLC_TONE_RM_CFG1_TONE_RM_ALPHA7_Msk (0x70000000UL)         /*!< BPLC TONE_RM_CFG1: TONE_RM_ALPHA7 (Bitfield-Mask: 0x07) */
#define BPLC_TONE_RM_CFG1_TONE_RM_ALPHA6_Pos (24UL)                 /*!< BPLC TONE_RM_CFG1: TONE_RM_ALPHA6 (Bit 24)            */
#define BPLC_TONE_RM_CFG1_TONE_RM_ALPHA6_Msk (0x7000000UL)          /*!< BPLC TONE_RM_CFG1: TONE_RM_ALPHA6 (Bitfield-Mask: 0x07) */
#define BPLC_TONE_RM_CFG1_TONE_RM_ALPHA5_Pos (20UL)                 /*!< BPLC TONE_RM_CFG1: TONE_RM_ALPHA5 (Bit 20)            */
#define BPLC_TONE_RM_CFG1_TONE_RM_ALPHA5_Msk (0x700000UL)           /*!< BPLC TONE_RM_CFG1: TONE_RM_ALPHA5 (Bitfield-Mask: 0x07) */
#define BPLC_TONE_RM_CFG1_TONE_RM_ALPHA4_Pos (16UL)                 /*!< BPLC TONE_RM_CFG1: TONE_RM_ALPHA4 (Bit 16)            */
#define BPLC_TONE_RM_CFG1_TONE_RM_ALPHA4_Msk (0x70000UL)            /*!< BPLC TONE_RM_CFG1: TONE_RM_ALPHA4 (Bitfield-Mask: 0x07) */
#define BPLC_TONE_RM_CFG1_TONE_RM_ALPHA3_Pos (12UL)                 /*!< BPLC TONE_RM_CFG1: TONE_RM_ALPHA3 (Bit 12)            */
#define BPLC_TONE_RM_CFG1_TONE_RM_ALPHA3_Msk (0x7000UL)             /*!< BPLC TONE_RM_CFG1: TONE_RM_ALPHA3 (Bitfield-Mask: 0x07) */
#define BPLC_TONE_RM_CFG1_TONE_RM_ALPHA2_Pos (8UL)                  /*!< BPLC TONE_RM_CFG1: TONE_RM_ALPHA2 (Bit 8)             */
#define BPLC_TONE_RM_CFG1_TONE_RM_ALPHA2_Msk (0x700UL)              /*!< BPLC TONE_RM_CFG1: TONE_RM_ALPHA2 (Bitfield-Mask: 0x07) */
#define BPLC_TONE_RM_CFG1_TONE_RM_ALPHA1_Pos (4UL)                  /*!< BPLC TONE_RM_CFG1: TONE_RM_ALPHA1 (Bit 4)             */
#define BPLC_TONE_RM_CFG1_TONE_RM_ALPHA1_Msk (0x70UL)               /*!< BPLC TONE_RM_CFG1: TONE_RM_ALPHA1 (Bitfield-Mask: 0x07) */
#define BPLC_TONE_RM_CFG1_TONE_RM_ALPHA0_Pos (0UL)                  /*!< BPLC TONE_RM_CFG1: TONE_RM_ALPHA0 (Bit 0)             */
#define BPLC_TONE_RM_CFG1_TONE_RM_ALPHA0_Msk (0x7UL)                /*!< BPLC TONE_RM_CFG1: TONE_RM_ALPHA0 (Bitfield-Mask: 0x07) */
/* ======================================================  TONE_RM_FCW  ====================================================== */
#define BPLC_TONE_RM_FCW_TONE_RM_FCW0_Pos (0UL)                     /*!< BPLC TONE_RM_FCW: TONE_RM_FCW0 (Bit 0)                */
#define BPLC_TONE_RM_FCW_TONE_RM_FCW0_Msk (0xffffffffUL)            /*!< BPLC TONE_RM_FCW: TONE_RM_FCW0 (Bitfield-Mask: 0xffffffff) */
/* ====================================================  PULSE_DET_CFG0  ===================================================== */
#define BPLC_PULSE_DET_CFG0_NBI_LOW_LEVEL_TIME_THR_Pos (16UL)       /*!< BPLC PULSE_DET_CFG0: NBI_LOW_LEVEL_TIME_THR (Bit 16)  */
#define BPLC_PULSE_DET_CFG0_NBI_LOW_LEVEL_TIME_THR_Msk (0x3ff0000UL) /*!< BPLC PULSE_DET_CFG0: NBI_LOW_LEVEL_TIME_THR (Bitfield-Mask: 0x3ff) */
#define BPLC_PULSE_DET_CFG0_NBI_PULSE_THR_Pos (0UL)                 /*!< BPLC PULSE_DET_CFG0: NBI_PULSE_THR (Bit 0)            */
#define BPLC_PULSE_DET_CFG0_NBI_PULSE_THR_Msk (0xffffUL)            /*!< BPLC PULSE_DET_CFG0: NBI_PULSE_THR (Bitfield-Mask: 0xffff) */
/* =====================================================  PULSE_DET_RES  ===================================================== */
#define BPLC_PULSE_DET_RES_NBI_PULSE_PERIOD_CNT_Pos (21UL)          /*!< BPLC PULSE_DET_RES: NBI_PULSE_PERIOD_CNT (Bit 21)     */
#define BPLC_PULSE_DET_RES_NBI_PULSE_PERIOD_CNT_Msk (0xffe00000UL)  /*!< BPLC PULSE_DET_RES: NBI_PULSE_PERIOD_CNT (Bitfield-Mask: 0x7ff) */
#define BPLC_PULSE_DET_RES_NBI_PULSE_PERIOD_SUM_Pos (0UL)           /*!< BPLC PULSE_DET_RES: NBI_PULSE_PERIOD_SUM (Bit 0)      */
#define BPLC_PULSE_DET_RES_NBI_PULSE_PERIOD_SUM_Msk (0x1fffffUL)    /*!< BPLC PULSE_DET_RES: NBI_PULSE_PERIOD_SUM (Bitfield-Mask: 0x1fffff) */


/* =========================================================================================================================== */
/* ================                                        BPLC_SB_SNR                                        ================ */
/* =========================================================================================================================== */

/* ========================================================  s_or_n  ========================================================= */


/* =========================================================================================================================== */
/* ================                                            I2C                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  I2CSA  ========================================================= */
/* =========================================================  I2CC  ========================================================== */
#define I2C_I2CC_EN_Pos                   (0UL)                     /*!< I2C I2CC: EN (Bit 0)                                  */
#define I2C_I2CC_EN_Msk                   (0x1UL)                   /*!< I2C I2CC: EN (Bitfield-Mask: 0x01)                    */
#define I2C_I2CC_MSMOD_Pos                (2UL)                     /*!< I2C I2CC: MSMOD (Bit 2)                               */
#define I2C_I2CC_MSMOD_Msk                (0x4UL)                   /*!< I2C I2CC: MSMOD (Bitfield-Mask: 0x01)                 */
#define I2C_I2CC_ACKEN_Pos                (3UL)                     /*!< I2C I2CC: ACKEN (Bit 3)                               */
#define I2C_I2CC_ACKEN_Msk                (0x8UL)                   /*!< I2C I2CC: ACKEN (Bitfield-Mask: 0x01)                 */
#define I2C_I2CC_REPSTA_Pos               (4UL)                     /*!< I2C I2CC: REPSTA (Bit 4)                              */
#define I2C_I2CC_REPSTA_Msk               (0x10UL)                  /*!< I2C I2CC: REPSTA (Bitfield-Mask: 0x01)                */
#define I2C_I2CC_HMS_EN_Pos               (6UL)                     /*!< I2C I2CC: HMS_EN (Bit 6)                              */
#define I2C_I2CC_HMS_EN_Msk               (0x40UL)                  /*!< I2C I2CC: HMS_EN (Bitfield-Mask: 0x01)                */
/* =========================================================  I2CP  ========================================================== */
#define I2C_I2CP_PRE_Pos                  (0UL)                     /*!< I2C I2CP: PRE (Bit 0)                                 */
#define I2C_I2CP_PRE_Msk                  (0x3fUL)                  /*!< I2C I2CP: PRE (Bitfield-Mask: 0x3f)                   */
#define I2C_I2CP_TEST_Pos                 (6UL)                     /*!< I2C I2CP: TEST (Bit 6)                                */
#define I2C_I2CP_TEST_Msk                 (0x40UL)                  /*!< I2C I2CP: TEST (Bitfield-Mask: 0x01)                  */
/* =========================================================  I2CS  ========================================================== */
#define I2C_I2CS_TF_Pos                   (0UL)                     /*!< I2C I2CS: TF (Bit 0)                                  */
#define I2C_I2CS_TF_Msk                   (0x1UL)                   /*!< I2C I2CS: TF (Bitfield-Mask: 0x01)                    */
#define I2C_I2CS_RC_Pos                   (1UL)                     /*!< I2C I2CS: RC (Bit 1)                                  */
#define I2C_I2CS_RC_Msk                   (0x2UL)                   /*!< I2C I2CS: RC (Bitfield-Mask: 0x01)                    */
#define I2C_I2CS_AASLV_Pos                (2UL)                     /*!< I2C I2CS: AASLV (Bit 2)                               */
#define I2C_I2CS_AASLV_Msk                (0x4UL)                   /*!< I2C I2CS: AASLV (Bitfield-Mask: 0x01)                 */
#define I2C_I2CS_BBUSY_Pos                (3UL)                     /*!< I2C I2CS: BBUSY (Bit 3)                               */
#define I2C_I2CS_BBUSY_Msk                (0x8UL)                   /*!< I2C I2CS: BBUSY (Bitfield-Mask: 0x01)                 */
#define I2C_I2CS_ARBL_Pos                 (4UL)                     /*!< I2C I2CS: ARBL (Bit 4)                                */
#define I2C_I2CS_ARBL_Msk                 (0x10UL)                  /*!< I2C I2CS: ARBL (Bitfield-Mask: 0x01)                  */
#define I2C_I2CS_RXTX_Pos                 (5UL)                     /*!< I2C I2CS: RXTX (Bit 5)                                */
#define I2C_I2CS_RXTX_Msk                 (0x20UL)                  /*!< I2C I2CS: RXTX (Bitfield-Mask: 0x01)                  */
#define I2C_I2CS_DACK_Pos                 (6UL)                     /*!< I2C I2CS: DACK (Bit 6)                                */
#define I2C_I2CS_DACK_Msk                 (0x40UL)                  /*!< I2C I2CS: DACK (Bitfield-Mask: 0x01)                  */
#define I2C_I2CS_AACK_Pos                 (7UL)                     /*!< I2C I2CS: AACK (Bit 7)                                */
#define I2C_I2CS_AACK_Msk                 (0x80UL)                  /*!< I2C I2CS: AACK (Bitfield-Mask: 0x01)                  */
/* =========================================================  I2CD  ========================================================== */
/* ========================================================  I2CSHT  ========================================================= */
#define I2C_I2CSHT_SLVHT_Pos              (0UL)                     /*!< I2C I2CSHT: SLVHT (Bit 0)                             */
#define I2C_I2CSHT_SLVHT_Msk              (0x3fUL)                  /*!< I2C I2CSHT: SLVHT (Bitfield-Mask: 0x3f)               */
#define I2C_I2CSHT_SDA_FILTER_EN_Pos      (6UL)                     /*!< I2C I2CSHT: SDA_FILTER_EN (Bit 6)                     */
#define I2C_I2CSHT_SDA_FILTER_EN_Msk      (0x40UL)                  /*!< I2C I2CSHT: SDA_FILTER_EN (Bitfield-Mask: 0x01)       */
#define I2C_I2CSHT_SCL_FILTER_EN_Pos      (7UL)                     /*!< I2C I2CSHT: SCL_FILTER_EN (Bit 7)                     */
#define I2C_I2CSHT_SCL_FILTER_EN_Msk      (0x80UL)                  /*!< I2C I2CSHT: SCL_FILTER_EN (Bitfield-Mask: 0x01)       */
/* ========================================================  I2CSHIR  ======================================================== */
#define I2C_I2CSHIR_SLV_HS_Pos            (0UL)                     /*!< I2C I2CSHIR: SLV_HS (Bit 0)                           */
#define I2C_I2CSHIR_SLV_HS_Msk            (0x1UL)                   /*!< I2C I2CSHIR: SLV_HS (Bitfield-Mask: 0x01)             */
/* ========================================================  I2CPCR  ========================================================= */
#define I2C_I2CPCR_PUI2C_Pos              (0UL)                     /*!< I2C I2CPCR: PUI2C (Bit 0)                             */
#define I2C_I2CPCR_PUI2C_Msk              (0x3UL)                   /*!< I2C I2CPCR: PUI2C (Bitfield-Mask: 0x03)               */
#define I2C_I2CPCR_PDI2C_Pos              (2UL)                     /*!< I2C I2CPCR: PDI2C (Bit 2)                             */
#define I2C_I2CPCR_PDI2C_Msk              (0xcUL)                   /*!< I2C I2CPCR: PDI2C (Bitfield-Mask: 0x03)               */
#define I2C_I2CPCR_WOMI2C_Pos             (4UL)                     /*!< I2C I2CPCR: WOMI2C (Bit 4)                            */
#define I2C_I2CPCR_WOMI2C_Msk             (0x30UL)                  /*!< I2C I2CPCR: WOMI2C (Bitfield-Mask: 0x03)              */
#define I2C_I2CPCR_SCLPA_Pos              (6UL)                     /*!< I2C I2CPCR: SCLPA (Bit 6)                             */
#define I2C_I2CPCR_SCLPA_Msk              (0x40UL)                  /*!< I2C I2CPCR: SCLPA (Bitfield-Mask: 0x01)               */
#define I2C_I2CPCR_SDAPA_Pos              (7UL)                     /*!< I2C I2CPCR: SDAPA (Bit 7)                             */
#define I2C_I2CPCR_SDAPA_Msk              (0x80UL)                  /*!< I2C I2CPCR: SDAPA (Bitfield-Mask: 0x01)               */
/* ========================================================  I2CPDR  ========================================================= */
#define I2C_I2CPDR_PORTI2C_Pos            (0UL)                     /*!< I2C I2CPDR: PORTI2C (Bit 0)                           */
#define I2C_I2CPDR_PORTI2C_Msk            (0x3UL)                   /*!< I2C I2CPDR: PORTI2C (Bitfield-Mask: 0x03)             */
/* ========================================================  I2CDDR  ========================================================= */
#define I2C_I2CDDR_DDRI2C_Pos             (0UL)                     /*!< I2C I2CDDR: DDRI2C (Bit 0)                            */
#define I2C_I2CDDR_DDRI2C_Msk             (0x3UL)                   /*!< I2C I2CDDR: DDRI2C (Bitfield-Mask: 0x03)              */
/* ========================================================  I2CFCTR  ======================================================== */
#define I2C_I2CFCTR_SDA10NSTE_Pos         (0UL)                     /*!< I2C I2CFCTR: SDA10NSTE (Bit 0)                        */
#define I2C_I2CFCTR_SDA10NSTE_Msk         (0x1UL)                   /*!< I2C I2CFCTR: SDA10NSTE (Bitfield-Mask: 0x01)          */
#define I2C_I2CFCTR_SCL10NSTE_Pos         (1UL)                     /*!< I2C I2CFCTR: SCL10NSTE (Bit 1)                        */
#define I2C_I2CFCTR_SCL10NSTE_Msk         (0x2UL)                   /*!< I2C I2CFCTR: SCL10NSTE (Bitfield-Mask: 0x01)          */
#define I2C_I2CFCTR_I2CFTE_Pos            (2UL)                     /*!< I2C I2CFCTR: I2CFTE (Bit 2)                           */
#define I2C_I2CFCTR_I2CFTE_Msk            (0x4UL)                   /*!< I2C I2CFCTR: I2CFTE (Bitfield-Mask: 0x01)             */
#define I2C_I2CFCTR_I2CCSTE_Pos           (3UL)                     /*!< I2C I2CFCTR: I2CCSTE (Bit 3)                          */
#define I2C_I2CFCTR_I2CCSTE_Msk           (0x8UL)                   /*!< I2C I2CFCTR: I2CCSTE (Bitfield-Mask: 0x01)            */
/* ======================================================  I2C10NSFTVR  ====================================================== */
#define I2C_I2C10NSFTVR_SDA10F_Pos        (0UL)                     /*!< I2C I2C10NSFTVR: SDA10F (Bit 0)                       */
#define I2C_I2C10NSFTVR_SDA10F_Msk        (0xfUL)                   /*!< I2C I2C10NSFTVR: SDA10F (Bitfield-Mask: 0x0f)         */
#define I2C_I2C10NSFTVR_SCL10F_Pos        (4UL)                     /*!< I2C I2C10NSFTVR: SCL10F (Bit 4)                       */
#define I2C_I2C10NSFTVR_SCL10F_Msk        (0xf0UL)                  /*!< I2C I2C10NSFTVR: SCL10F (Bitfield-Mask: 0x0f)         */
/* ======================================================  I2C50NSFTVR  ====================================================== */
#define I2C_I2C50NSFTVR_SDA50F_Pos        (0UL)                     /*!< I2C I2C50NSFTVR: SDA50F (Bit 0)                       */
#define I2C_I2C50NSFTVR_SDA50F_Msk        (0xfUL)                   /*!< I2C I2C50NSFTVR: SDA50F (Bitfield-Mask: 0x0f)         */
#define I2C_I2C50NSFTVR_SCL50F_Pos        (4UL)                     /*!< I2C I2C50NSFTVR: SCL50F (Bit 4)                       */
#define I2C_I2C50NSFTVR_SCL50F_Msk        (0xf0UL)                  /*!< I2C I2C50NSFTVR: SCL50F (Bitfield-Mask: 0x0f)         */
/* =========================================================  I2CIC  ========================================================= */
#define I2C_I2CIC_IEN_Pos                 (0UL)                     /*!< I2C I2CIC: IEN (Bit 0)                                */
#define I2C_I2CIC_IEN_Msk                 (0x1UL)                   /*!< I2C I2CIC: IEN (Bitfield-Mask: 0x01)                  */
#define I2C_I2CIC_AMIE_Pos                (1UL)                     /*!< I2C I2CIC: AMIE (Bit 1)                               */
#define I2C_I2CIC_AMIE_Msk                (0x2UL)                   /*!< I2C I2CIC: AMIE (Bitfield-Mask: 0x01)                 */
#define I2C_I2CIC_SLV_HSIE_Pos            (2UL)                     /*!< I2C I2CIC: SLV_HSIE (Bit 2)                           */
#define I2C_I2CIC_SLV_HSIE_Msk            (0x4UL)                   /*!< I2C I2CIC: SLV_HSIE (Bitfield-Mask: 0x01)             */
#define I2C_I2CIC_STARTIE_Pos             (3UL)                     /*!< I2C I2CIC: STARTIE (Bit 3)                            */
#define I2C_I2CIC_STARTIE_Msk             (0x8UL)                   /*!< I2C I2CIC: STARTIE (Bitfield-Mask: 0x01)              */
#define I2C_I2CIC_STOPIE_Pos              (4UL)                     /*!< I2C I2CIC: STOPIE (Bit 4)                             */
#define I2C_I2CIC_STOPIE_Msk              (0x10UL)                  /*!< I2C I2CIC: STOPIE (Bitfield-Mask: 0x01)               */
#define I2C_I2CIC_STARTF_Pos              (6UL)                     /*!< I2C I2CIC: STARTF (Bit 6)                             */
#define I2C_I2CIC_STARTF_Msk              (0x40UL)                  /*!< I2C I2CIC: STARTF (Bitfield-Mask: 0x01)               */
#define I2C_I2CIC_STOPF_Pos               (7UL)                     /*!< I2C I2CIC: STOPF (Bit 7)                              */
#define I2C_I2CIC_STOPF_Msk               (0x80UL)                  /*!< I2C I2CIC: STOPF (Bitfield-Mask: 0x01)                */


/* =========================================================================================================================== */
/* ================                                        PIT_CONTROL                                        ================ */
/* =========================================================================================================================== */

/* ==========================================================  MCR  ========================================================== */
#define PIT_CONTROL_MCR_FRZ_Pos           (0UL)                     /*!< PIT_CONTROL MCR: FRZ (Bit 0)                          */
#define PIT_CONTROL_MCR_FRZ_Msk           (0x1UL)                   /*!< PIT_CONTROL MCR: FRZ (Bitfield-Mask: 0x01)            */
#define PIT_CONTROL_MCR_MDIS_Pos          (1UL)                     /*!< PIT_CONTROL MCR: MDIS (Bit 1)                         */
#define PIT_CONTROL_MCR_MDIS_Msk          (0x2UL)                   /*!< PIT_CONTROL MCR: MDIS (Bitfield-Mask: 0x01)           */
#define PIT_CONTROL_MCR_MDIS_RTI_Pos      (2UL)                     /*!< PIT_CONTROL MCR: MDIS_RTI (Bit 2)                     */
#define PIT_CONTROL_MCR_MDIS_RTI_Msk      (0x4UL)                   /*!< PIT_CONTROL MCR: MDIS_RTI (Bitfield-Mask: 0x01)       */


/* =========================================================================================================================== */
/* ================                                        PIT_CHANNEL                                        ================ */
/* =========================================================================================================================== */

/* =========================================================  LDVAL  ========================================================= */
/* =========================================================  CVAL  ========================================================== */
/* =========================================================  TCTRL  ========================================================= */
#define PIT_CHANNEL_TCTRL_EN_Pos          (0UL)                     /*!< PIT_CHANNEL TCTRL: EN (Bit 0)                         */
#define PIT_CHANNEL_TCTRL_EN_Msk          (0x1UL)                   /*!< PIT_CHANNEL TCTRL: EN (Bitfield-Mask: 0x01)           */
#define PIT_CHANNEL_TCTRL_TIE_Pos         (1UL)                     /*!< PIT_CHANNEL TCTRL: TIE (Bit 1)                        */
#define PIT_CHANNEL_TCTRL_TIE_Msk         (0x2UL)                   /*!< PIT_CHANNEL TCTRL: TIE (Bitfield-Mask: 0x01)          */
/* =========================================================  TFLG  ========================================================== */
#define PIT_CHANNEL_TFLG_TIF_Pos          (0UL)                     /*!< PIT_CHANNEL TFLG: TIF (Bit 0)                         */
#define PIT_CHANNEL_TFLG_TIF_Msk          (0x1UL)                   /*!< PIT_CHANNEL TFLG: TIF (Bitfield-Mask: 0x01)           */


/* =========================================================================================================================== */
/* ================                                            SCI                                            ================ */
/* =========================================================================================================================== */

/* =======================================================  SCIBRDIH  ======================================================== */
/* =======================================================  SCIBRDIL  ======================================================== */
/* ========================================================  SCICR1  ========================================================= */
#define SCI_SCICR1_PT_Pos                 (0UL)                     /*!< SCI SCICR1: PT (Bit 0)                                */
#define SCI_SCICR1_PT_Msk                 (0x1UL)                   /*!< SCI SCICR1: PT (Bitfield-Mask: 0x01)                  */
#define SCI_SCICR1_PE_Pos                 (1UL)                     /*!< SCI SCICR1: PE (Bit 1)                                */
#define SCI_SCICR1_PE_Msk                 (0x2UL)                   /*!< SCI SCICR1: PE (Bitfield-Mask: 0x01)                  */
#define SCI_SCICR1_ILT_Pos                (2UL)                     /*!< SCI SCICR1: ILT (Bit 2)                               */
#define SCI_SCICR1_ILT_Msk                (0x4UL)                   /*!< SCI SCICR1: ILT (Bitfield-Mask: 0x01)                 */
#define SCI_SCICR1_WAKE_Pos               (3UL)                     /*!< SCI SCICR1: WAKE (Bit 3)                              */
#define SCI_SCICR1_WAKE_Msk               (0x8UL)                   /*!< SCI SCICR1: WAKE (Bitfield-Mask: 0x01)                */
#define SCI_SCICR1_M_Pos                  (4UL)                     /*!< SCI SCICR1: M (Bit 4)                                 */
#define SCI_SCICR1_M_Msk                  (0x10UL)                  /*!< SCI SCICR1: M (Bitfield-Mask: 0x01)                   */
#define SCI_SCICR1_RSRC_Pos               (5UL)                     /*!< SCI SCICR1: RSRC (Bit 5)                              */
#define SCI_SCICR1_RSRC_Msk               (0x20UL)                  /*!< SCI SCICR1: RSRC (Bitfield-Mask: 0x01)                */
#define SCI_SCICR1_WOMS_Pos               (6UL)                     /*!< SCI SCICR1: WOMS (Bit 6)                              */
#define SCI_SCICR1_WOMS_Msk               (0x40UL)                  /*!< SCI SCICR1: WOMS (Bitfield-Mask: 0x01)                */
#define SCI_SCICR1_LOOPS_Pos              (7UL)                     /*!< SCI SCICR1: LOOPS (Bit 7)                             */
#define SCI_SCICR1_LOOPS_Msk              (0x80UL)                  /*!< SCI SCICR1: LOOPS (Bitfield-Mask: 0x01)               */
/* ========================================================  SCICR2  ========================================================= */
#define SCI_SCICR2_SBK_Pos                (0UL)                     /*!< SCI SCICR2: SBK (Bit 0)                               */
#define SCI_SCICR2_SBK_Msk                (0x1UL)                   /*!< SCI SCICR2: SBK (Bitfield-Mask: 0x01)                 */
#define SCI_SCICR2_RWU_Pos                (1UL)                     /*!< SCI SCICR2: RWU (Bit 1)                               */
#define SCI_SCICR2_RWU_Msk                (0x2UL)                   /*!< SCI SCICR2: RWU (Bitfield-Mask: 0x01)                 */
#define SCI_SCICR2_RE_Pos                 (2UL)                     /*!< SCI SCICR2: RE (Bit 2)                                */
#define SCI_SCICR2_RE_Msk                 (0x4UL)                   /*!< SCI SCICR2: RE (Bitfield-Mask: 0x01)                  */
#define SCI_SCICR2_TE_Pos                 (3UL)                     /*!< SCI SCICR2: TE (Bit 3)                                */
#define SCI_SCICR2_TE_Msk                 (0x8UL)                   /*!< SCI SCICR2: TE (Bitfield-Mask: 0x01)                  */
#define SCI_SCICR2_ILIE_Pos               (4UL)                     /*!< SCI SCICR2: ILIE (Bit 4)                              */
#define SCI_SCICR2_ILIE_Msk               (0x10UL)                  /*!< SCI SCICR2: ILIE (Bitfield-Mask: 0x01)                */
#define SCI_SCICR2_RIE_Pos                (5UL)                     /*!< SCI SCICR2: RIE (Bit 5)                               */
#define SCI_SCICR2_RIE_Msk                (0x20UL)                  /*!< SCI SCICR2: RIE (Bitfield-Mask: 0x01)                 */
#define SCI_SCICR2_TCIE_Pos               (6UL)                     /*!< SCI SCICR2: TCIE (Bit 6)                              */
#define SCI_SCICR2_TCIE_Msk               (0x40UL)                  /*!< SCI SCICR2: TCIE (Bitfield-Mask: 0x01)                */
#define SCI_SCICR2_TIE_Pos                (7UL)                     /*!< SCI SCICR2: TIE (Bit 7)                               */
#define SCI_SCICR2_TIE_Msk                (0x80UL)                  /*!< SCI SCICR2: TIE (Bitfield-Mask: 0x01)                 */
/* ========================================================  SCISR1  ========================================================= */
#define SCI_SCISR1_PF_Pos                 (0UL)                     /*!< SCI SCISR1: PF (Bit 0)                                */
#define SCI_SCISR1_PF_Msk                 (0x1UL)                   /*!< SCI SCISR1: PF (Bitfield-Mask: 0x01)                  */
#define SCI_SCISR1_FE_Pos                 (1UL)                     /*!< SCI SCISR1: FE (Bit 1)                                */
#define SCI_SCISR1_FE_Msk                 (0x2UL)                   /*!< SCI SCISR1: FE (Bitfield-Mask: 0x01)                  */
#define SCI_SCISR1_NF_Pos                 (2UL)                     /*!< SCI SCISR1: NF (Bit 2)                                */
#define SCI_SCISR1_NF_Msk                 (0x4UL)                   /*!< SCI SCISR1: NF (Bitfield-Mask: 0x01)                  */
#define SCI_SCISR1_OR_Pos                 (3UL)                     /*!< SCI SCISR1: OR (Bit 3)                                */
#define SCI_SCISR1_OR_Msk                 (0x8UL)                   /*!< SCI SCISR1: OR (Bitfield-Mask: 0x01)                  */
#define SCI_SCISR1_IDLE_Pos               (4UL)                     /*!< SCI SCISR1: IDLE (Bit 4)                              */
#define SCI_SCISR1_IDLE_Msk               (0x10UL)                  /*!< SCI SCISR1: IDLE (Bitfield-Mask: 0x01)                */
#define SCI_SCISR1_RDRF_Pos               (5UL)                     /*!< SCI SCISR1: RDRF (Bit 5)                              */
#define SCI_SCISR1_RDRF_Msk               (0x20UL)                  /*!< SCI SCISR1: RDRF (Bitfield-Mask: 0x01)                */
#define SCI_SCISR1_TC_Pos                 (6UL)                     /*!< SCI SCISR1: TC (Bit 6)                                */
#define SCI_SCISR1_TC_Msk                 (0x40UL)                  /*!< SCI SCISR1: TC (Bitfield-Mask: 0x01)                  */
#define SCI_SCISR1_TDRF_Pos               (7UL)                     /*!< SCI SCISR1: TDRF (Bit 7)                              */
#define SCI_SCISR1_TDRF_Msk               (0x80UL)                  /*!< SCI SCISR1: TDRF (Bitfield-Mask: 0x01)                */
/* ========================================================  SCISR2  ========================================================= */
#define SCI_SCISR2_RAF_Pos                (0UL)                     /*!< SCI SCISR2: RAF (Bit 0)                               */
#define SCI_SCISR2_RAF_Msk                (0x1UL)                   /*!< SCI SCISR2: RAF (Bitfield-Mask: 0x01)                 */
/* ========================================================  SCIDRH  ========================================================= */
#define SCI_SCIDRH_T_R8_Pos               (6UL)                     /*!< SCI SCIDRH: T_R8 (Bit 6)                              */
#define SCI_SCIDRH_T_R8_Msk               (0x40UL)                  /*!< SCI SCIDRH: T_R8 (Bitfield-Mask: 0x01)                */
/* ========================================================  SCIDRL  ========================================================= */
/* ========================================================  SCIPURD  ======================================================== */
#define SCI_SCIPURD_PUPSCI_Pos            (0UL)                     /*!< SCI SCIPURD: PUPSCI (Bit 0)                           */
#define SCI_SCIPURD_PUPSCI_Msk            (0x1UL)                   /*!< SCI SCIPURD: PUPSCI (Bitfield-Mask: 0x01)             */
#define SCI_SCIPURD_SCISDOZ_Pos           (7UL)                     /*!< SCI SCIPURD: SCISDOZ (Bit 7)                          */
#define SCI_SCIPURD_SCISDOZ_Msk           (0x80UL)                  /*!< SCI SCIPURD: SCISDOZ (Bitfield-Mask: 0x01)            */
/* ========================================================  SCIPORT  ======================================================== */
#define SCI_SCIPORT_PORTSC0_Pos           (0UL)                     /*!< SCI SCIPORT: PORTSC0 (Bit 0)                          */
#define SCI_SCIPORT_PORTSC0_Msk           (0x1UL)                   /*!< SCI SCIPORT: PORTSC0 (Bitfield-Mask: 0x01)            */
#define SCI_SCIPORT_PORTSC1_Pos           (1UL)                     /*!< SCI SCIPORT: PORTSC1 (Bit 1)                          */
#define SCI_SCIPORT_PORTSC1_Msk           (0x2UL)                   /*!< SCI SCIPORT: PORTSC1 (Bitfield-Mask: 0x01)            */
/* ========================================================  SCIDDR  ========================================================= */
#define SCI_SCIDDR_DDRSC0_Pos             (0UL)                     /*!< SCI SCIDDR: DDRSC0 (Bit 0)                            */
#define SCI_SCIDDR_DDRSC0_Msk             (0x1UL)                   /*!< SCI SCIDDR: DDRSC0 (Bitfield-Mask: 0x01)              */
#define SCI_SCIDDR_DDRSC1_Pos             (1UL)                     /*!< SCI SCIDDR: DDRSC1 (Bit 1)                            */
#define SCI_SCIDDR_DDRSC1_Msk             (0x2UL)                   /*!< SCI SCIDDR: DDRSC1 (Bitfield-Mask: 0x01)              */
/* ========================================================  SCIBRDF  ======================================================== */
/* =========================================================  SCITR  ========================================================= */
/* ========================================================  SCIIRCR  ======================================================== */
#define SCI_SCIIRCR_IREN_Pos              (0UL)                     /*!< SCI SCIIRCR: IREN (Bit 0)                             */
#define SCI_SCIIRCR_IREN_Msk              (0x1UL)                   /*!< SCI SCIIRCR: IREN (Bitfield-Mask: 0x01)               */
#define SCI_SCIIRCR_IRMD_Pos              (1UL)                     /*!< SCI SCIIRCR: IRMD (Bit 1)                             */
#define SCI_SCIIRCR_IRMD_Msk              (0x2UL)                   /*!< SCI SCIIRCR: IRMD (Bitfield-Mask: 0x01)               */
#define SCI_SCIIRCR_RINV_Pos              (2UL)                     /*!< SCI SCIIRCR: RINV (Bit 2)                             */
#define SCI_SCIIRCR_RINV_Msk              (0x4UL)                   /*!< SCI SCIIRCR: RINV (Bitfield-Mask: 0x01)               */
#define SCI_SCIIRCR_TINV_Pos              (3UL)                     /*!< SCI SCIIRCR: TINV (Bit 3)                             */
#define SCI_SCIIRCR_TINV_Msk              (0x8UL)                   /*!< SCI SCIIRCR: TINV (Bitfield-Mask: 0x01)               */
#define SCI_SCIIRCR_RNUM_Pos              (4UL)                     /*!< SCI SCIIRCR: RNUM (Bit 4)                             */
#define SCI_SCIIRCR_RNUM_Msk              (0x30UL)                  /*!< SCI SCIIRCR: RNUM (Bitfield-Mask: 0x03)               */
#define SCI_SCIIRCR_TNUM_Pos              (6UL)                     /*!< SCI SCIIRCR: TNUM (Bit 6)                             */
#define SCI_SCIIRCR_TNUM_Msk              (0xc0UL)                  /*!< SCI SCIIRCR: TNUM (Bitfield-Mask: 0x03)               */
/* ========================================================  SCIIRDR  ======================================================== */
#define SCI_SCIIRDR_IRDR_Pos              (0UL)                     /*!< SCI SCIIRDR: IRDR (Bit 0)                             */
#define SCI_SCIIRDR_IRDR_Msk              (0x7fffUL)                /*!< SCI SCIIRDR: IRDR (Bitfield-Mask: 0x7fff)             */
#define SCI_SCIIRDR_IRSC_Pos              (15UL)                    /*!< SCI SCIIRDR: IRSC (Bit 15)                            */
#define SCI_SCIIRDR_IRSC_Msk              (0x8000UL)                /*!< SCI SCIIRDR: IRSC (Bitfield-Mask: 0x01)               */
/* =======================================================  TXFTOCTR  ======================================================== */
#define SCI_TXFTOCTR_TXFTOIE_Pos          (6UL)                     /*!< SCI TXFTOCTR: TXFTOIE (Bit 6)                         */
#define SCI_TXFTOCTR_TXFTOIE_Msk          (0x40UL)                  /*!< SCI TXFTOCTR: TXFTOIE (Bitfield-Mask: 0x01)           */
#define SCI_TXFTOCTR_TXFTOE_Pos           (7UL)                     /*!< SCI TXFTOCTR: TXFTOE (Bit 7)                          */
#define SCI_TXFTOCTR_TXFTOE_Msk           (0x80UL)                  /*!< SCI TXFTOCTR: TXFTOE (Bitfield-Mask: 0x01)            */
/* =========================================================  TXFCR  ========================================================= */
#define SCI_TXFCR_TXFSTH_Pos              (0UL)                     /*!< SCI TXFCR: TXFSTH (Bit 0)                             */
#define SCI_TXFCR_TXFSTH_Msk              (0x7UL)                   /*!< SCI TXFCR: TXFSTH (Bitfield-Mask: 0x07)               */
#define SCI_TXFCR_TXFSTHIE_Pos            (4UL)                     /*!< SCI TXFCR: TXFSTHIE (Bit 4)                           */
#define SCI_TXFCR_TXFSTHIE_Msk            (0x10UL)                  /*!< SCI TXFCR: TXFSTHIE (Bitfield-Mask: 0x01)             */
#define SCI_TXFCR_TXFUDIE_Pos             (5UL)                     /*!< SCI TXFCR: TXFUDIE (Bit 5)                            */
#define SCI_TXFCR_TXFUDIE_Msk             (0x20UL)                  /*!< SCI TXFCR: TXFUDIE (Bitfield-Mask: 0x01)              */
#define SCI_TXFCR_TXFOVIE_Pos             (6UL)                     /*!< SCI TXFCR: TXFOVIE (Bit 6)                            */
#define SCI_TXFCR_TXFOVIE_Msk             (0x40UL)                  /*!< SCI TXFCR: TXFOVIE (Bitfield-Mask: 0x01)              */
#define SCI_TXFCR_TXFCLR_Pos              (7UL)                     /*!< SCI TXFCR: TXFCLR (Bit 7)                             */
#define SCI_TXFCR_TXFCLR_Msk              (0x80UL)                  /*!< SCI TXFCR: TXFCLR (Bitfield-Mask: 0x01)               */
/* ========================================================  DMATHR  ========================================================= */
#define SCI_DMATHR_RXDMATH_Pos            (0UL)                     /*!< SCI DMATHR: RXDMATH (Bit 0)                           */
#define SCI_DMATHR_RXDMATH_Msk            (0x7UL)                   /*!< SCI DMATHR: RXDMATH (Bitfield-Mask: 0x07)             */
#define SCI_DMATHR_TXDMATH_Pos            (4UL)                     /*!< SCI DMATHR: TXDMATH (Bit 4)                           */
#define SCI_DMATHR_TXDMATH_Msk            (0x70UL)                  /*!< SCI DMATHR: TXDMATH (Bitfield-Mask: 0x07)             */
/* =========================================================  DMACR  ========================================================= */
#define SCI_DMACR_RXDMA_EN_Pos            (0UL)                     /*!< SCI DMACR: RXDMA_EN (Bit 0)                           */
#define SCI_DMACR_RXDMA_EN_Msk            (0x1UL)                   /*!< SCI DMACR: RXDMA_EN (Bitfield-Mask: 0x01)             */
#define SCI_DMACR_TXDMA_EN_Pos            (1UL)                     /*!< SCI DMACR: TXDMA_EN (Bit 1)                           */
#define SCI_DMACR_TXDMA_EN_Msk            (0x2UL)                   /*!< SCI DMACR: TXDMA_EN (Bitfield-Mask: 0x01)             */
/* =========================================================  FSRL  ========================================================== */
#define SCI_FSRL_RXF_EMPTY_Pos            (0UL)                     /*!< SCI FSRL: RXF_EMPTY (Bit 0)                           */
#define SCI_FSRL_RXF_EMPTY_Msk            (0x1UL)                   /*!< SCI FSRL: RXF_EMPTY (Bitfield-Mask: 0x01)             */
#define SCI_FSRL_RXF_FULL_Pos             (1UL)                     /*!< SCI FSRL: RXF_FULL (Bit 1)                            */
#define SCI_FSRL_RXF_FULL_Msk             (0x2UL)                   /*!< SCI FSRL: RXF_FULL (Bitfield-Mask: 0x01)              */
#define SCI_FSRL_TXF_EMPTY_Pos            (2UL)                     /*!< SCI FSRL: TXF_EMPTY (Bit 2)                           */
#define SCI_FSRL_TXF_EMPTY_Msk            (0x4UL)                   /*!< SCI FSRL: TXF_EMPTY (Bitfield-Mask: 0x01)             */
#define SCI_FSRL_TXF_FULL_Pos             (3UL)                     /*!< SCI FSRL: TXF_FULL (Bit 3)                            */
#define SCI_FSRL_TXF_FULL_Msk             (0x8UL)                   /*!< SCI FSRL: TXF_FULL (Bitfield-Mask: 0x01)              */
/* =========================================================  FSRH  ========================================================== */
#define SCI_FSRH_RXF_SER_Pos              (0UL)                     /*!< SCI FSRH: RXF_SER (Bit 0)                             */
#define SCI_FSRH_RXF_SER_Msk              (0x1UL)                   /*!< SCI FSRH: RXF_SER (Bitfield-Mask: 0x01)               */
#define SCI_FSRH_RXF_UDF_Pos              (1UL)                     /*!< SCI FSRH: RXF_UDF (Bit 1)                             */
#define SCI_FSRH_RXF_UDF_Msk              (0x2UL)                   /*!< SCI FSRH: RXF_UDF (Bitfield-Mask: 0x01)               */
#define SCI_FSRH_RXF_OVF_Pos              (2UL)                     /*!< SCI FSRH: RXF_OVF (Bit 2)                             */
#define SCI_FSRH_RXF_OVF_Msk              (0x4UL)                   /*!< SCI FSRH: RXF_OVF (Bitfield-Mask: 0x01)               */
#define SCI_FSRH_RXF_TO_Pos               (3UL)                     /*!< SCI FSRH: RXF_TO (Bit 3)                              */
#define SCI_FSRH_RXF_TO_Msk               (0x8UL)                   /*!< SCI FSRH: RXF_TO (Bitfield-Mask: 0x01)                */
#define SCI_FSRH_TXF_SER_Pos              (4UL)                     /*!< SCI FSRH: TXF_SER (Bit 4)                             */
#define SCI_FSRH_TXF_SER_Msk              (0x10UL)                  /*!< SCI FSRH: TXF_SER (Bitfield-Mask: 0x01)               */
#define SCI_FSRH_TXF_UDF_Pos              (5UL)                     /*!< SCI FSRH: TXF_UDF (Bit 5)                             */
#define SCI_FSRH_TXF_UDF_Msk              (0x20UL)                  /*!< SCI FSRH: TXF_UDF (Bitfield-Mask: 0x01)               */
#define SCI_FSRH_TXF_OVF_Pos              (6UL)                     /*!< SCI FSRH: TXF_OVF (Bit 6)                             */
#define SCI_FSRH_TXF_OVF_Msk              (0x40UL)                  /*!< SCI FSRH: TXF_OVF (Bitfield-Mask: 0x01)               */
#define SCI_FSRH_TXF_TO_Pos               (7UL)                     /*!< SCI FSRH: TXF_TO (Bit 7)                              */
#define SCI_FSRH_TXF_TO_Msk               (0x80UL)                  /*!< SCI FSRH: TXF_TO (Bitfield-Mask: 0x01)                */
/* =======================================================  RXFTOCTR  ======================================================== */
#define SCI_RXFTOCTR_RXFTO_CNR_Pos        (0UL)                     /*!< SCI RXFTOCTR: RXFTO_CNR (Bit 0)                       */
#define SCI_RXFTOCTR_RXFTO_CNR_Msk        (0x3fUL)                  /*!< SCI RXFTOCTR: RXFTO_CNR (Bitfield-Mask: 0x3f)         */
#define SCI_RXFTOCTR_RXFTOE_Pos           (6UL)                     /*!< SCI RXFTOCTR: RXFTOE (Bit 6)                          */
#define SCI_RXFTOCTR_RXFTOE_Msk           (0x40UL)                  /*!< SCI RXFTOCTR: RXFTOE (Bitfield-Mask: 0x01)            */
#define SCI_RXFTOCTR_RXFTOIE_Pos          (7UL)                     /*!< SCI RXFTOCTR: RXFTOIE (Bit 7)                         */
#define SCI_RXFTOCTR_RXFTOIE_Msk          (0x80UL)                  /*!< SCI RXFTOCTR: RXFTOIE (Bitfield-Mask: 0x01)           */
/* =========================================================  RXFCR  ========================================================= */
#define SCI_RXFCR_RXFSTH_Pos              (0UL)                     /*!< SCI RXFCR: RXFSTH (Bit 0)                             */
#define SCI_RXFCR_RXFSTH_Msk              (0x7UL)                   /*!< SCI RXFCR: RXFSTH (Bitfield-Mask: 0x07)               */
#define SCI_RXFCR_RXFSTHIE_Pos            (4UL)                     /*!< SCI RXFCR: RXFSTHIE (Bit 4)                           */
#define SCI_RXFCR_RXFSTHIE_Msk            (0x10UL)                  /*!< SCI RXFCR: RXFSTHIE (Bitfield-Mask: 0x01)             */
#define SCI_RXFCR_RXFUDIE_Pos             (5UL)                     /*!< SCI RXFCR: RXFUDIE (Bit 5)                            */
#define SCI_RXFCR_RXFUDIE_Msk             (0x20UL)                  /*!< SCI RXFCR: RXFUDIE (Bitfield-Mask: 0x01)              */
#define SCI_RXFCR_RXFOVIE_Pos             (6UL)                     /*!< SCI RXFCR: RXFOVIE (Bit 6)                            */
#define SCI_RXFCR_RXFOVIE_Msk             (0x40UL)                  /*!< SCI RXFCR: RXFOVIE (Bitfield-Mask: 0x01)              */
#define SCI_RXFCR_RXFCLR_Pos              (7UL)                     /*!< SCI RXFCR: RXFCLR (Bit 7)                             */
#define SCI_RXFCR_RXFCLR_Msk              (0x80UL)                  /*!< SCI RXFCR: RXFCLR (Bitfield-Mask: 0x01)               */
/* ========================================================  RXFDBGR  ======================================================== */
/* ========================================================  TXFDBGR  ======================================================== */
/* =========================================================  RXFSR  ========================================================= */
#define SCI_RXFSR_RXF_COUNTER_Pos         (0UL)                     /*!< SCI RXFSR: RXF_COUNTER (Bit 0)                        */
#define SCI_RXFSR_RXF_COUNTER_Msk         (0xfUL)                   /*!< SCI RXFSR: RXF_COUNTER (Bitfield-Mask: 0x0f)          */
#define SCI_RXFSR_RXF_NXTPTR_Pos          (4UL)                     /*!< SCI RXFSR: RXF_NXTPTR (Bit 4)                         */
#define SCI_RXFSR_RXF_NXTPTR_Msk          (0x70UL)                  /*!< SCI RXFSR: RXF_NXTPTR (Bitfield-Mask: 0x07)           */
/* =========================================================  TXFSR  ========================================================= */
#define SCI_TXFSR_TXF_COUNTER_Pos         (0UL)                     /*!< SCI TXFSR: TXF_COUNTER (Bit 0)                        */
#define SCI_TXFSR_TXF_COUNTER_Msk         (0xfUL)                   /*!< SCI TXFSR: TXF_COUNTER (Bitfield-Mask: 0x0f)          */
#define SCI_TXFSR_TXF_NXTPTR_Pos          (4UL)                     /*!< SCI TXFSR: TXF_NXTPTR (Bit 4)                         */
#define SCI_TXFSR_TXF_NXTPTR_Msk          (0x70UL)                  /*!< SCI TXFSR: TXF_NXTPTR (Bitfield-Mask: 0x07)           */
/* =========================================================  FDCR  ========================================================== */
#define SCI_FDCR_RXFIDX_Pos               (0UL)                     /*!< SCI FDCR: RXFIDX (Bit 0)                              */
#define SCI_FDCR_RXFIDX_Msk               (0x7UL)                   /*!< SCI FDCR: RXFIDX (Bitfield-Mask: 0x07)                */
#define SCI_FDCR_TXFIDX_Pos               (4UL)                     /*!< SCI FDCR: TXFIDX (Bit 4)                              */
#define SCI_FDCR_TXFIDX_Msk               (0x70UL)                  /*!< SCI FDCR: TXFIDX (Bitfield-Mask: 0x07)                */


/* =========================================================================================================================== */
/* ================                                            SPI                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  SPICR1  ========================================================= */
#define SPI_SPICR1_LSBFE_Pos              (0UL)                     /*!< SPI SPICR1: LSBFE (Bit 0)                             */
#define SPI_SPICR1_LSBFE_Msk              (0x1UL)                   /*!< SPI SPICR1: LSBFE (Bitfield-Mask: 0x01)               */
#define SPI_SPICR1_SSOE_Pos               (1UL)                     /*!< SPI SPICR1: SSOE (Bit 1)                              */
#define SPI_SPICR1_SSOE_Msk               (0x2UL)                   /*!< SPI SPICR1: SSOE (Bitfield-Mask: 0x01)                */
#define SPI_SPICR1_CPHA_Pos               (2UL)                     /*!< SPI SPICR1: CPHA (Bit 2)                              */
#define SPI_SPICR1_CPHA_Msk               (0x4UL)                   /*!< SPI SPICR1: CPHA (Bitfield-Mask: 0x01)                */
#define SPI_SPICR1_CPOL_Pos               (3UL)                     /*!< SPI SPICR1: CPOL (Bit 3)                              */
#define SPI_SPICR1_CPOL_Msk               (0x8UL)                   /*!< SPI SPICR1: CPOL (Bitfield-Mask: 0x01)                */
#define SPI_SPICR1_MSTR_Pos               (4UL)                     /*!< SPI SPICR1: MSTR (Bit 4)                              */
#define SPI_SPICR1_MSTR_Msk               (0x10UL)                  /*!< SPI SPICR1: MSTR (Bitfield-Mask: 0x01)                */
#define SPI_SPICR1_SWOM_Pos               (5UL)                     /*!< SPI SPICR1: SWOM (Bit 5)                              */
#define SPI_SPICR1_SWOM_Msk               (0x20UL)                  /*!< SPI SPICR1: SWOM (Bitfield-Mask: 0x01)                */
#define SPI_SPICR1_SPE_Pos                (6UL)                     /*!< SPI SPICR1: SPE (Bit 6)                               */
#define SPI_SPICR1_SPE_Msk                (0x40UL)                  /*!< SPI SPICR1: SPE (Bitfield-Mask: 0x01)                 */
#define SPI_SPICR1_SPIE_Pos               (7UL)                     /*!< SPI SPICR1: SPIE (Bit 7)                              */
#define SPI_SPICR1_SPIE_Msk               (0x80UL)                  /*!< SPI SPICR1: SPIE (Bitfield-Mask: 0x01)                */
/* ========================================================  SPICR2  ========================================================= */
#define SPI_SPICR2_SPC0_Pos               (0UL)                     /*!< SPI SPICR2: SPC0 (Bit 0)                              */
#define SPI_SPICR2_SPC0_Msk               (0x1UL)                   /*!< SPI SPICR2: SPC0 (Bitfield-Mask: 0x01)                */
#define SPI_SPICR2_SPISDOZ_Pos            (1UL)                     /*!< SPI SPICR2: SPISDOZ (Bit 1)                           */
#define SPI_SPICR2_SPISDOZ_Msk            (0x2UL)                   /*!< SPI SPICR2: SPISDOZ (Bitfield-Mask: 0x01)             */
#define SPI_SPICR2_GT_Pos                 (2UL)                     /*!< SPI SPICR2: GT (Bit 2)                                */
#define SPI_SPICR2_GT_Msk                 (0xfcUL)                  /*!< SPI SPICR2: GT (Bitfield-Mask: 0x3f)                  */
/* =========================================================  SPIBR  ========================================================= */
#define SPI_SPIBR_SPR_Pos                 (0UL)                     /*!< SPI SPIBR: SPR (Bit 0)                                */
#define SPI_SPIBR_SPR_Msk                 (0x7UL)                   /*!< SPI SPIBR: SPR (Bitfield-Mask: 0x07)                  */
#define SPI_SPIBR_SPPR_Pos                (4UL)                     /*!< SPI SPIBR: SPPR (Bit 4)                               */
#define SPI_SPIBR_SPPR_Msk                (0x70UL)                  /*!< SPI SPIBR: SPPR (Bitfield-Mask: 0x07)                 */
/* =========================================================  SPIFR  ========================================================= */
#define SPI_SPIFR_FMSZ_Pos                (0UL)                     /*!< SPI SPIFR: FMSZ (Bit 0)                               */
#define SPI_SPIFR_FMSZ_Msk                (0xfUL)                   /*!< SPI SPIFR: FMSZ (Bitfield-Mask: 0x0f)                 */
#define SPI_SPIFR_FFSEL_Pos               (4UL)                     /*!< SPI SPIFR: FFSEL (Bit 4)                              */
#define SPI_SPIFR_FFSEL_Msk               (0x10UL)                  /*!< SPI SPIFR: FFSEL (Bitfield-Mask: 0x01)                */
#define SPI_SPIFR_LBM_Pos                 (5UL)                     /*!< SPI SPIFR: LBM (Bit 5)                                */
#define SPI_SPIFR_LBM_Msk                 (0x20UL)                  /*!< SPI SPIFR: LBM (Bitfield-Mask: 0x01)                  */
#define SPI_SPIFR_GTE_Pos                 (6UL)                     /*!< SPI SPIFR: GTE (Bit 6)                                */
#define SPI_SPIFR_GTE_Msk                 (0x40UL)                  /*!< SPI SPIFR: GTE (Bitfield-Mask: 0x01)                  */
#define SPI_SPIFR_CONT_Pos                (7UL)                     /*!< SPI SPIFR: CONT (Bit 7)                               */
#define SPI_SPIFR_CONT_Msk                (0x80UL)                  /*!< SPI SPIFR: CONT (Bitfield-Mask: 0x01)                 */
/* =======================================================  SPIRXFCR  ======================================================== */
#define SPI_SPIRXFCR_RXFSTH_Pos           (0UL)                     /*!< SPI SPIRXFCR: RXFSTH (Bit 0)                          */
#define SPI_SPIRXFCR_RXFSTH_Msk           (0x7UL)                   /*!< SPI SPIRXFCR: RXFSTH (Bitfield-Mask: 0x07)            */
#define SPI_SPIRXFCR_RXFSTHIE_Pos         (4UL)                     /*!< SPI SPIRXFCR: RXFSTHIE (Bit 4)                        */
#define SPI_SPIRXFCR_RXFSTHIE_Msk         (0x10UL)                  /*!< SPI SPIRXFCR: RXFSTHIE (Bitfield-Mask: 0x01)          */
#define SPI_SPIRXFCR_RXFUDIE_Pos          (5UL)                     /*!< SPI SPIRXFCR: RXFUDIE (Bit 5)                         */
#define SPI_SPIRXFCR_RXFUDIE_Msk          (0x20UL)                  /*!< SPI SPIRXFCR: RXFUDIE (Bitfield-Mask: 0x01)           */
#define SPI_SPIRXFCR_RXFOVIE_Pos          (6UL)                     /*!< SPI SPIRXFCR: RXFOVIE (Bit 6)                         */
#define SPI_SPIRXFCR_RXFOVIE_Msk          (0x40UL)                  /*!< SPI SPIRXFCR: RXFOVIE (Bitfield-Mask: 0x01)           */
#define SPI_SPIRXFCR_RXFCLR_Pos           (7UL)                     /*!< SPI SPIRXFCR: RXFCLR (Bit 7)                          */
#define SPI_SPIRXFCR_RXFCLR_Msk           (0x80UL)                  /*!< SPI SPIRXFCR: RXFCLR (Bitfield-Mask: 0x01)            */
/* =======================================================  SPITXFCR  ======================================================== */
#define SPI_SPITXFCR_TXFSTH_Pos           (0UL)                     /*!< SPI SPITXFCR: TXFSTH (Bit 0)                          */
#define SPI_SPITXFCR_TXFSTH_Msk           (0x7UL)                   /*!< SPI SPITXFCR: TXFSTH (Bitfield-Mask: 0x07)            */
#define SPI_SPITXFCR_TXFSTHIE_Pos         (4UL)                     /*!< SPI SPITXFCR: TXFSTHIE (Bit 4)                        */
#define SPI_SPITXFCR_TXFSTHIE_Msk         (0x10UL)                  /*!< SPI SPITXFCR: TXFSTHIE (Bitfield-Mask: 0x01)          */
#define SPI_SPITXFCR_TXFUDIE_Pos          (5UL)                     /*!< SPI SPITXFCR: TXFUDIE (Bit 5)                         */
#define SPI_SPITXFCR_TXFUDIE_Msk          (0x20UL)                  /*!< SPI SPITXFCR: TXFUDIE (Bitfield-Mask: 0x01)           */
#define SPI_SPITXFCR_TXFOVIE_Pos          (6UL)                     /*!< SPI SPITXFCR: TXFOVIE (Bit 6)                         */
#define SPI_SPITXFCR_TXFOVIE_Msk          (0x40UL)                  /*!< SPI SPITXFCR: TXFOVIE (Bitfield-Mask: 0x01)           */
#define SPI_SPITXFCR_TXFCLR_Pos           (7UL)                     /*!< SPI SPITXFCR: TXFCLR (Bit 7)                          */
#define SPI_SPITXFCR_TXFCLR_Msk           (0x80UL)                  /*!< SPI SPITXFCR: TXFCLR (Bitfield-Mask: 0x01)            */
/* ======================================================  SPIRXFTOCTR  ====================================================== */
#define SPI_SPIRXFTOCTR_SPIRXFTOCTR_Pos   (0UL)                     /*!< SPI SPIRXFTOCTR: SPIRXFTOCTR (Bit 0)                  */
#define SPI_SPIRXFTOCTR_SPIRXFTOCTR_Msk   (0x3fUL)                  /*!< SPI SPIRXFTOCTR: SPIRXFTOCTR (Bitfield-Mask: 0x3f)    */
#define SPI_SPIRXFTOCTR_RXFTOE_Pos        (6UL)                     /*!< SPI SPIRXFTOCTR: RXFTOE (Bit 6)                       */
#define SPI_SPIRXFTOCTR_RXFTOE_Msk        (0x40UL)                  /*!< SPI SPIRXFTOCTR: RXFTOE (Bitfield-Mask: 0x01)         */
#define SPI_SPIRXFTOCTR_RXFTOIE_Pos       (7UL)                     /*!< SPI SPIRXFTOCTR: RXFTOIE (Bit 7)                      */
#define SPI_SPIRXFTOCTR_RXFTOIE_Msk       (0x80UL)                  /*!< SPI SPIRXFTOCTR: RXFTOIE (Bitfield-Mask: 0x01)        */
/* ======================================================  SPITXFTOCTR  ====================================================== */
#define SPI_SPITXFTOCTR_SPITXFTOCTR_Pos   (0UL)                     /*!< SPI SPITXFTOCTR: SPITXFTOCTR (Bit 0)                  */
#define SPI_SPITXFTOCTR_SPITXFTOCTR_Msk   (0x3fUL)                  /*!< SPI SPITXFTOCTR: SPITXFTOCTR (Bitfield-Mask: 0x3f)    */
#define SPI_SPITXFTOCTR_TXFTOE_Pos        (6UL)                     /*!< SPI SPITXFTOCTR: TXFTOE (Bit 6)                       */
#define SPI_SPITXFTOCTR_TXFTOE_Msk        (0x40UL)                  /*!< SPI SPITXFTOCTR: TXFTOE (Bitfield-Mask: 0x01)         */
#define SPI_SPITXFTOCTR_TXFTOIE_Pos       (7UL)                     /*!< SPI SPITXFTOCTR: TXFTOIE (Bit 7)                      */
#define SPI_SPITXFTOCTR_TXFTOIE_Msk       (0x80UL)                  /*!< SPI SPITXFTOCTR: TXFTOIE (Bitfield-Mask: 0x01)        */
/* ========================================================  SPIDDR  ========================================================= */
#define SPI_SPIDDR_PORTSP_Pos             (0UL)                     /*!< SPI SPIDDR: PORTSP (Bit 0)                            */
#define SPI_SPIDDR_PORTSP_Msk             (0xfUL)                   /*!< SPI SPIDDR: PORTSP (Bitfield-Mask: 0x0f)              */
/* =========================================================  SPIIR  ========================================================= */
#define SPI_SPIIR_PUPSP_Pos               (0UL)                     /*!< SPI SPIIR: PUPSP (Bit 0)                              */
#define SPI_SPIIR_PUPSP_Msk               (0x1UL)                   /*!< SPI SPIIR: PUPSP (Bitfield-Mask: 0x01)                */
#define SPI_SPIIR_PDPSP_Pos               (1UL)                     /*!< SPI SPIIR: PDPSP (Bit 1)                              */
#define SPI_SPIIR_PDPSP_Msk               (0x2UL)                   /*!< SPI SPIIR: PDPSP (Bitfield-Mask: 0x01)                */
#define SPI_SPIIR_MSPD_Pos                (2UL)                     /*!< SPI SPIIR: MSPD (Bit 2)                               */
#define SPI_SPIIR_MSPD_Msk                (0xcUL)                   /*!< SPI SPIIR: MSPD (Bitfield-Mask: 0x03)                 */
#define SPI_SPIIR_PSW_Pos                 (6UL)                     /*!< SPI SPIIR: PSW (Bit 6)                                */
#define SPI_SPIIR_PSW_Msk                 (0x40UL)                  /*!< SPI SPIIR: PSW (Bitfield-Mask: 0x01)                  */
#define SPI_SPIIR_HS_Pos                  (7UL)                     /*!< SPI SPIIR: HS (Bit 7)                                 */
#define SPI_SPIIR_HS_Msk                  (0x80UL)                  /*!< SPI SPIIR: HS (Bitfield-Mask: 0x01)                   */
/* =======================================================  SPIASCDR  ======================================================== */
#define SPI_SPIASCDR_ASCD_Pos             (0UL)                     /*!< SPI SPIASCDR: ASCD (Bit 0)                            */
#define SPI_SPIASCDR_ASCD_Msk             (0x7UL)                   /*!< SPI SPIASCDR: ASCD (Bitfield-Mask: 0x07)              */
#define SPI_SPIASCDR_PASCD_Pos            (4UL)                     /*!< SPI SPIASCDR: PASCD (Bit 4)                           */
#define SPI_SPIASCDR_PASCD_Msk            (0x70UL)                  /*!< SPI SPIASCDR: PASCD (Bitfield-Mask: 0x07)             */
#define SPI_SPIASCDR_ASCDE_Pos            (7UL)                     /*!< SPI SPIASCDR: ASCDE (Bit 7)                           */
#define SPI_SPIASCDR_ASCDE_Msk            (0x80UL)                  /*!< SPI SPIASCDR: ASCDE (Bitfield-Mask: 0x01)             */
/* =======================================================  SPIBSCDR  ======================================================== */
#define SPI_SPIBSCDR_BSCD_Pos             (0UL)                     /*!< SPI SPIBSCDR: BSCD (Bit 0)                            */
#define SPI_SPIBSCDR_BSCD_Msk             (0x7UL)                   /*!< SPI SPIBSCDR: BSCD (Bitfield-Mask: 0x07)              */
#define SPI_SPIBSCDR_PBSCD_Pos            (4UL)                     /*!< SPI SPIBSCDR: PBSCD (Bit 4)                           */
#define SPI_SPIBSCDR_PBSCD_Msk            (0x70UL)                  /*!< SPI SPIBSCDR: PBSCD (Bitfield-Mask: 0x07)             */
#define SPI_SPIBSCDR_BSCDE_Pos            (7UL)                     /*!< SPI SPIBSCDR: BSCDE (Bit 7)                           */
#define SPI_SPIBSCDR_BSCDE_Msk            (0x80UL)                  /*!< SPI SPIBSCDR: BSCDE (Bitfield-Mask: 0x01)             */
/* ========================================================  SPIPORT  ======================================================== */
#define SPI_SPIPORT_PORTSP_Pos            (0UL)                     /*!< SPI SPIPORT: PORTSP (Bit 0)                           */
#define SPI_SPIPORT_PORTSP_Msk            (0xfUL)                   /*!< SPI SPIPORT: PORTSP (Bitfield-Mask: 0x0f)             */
/* =======================================================  SPITCNT_L  ======================================================= */
/* =======================================================  SPITCNT_H  ======================================================= */
/* ========================================================  SPIDR_L  ======================================================== */
/* ========================================================  SPIDR_H  ======================================================== */
/* =========================================================  SPISR  ========================================================= */
#define SPI_SPISR_RXFEMP_Pos              (0UL)                     /*!< SPI SPISR: RXFEMP (Bit 0)                             */
#define SPI_SPISR_RXFEMP_Msk              (0x1UL)                   /*!< SPI SPISR: RXFEMP (Bitfield-Mask: 0x01)               */
#define SPI_SPISR_RXFFULL_Pos             (1UL)                     /*!< SPI SPISR: RXFFULL (Bit 1)                            */
#define SPI_SPISR_RXFFULL_Msk             (0x2UL)                   /*!< SPI SPISR: RXFFULL (Bitfield-Mask: 0x01)              */
#define SPI_SPISR_TXFEMP_Pos              (2UL)                     /*!< SPI SPISR: TXFEMP (Bit 2)                             */
#define SPI_SPISR_TXFEMP_Msk              (0x4UL)                   /*!< SPI SPISR: TXFEMP (Bitfield-Mask: 0x01)               */
#define SPI_SPISR_TXFFULL_Pos             (3UL)                     /*!< SPI SPISR: TXFFULL (Bit 3)                            */
#define SPI_SPISR_TXFFULL_Msk             (0x8UL)                   /*!< SPI SPISR: TXFFULL (Bitfield-Mask: 0x01)              */
#define SPI_SPISR_MODF_Pos                (4UL)                     /*!< SPI SPISR: MODF (Bit 4)                               */
#define SPI_SPISR_MODF_Msk                (0x10UL)                  /*!< SPI SPISR: MODF (Bitfield-Mask: 0x01)                 */
#define SPI_SPISR_EOTF_Pos                (5UL)                     /*!< SPI SPISR: EOTF (Bit 5)                               */
#define SPI_SPISR_EOTF_Msk                (0x20UL)                  /*!< SPI SPISR: EOTF (Bitfield-Mask: 0x01)                 */
#define SPI_SPISR_FLOST_Pos               (6UL)                     /*!< SPI SPISR: FLOST (Bit 6)                              */
#define SPI_SPISR_FLOST_Msk               (0x40UL)                  /*!< SPI SPISR: FLOST (Bitfield-Mask: 0x01)                */
#define SPI_SPISR_SPIF_Pos                (7UL)                     /*!< SPI SPISR: SPIF (Bit 7)                               */
#define SPI_SPISR_SPIF_Msk                (0x80UL)                  /*!< SPI SPISR: SPIF (Bitfield-Mask: 0x01)                 */
#define SPI_SPISR_RXFSER_Pos              (8UL)                     /*!< SPI SPISR: RXFSER (Bit 8)                             */
#define SPI_SPISR_RXFSER_Msk              (0x100UL)                 /*!< SPI SPISR: RXFSER (Bitfield-Mask: 0x01)               */
#define SPI_SPISR_RXFUDF_Pos              (9UL)                     /*!< SPI SPISR: RXFUDF (Bit 9)                             */
#define SPI_SPISR_RXFUDF_Msk              (0x200UL)                 /*!< SPI SPISR: RXFUDF (Bitfield-Mask: 0x01)               */
#define SPI_SPISR_RXFOVF_Pos              (10UL)                    /*!< SPI SPISR: RXFOVF (Bit 10)                            */
#define SPI_SPISR_RXFOVF_Msk              (0x400UL)                 /*!< SPI SPISR: RXFOVF (Bitfield-Mask: 0x01)               */
#define SPI_SPISR_RXFTO_Pos               (11UL)                    /*!< SPI SPISR: RXFTO (Bit 11)                             */
#define SPI_SPISR_RXFTO_Msk               (0x800UL)                 /*!< SPI SPISR: RXFTO (Bitfield-Mask: 0x01)                */
#define SPI_SPISR_TXFSER_Pos              (12UL)                    /*!< SPI SPISR: TXFSER (Bit 12)                            */
#define SPI_SPISR_TXFSER_Msk              (0x1000UL)                /*!< SPI SPISR: TXFSER (Bitfield-Mask: 0x01)               */
#define SPI_SPISR_TXFUDF_Pos              (13UL)                    /*!< SPI SPISR: TXFUDF (Bit 13)                            */
#define SPI_SPISR_TXFUDF_Msk              (0x2000UL)                /*!< SPI SPISR: TXFUDF (Bitfield-Mask: 0x01)               */
#define SPI_SPISR_TXFOVF_Pos              (14UL)                    /*!< SPI SPISR: TXFOVF (Bit 14)                            */
#define SPI_SPISR_TXFOVF_Msk              (0x4000UL)                /*!< SPI SPISR: TXFOVF (Bitfield-Mask: 0x01)               */
#define SPI_SPISR_TXFTO_Pos               (15UL)                    /*!< SPI SPISR: TXFTO (Bit 15)                             */
#define SPI_SPISR_TXFTO_Msk               (0x8000UL)                /*!< SPI SPISR: TXFTO (Bitfield-Mask: 0x01)                */
/* =======================================================  SPIRXFSR  ======================================================== */
#define SPI_SPIRXFSR_RXFCTR_Pos           (0UL)                     /*!< SPI SPIRXFSR: RXFCTR (Bit 0)                          */
#define SPI_SPIRXFSR_RXFCTR_Msk           (0xfUL)                   /*!< SPI SPIRXFSR: RXFCTR (Bitfield-Mask: 0x0f)            */
#define SPI_SPIRXFSR_RXNXTP_Pos           (4UL)                     /*!< SPI SPIRXFSR: RXNXTP (Bit 4)                          */
#define SPI_SPIRXFSR_RXNXTP_Msk           (0x70UL)                  /*!< SPI SPIRXFSR: RXNXTP (Bitfield-Mask: 0x07)            */
/* =======================================================  SPITXFSR  ======================================================== */
#define SPI_SPITXFSR_TXFCTR_Pos           (0UL)                     /*!< SPI SPITXFSR: TXFCTR (Bit 0)                          */
#define SPI_SPITXFSR_TXFCTR_Msk           (0xfUL)                   /*!< SPI SPITXFSR: TXFCTR (Bitfield-Mask: 0x0f)            */
#define SPI_SPITXFSR_TXNXTP_Pos           (4UL)                     /*!< SPI SPITXFSR: TXNXTP (Bit 4)                          */
#define SPI_SPITXFSR_TXNXTP_Msk           (0x70UL)                  /*!< SPI SPITXFSR: TXNXTP (Bitfield-Mask: 0x07)            */
/* =======================================================  SPIDMACR  ======================================================== */
#define SPI_SPIDMACR_RXDMAE_Pos           (0UL)                     /*!< SPI SPIDMACR: RXDMAE (Bit 0)                          */
#define SPI_SPIDMACR_RXDMAE_Msk           (0x1UL)                   /*!< SPI SPIDMACR: RXDMAE (Bitfield-Mask: 0x01)            */
#define SPI_SPIDMACR_TXDMAE_Pos           (1UL)                     /*!< SPI SPIDMACR: TXDMAE (Bit 1)                          */
#define SPI_SPIDMACR_TXDMAE_Msk           (0x2UL)                   /*!< SPI SPIDMACR: TXDMAE (Bitfield-Mask: 0x01)            */
/* =======================================================  SPIDMATHR  ======================================================= */
#define SPI_SPIDMATHR_RXDMATH_Pos         (0UL)                     /*!< SPI SPIDMATHR: RXDMATH (Bit 0)                        */
#define SPI_SPIDMATHR_RXDMATH_Msk         (0x7UL)                   /*!< SPI SPIDMATHR: RXDMATH (Bitfield-Mask: 0x07)          */
#define SPI_SPIDMATHR_TXDMATH_Pos         (4UL)                     /*!< SPI SPIDMATHR: TXDMATH (Bit 4)                        */
#define SPI_SPIDMATHR_TXDMATH_Msk         (0x70UL)                  /*!< SPI SPIDMATHR: TXDMATH (Bitfield-Mask: 0x07)          */
/* ========================================================  SPIFDCR  ======================================================== */
#define SPI_SPIFDCR_RXFIDX_Pos            (0UL)                     /*!< SPI SPIFDCR: RXFIDX (Bit 0)                           */
#define SPI_SPIFDCR_RXFIDX_Msk            (0x7UL)                   /*!< SPI SPIFDCR: RXFIDX (Bitfield-Mask: 0x07)             */
#define SPI_SPIFDCR_TXFIDX_Pos            (4UL)                     /*!< SPI SPIFDCR: TXFIDX (Bit 4)                           */
#define SPI_SPIFDCR_TXFIDX_Msk            (0x70UL)                  /*!< SPI SPIFDCR: TXFIDX (Bitfield-Mask: 0x07)             */
/* ========================================================  SPIICR  ========================================================= */
#define SPI_SPIICR_MODFIE_Pos             (4UL)                     /*!< SPI SPIICR: MODFIE (Bit 4)                            */
#define SPI_SPIICR_MODFIE_Msk             (0x10UL)                  /*!< SPI SPIICR: MODFIE (Bitfield-Mask: 0x01)              */
#define SPI_SPIICR_FLOSTIE_Pos            (6UL)                     /*!< SPI SPIICR: FLOSTIE (Bit 6)                           */
#define SPI_SPIICR_FLOSTIE_Msk            (0x40UL)                  /*!< SPI SPIICR: FLOSTIE (Bitfield-Mask: 0x01)             */
/* ======================================================  SPIRXFDBGR  ======================================================= */
/* ======================================================  SPITXFDBGR  ======================================================= */


/* =========================================================================================================================== */
/* ================                                            CCM                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  WKUPC  ========================================================= */
#define CCM_WKUPC_WKUPSEN_Pos             (0UL)                     /*!< CCM WKUPC: WKUPSEN (Bit 0)                            */
#define CCM_WKUPC_WKUPSEN_Msk             (0xfffffUL)               /*!< CCM WKUPC: WKUPSEN (Bitfield-Mask: 0xfffff)           */
#define CCM_WKUPC_WKUPFILTEREN_Pos        (31UL)                    /*!< CCM WKUPC: WKUPFILTEREN (Bit 31)                      */
#define CCM_WKUPC_WKUPFILTEREN_Msk        (0x80000000UL)            /*!< CCM WKUPC: WKUPFILTEREN (Bitfield-Mask: 0x01)         */
/* ========================================================  AGFTRIM  ======================================================== */
#define CCM_AGFTRIM_SDA50NSGFTRIM_Pos     (0UL)                     /*!< CCM AGFTRIM: SDA50NSGFTRIM (Bit 0)                    */
#define CCM_AGFTRIM_SDA50NSGFTRIM_Msk     (0xfUL)                   /*!< CCM AGFTRIM: SDA50NSGFTRIM (Bitfield-Mask: 0x0f)      */
#define CCM_AGFTRIM_SCL50NSGFTRIM_Pos     (4UL)                     /*!< CCM AGFTRIM: SCL50NSGFTRIM (Bit 4)                    */
#define CCM_AGFTRIM_SCL50NSGFTRIM_Msk     (0xf0UL)                  /*!< CCM AGFTRIM: SCL50NSGFTRIM (Bitfield-Mask: 0x0f)      */
#define CCM_AGFTRIM_SDA10NSGFTRIM_Pos     (8UL)                     /*!< CCM AGFTRIM: SDA10NSGFTRIM (Bit 8)                    */
#define CCM_AGFTRIM_SDA10NSGFTRIM_Msk     (0xf00UL)                 /*!< CCM AGFTRIM: SDA10NSGFTRIM (Bitfield-Mask: 0x0f)      */
#define CCM_AGFTRIM_SCL10NSGFTRIM_Pos     (12UL)                    /*!< CCM AGFTRIM: SCL10NSGFTRIM (Bit 12)                   */
#define CCM_AGFTRIM_SCL10NSGFTRIM_Msk     (0xf000UL)                /*!< CCM AGFTRIM: SCL10NSGFTRIM (Bitfield-Mask: 0x0f)      */
#define CCM_AGFTRIM_WKUPGFTRIM_Pos        (16UL)                    /*!< CCM AGFTRIM: WKUPGFTRIM (Bit 16)                      */
#define CCM_AGFTRIM_WKUPGFTRIM_Msk        (0xf0000UL)               /*!< CCM AGFTRIM: WKUPGFTRIM (Bitfield-Mask: 0x0f)         */
#define CCM_AGFTRIM_AGFTRIMWE_Pos         (30UL)                    /*!< CCM AGFTRIM: AGFTRIMWE (Bit 30)                       */
#define CCM_AGFTRIM_AGFTRIMWE_Msk         (0xc0000000UL)            /*!< CCM AGFTRIM: AGFTRIMWE (Bitfield-Mask: 0x03)          */
/* ==========================================================  CIR  ========================================================== */
#define CCM_CIR_PIN_Pos                   (8UL)                     /*!< CCM CIR: PIN (Bit 8)                                  */
#define CCM_CIR_PIN_Msk                   (0xff00UL)                /*!< CCM CIR: PIN (Bitfield-Mask: 0xff)                    */
#define CCM_CIR_PRN_Pos                   (0UL)                     /*!< CCM CIR: PRN (Bit 0)                                  */
#define CCM_CIR_PRN_Msk                   (0xffUL)                  /*!< CCM CIR: PRN (Bitfield-Mask: 0xff)                    */
/* ==========================================================  CTR  ========================================================== */
/* ========================================================  PWMIFTC  ======================================================== */
#define CCM_PWMIFTC_PWMxFTE_Pos           (0UL)                     /*!< CCM PWMIFTC: PWMxFTE (Bit 0)                          */
#define CCM_PWMIFTC_PWMxFTE_Msk           (0xffUL)                  /*!< CCM PWMIFTC: PWMxFTE (Bitfield-Mask: 0xff)            */
#define CCM_PWMIFTC_FTClkDIV_Pos          (8UL)                     /*!< CCM PWMIFTC: FTClkDIV (Bit 8)                         */
#define CCM_PWMIFTC_FTClkDIV_Msk          (0x300UL)                 /*!< CCM PWMIFTC: FTClkDIV (Bitfield-Mask: 0x03)           */
#define CCM_PWMIFTC_FTClKSEL_Pos          (16UL)                    /*!< CCM PWMIFTC: FTClKSEL (Bit 16)                        */
#define CCM_PWMIFTC_FTClKSEL_Msk          (0x10000UL)               /*!< CCM PWMIFTC: FTClKSEL (Bitfield-Mask: 0x01)           */
/* ========================================================  PT4IFTC  ======================================================== */
#define CCM_PT4IFTC_RESETBFILTERCNT_Pos   (24UL)                    /*!< CCM PT4IFTC: RESETBFILTERCNT (Bit 24)                 */
#define CCM_PT4IFTC_RESETBFILTERCNT_Msk   (0xff000000UL)            /*!< CCM PT4IFTC: RESETBFILTERCNT (Bitfield-Mask: 0xff)    */
#define CCM_PT4IFTC_FTCLKSEL_Pos          (16UL)                    /*!< CCM PT4IFTC: FTCLKSEL (Bit 16)                        */
#define CCM_PT4IFTC_FTCLKSEL_Msk          (0x10000UL)               /*!< CCM PT4IFTC: FTCLKSEL (Bitfield-Mask: 0x01)           */
#define CCM_PT4IFTC_FTCLKDIV_Pos          (8UL)                     /*!< CCM PT4IFTC: FTCLKDIV (Bit 8)                         */
#define CCM_PT4IFTC_FTCLKDIV_Msk          (0x300UL)                 /*!< CCM PT4IFTC: FTCLKDIV (Bitfield-Mask: 0x03)           */
#define CCM_PT4IFTC_GP4xFTE_Pos           (0UL)                     /*!< CCM PT4IFTC: GP4xFTE (Bit 0)                          */
#define CCM_PT4IFTC_GP4xFTE_Msk           (0xffUL)                  /*!< CCM PT4IFTC: GP4xFTE (Bitfield-Mask: 0xff)            */
/* ========================================================  POWKUPC  ======================================================== */
#define CCM_POWKUPC_WKUPFILTEREN_Pos      (31UL)                    /*!< CCM POWKUPC: WKUPFILTEREN (Bit 31)                    */
#define CCM_POWKUPC_WKUPFILTEREN_Msk      (0x80000000UL)            /*!< CCM POWKUPC: WKUPFILTEREN (Bitfield-Mask: 0x01)       */
#define CCM_POWKUPC_POWKUPSEN_Pos         (0UL)                     /*!< CCM POWKUPC: POWKUPSEN (Bit 0)                        */
#define CCM_POWKUPC_POWKUPSEN_Msk         (0x1fffUL)                /*!< CCM POWKUPC: POWKUPSEN (Bitfield-Mask: 0x1fff)        */
/* =======================================================  POEPWKUPC  ======================================================= */
#define CCM_POEPWKUPC_WU_COND0_Pos        (0UL)                     /*!< CCM POEPWKUPC: WU_COND0 (Bit 0)                       */
#define CCM_POEPWKUPC_WU_COND0_Msk        (0x3UL)                   /*!< CCM POEPWKUPC: WU_COND0 (Bitfield-Mask: 0x03)         */
#define CCM_POEPWKUPC_WU_COND1_Pos        (2UL)                     /*!< CCM POEPWKUPC: WU_COND1 (Bit 2)                       */
#define CCM_POEPWKUPC_WU_COND1_Msk        (0xcUL)                   /*!< CCM POEPWKUPC: WU_COND1 (Bitfield-Mask: 0x03)         */
#define CCM_POEPWKUPC_WU_COND2_Pos        (4UL)                     /*!< CCM POEPWKUPC: WU_COND2 (Bit 4)                       */
#define CCM_POEPWKUPC_WU_COND2_Msk        (0x30UL)                  /*!< CCM POEPWKUPC: WU_COND2 (Bitfield-Mask: 0x03)         */
#define CCM_POEPWKUPC_WU_COND3_Pos        (6UL)                     /*!< CCM POEPWKUPC: WU_COND3 (Bit 6)                       */
#define CCM_POEPWKUPC_WU_COND3_Msk        (0xc0UL)                  /*!< CCM POEPWKUPC: WU_COND3 (Bitfield-Mask: 0x03)         */
#define CCM_POEPWKUPC_WU_COND4_Pos        (8UL)                     /*!< CCM POEPWKUPC: WU_COND4 (Bit 8)                       */
#define CCM_POEPWKUPC_WU_COND4_Msk        (0x300UL)                 /*!< CCM POEPWKUPC: WU_COND4 (Bitfield-Mask: 0x03)         */
#define CCM_POEPWKUPC_WU_COND5_Pos        (10UL)                    /*!< CCM POEPWKUPC: WU_COND5 (Bit 10)                      */
#define CCM_POEPWKUPC_WU_COND5_Msk        (0xc00UL)                 /*!< CCM POEPWKUPC: WU_COND5 (Bitfield-Mask: 0x03)         */
#define CCM_POEPWKUPC_WU_COND6_Pos        (12UL)                    /*!< CCM POEPWKUPC: WU_COND6 (Bit 12)                      */
#define CCM_POEPWKUPC_WU_COND6_Msk        (0x3000UL)                /*!< CCM POEPWKUPC: WU_COND6 (Bitfield-Mask: 0x03)         */
#define CCM_POEPWKUPC_WU_COND7_Pos        (14UL)                    /*!< CCM POEPWKUPC: WU_COND7 (Bit 14)                      */
#define CCM_POEPWKUPC_WU_COND7_Msk        (0xc000UL)                /*!< CCM POEPWKUPC: WU_COND7 (Bitfield-Mask: 0x03)         */
/* =======================================================  POEPWKUPF  ======================================================= */
#define CCM_POEPWKUPF_EPWKUPF_Pos         (0UL)                     /*!< CCM POEPWKUPF: EPWKUPF (Bit 0)                        */
#define CCM_POEPWKUPF_EPWKUPF_Msk         (0xffUL)                  /*!< CCM POEPWKUPF: EPWKUPF (Bitfield-Mask: 0xff)          */
/* =========================================================  TMCR  ========================================================== */
#define CCM_TMCR_GLCTM_Pos                (0UL)                     /*!< CCM TMCR: GLCTM (Bit 0)                               */
#define CCM_TMCR_GLCTM_Msk                (0x1UL)                   /*!< CCM TMCR: GLCTM (Bitfield-Mask: 0x01)                 */
#define CCM_TMCR_LCDTM_Pos                (4UL)                     /*!< CCM TMCR: LCDTM (Bit 4)                               */
#define CCM_TMCR_LCDTM_Msk                (0x10UL)                  /*!< CCM TMCR: LCDTM (Bitfield-Mask: 0x01)                 */
#define CCM_TMCR_OSC32KTCLKEN_Pos         (5UL)                     /*!< CCM TMCR: OSC32KTCLKEN (Bit 5)                        */
#define CCM_TMCR_OSC32KTCLKEN_Msk         (0x20UL)                  /*!< CCM TMCR: OSC32KTCLKEN (Bitfield-Mask: 0x01)          */
#define CCM_TMCR_SDA50NFLTFLAG_Pos        (8UL)                     /*!< CCM TMCR: SDA50NFLTFLAG (Bit 8)                       */
#define CCM_TMCR_SDA50NFLTFLAG_Msk        (0x100UL)                 /*!< CCM TMCR: SDA50NFLTFLAG (Bitfield-Mask: 0x01)         */
#define CCM_TMCR_SCL50NFLTFLAG_Pos        (9UL)                     /*!< CCM TMCR: SCL50NFLTFLAG (Bit 9)                       */
#define CCM_TMCR_SCL50NFLTFLAG_Msk        (0x200UL)                 /*!< CCM TMCR: SCL50NFLTFLAG (Bitfield-Mask: 0x01)         */
#define CCM_TMCR_SDA10NFLTFLAG_Pos        (10UL)                    /*!< CCM TMCR: SDA10NFLTFLAG (Bit 10)                      */
#define CCM_TMCR_SDA10NFLTFLAG_Msk        (0x400UL)                 /*!< CCM TMCR: SDA10NFLTFLAG (Bitfield-Mask: 0x01)         */
#define CCM_TMCR_SCL10NFLTFLAG_Pos        (11UL)                    /*!< CCM TMCR: SCL10NFLTFLAG (Bit 11)                      */
#define CCM_TMCR_SCL10NFLTFLAG_Msk        (0x800UL)                 /*!< CCM TMCR: SCL10NFLTFLAG (Bitfield-Mask: 0x01)         */
#define CCM_TMCR_WKUPFLTFLAG_Pos          (12UL)                    /*!< CCM TMCR: WKUPFLTFLAG (Bit 12)                        */
#define CCM_TMCR_WKUPFLTFLAG_Msk          (0x1000UL)                /*!< CCM TMCR: WKUPFLTFLAG (Bitfield-Mask: 0x01)           */
#define CCM_TMCR_OSC32KFLAG_Pos           (13UL)                    /*!< CCM TMCR: OSC32KFLAG (Bit 13)                         */
#define CCM_TMCR_OSC32KFLAG_Msk           (0x2000UL)                /*!< CCM TMCR: OSC32KFLAG (Bitfield-Mask: 0x01)            */
#define CCM_TMCR_PMCVREFTESTEN_Pos        (16UL)                    /*!< CCM TMCR: PMCVREFTESTEN (Bit 16)                      */
#define CCM_TMCR_PMCVREFTESTEN_Msk        (0x10000UL)               /*!< CCM TMCR: PMCVREFTESTEN (Bitfield-Mask: 0x01)         */
#define CCM_TMCR_PMCTESTBIAS_Pos          (17UL)                    /*!< CCM TMCR: PMCTESTBIAS (Bit 17)                        */
#define CCM_TMCR_PMCTESTBIAS_Msk          (0x20000UL)               /*!< CCM TMCR: PMCTESTBIAS (Bitfield-Mask: 0x01)           */
#define CCM_TMCR_PMCTESTBIAS2_Pos         (18UL)                    /*!< CCM TMCR: PMCTESTBIAS2 (Bit 18)                       */
#define CCM_TMCR_PMCTESTBIAS2_Msk         (0x40000UL)               /*!< CCM TMCR: PMCTESTBIAS2 (Bitfield-Mask: 0x01)          */
#define CCM_TMCR_VDD1P5TESTEN_Pos         (19UL)                    /*!< CCM TMCR: VDD1P5TESTEN (Bit 19)                       */
#define CCM_TMCR_VDD1P5TESTEN_Msk         (0x80000UL)               /*!< CCM TMCR: VDD1P5TESTEN (Bitfield-Mask: 0x01)          */
#define CCM_TMCR_DAC2ADCEN_Pos            (20UL)                    /*!< CCM TMCR: DAC2ADCEN (Bit 20)                          */
#define CCM_TMCR_DAC2ADCEN_Msk            (0x100000UL)              /*!< CCM TMCR: DAC2ADCEN (Bitfield-Mask: 0x01)             */
#define CCM_TMCR_VREFENDEBUG_Pos          (21UL)                    /*!< CCM TMCR: VREFENDEBUG (Bit 21)                        */
#define CCM_TMCR_VREFENDEBUG_Msk          (0x200000UL)              /*!< CCM TMCR: VREFENDEBUG (Bitfield-Mask: 0x01)           */
#define CCM_TMCR_VREFOUTTESTEN_Pos        (22UL)                    /*!< CCM TMCR: VREFOUTTESTEN (Bit 22)                      */
#define CCM_TMCR_VREFOUTTESTEN_Msk        (0x400000UL)              /*!< CCM TMCR: VREFOUTTESTEN (Bitfield-Mask: 0x01)         */
#define CCM_TMCR_VREFVOUTTESTSEL_Pos      (24UL)                    /*!< CCM TMCR: VREFVOUTTESTSEL (Bit 24)                    */
#define CCM_TMCR_VREFVOUTTESTSEL_Msk      (0x3000000UL)             /*!< CCM TMCR: VREFVOUTTESTSEL (Bitfield-Mask: 0x03)       */
#define CCM_TMCR_TSTESTSEL_Pos            (26UL)                    /*!< CCM TMCR: TSTESTSEL (Bit 26)                          */
#define CCM_TMCR_TSTESTSEL_Msk            (0x1c000000UL)            /*!< CCM TMCR: TSTESTSEL (Bitfield-Mask: 0x07)             */
#define CCM_TMCR_TMCRWE_Pos               (30UL)                    /*!< CCM TMCR: TMCRWE (Bit 30)                             */
#define CCM_TMCR_TMCRWE_Msk               (0xc0000000UL)            /*!< CCM TMCR: TMCRWE (Bitfield-Mask: 0x03)                */
/* ========================================================  PWM0ICR  ======================================================== */
#define CCM_PWM0ICR_PRESCALE_Pos          (0UL)                     /*!< CCM PWM0ICR: PRESCALE (Bit 0)                         */
#define CCM_PWM0ICR_PRESCALE_Msk          (0xffffUL)                /*!< CCM PWM0ICR: PRESCALE (Bitfield-Mask: 0xffff)         */
#define CCM_PWM0ICR_DIVCLKSEL_Pos         (16UL)                    /*!< CCM PWM0ICR: DIVCLKSEL (Bit 16)                       */
#define CCM_PWM0ICR_DIVCLKSEL_Msk         (0x70000UL)               /*!< CCM PWM0ICR: DIVCLKSEL (Bitfield-Mask: 0x07)          */
#define CCM_PWM0ICR_PWM0INPUTSEL_Pos      (30UL)                    /*!< CCM PWM0ICR: PWM0INPUTSEL (Bit 30)                    */
#define CCM_PWM0ICR_PWM0INPUTSEL_Msk      (0x40000000UL)            /*!< CCM PWM0ICR: PWM0INPUTSEL (Bitfield-Mask: 0x01)       */
#define CCM_PWM0ICR_CFGDONE_Pos           (31UL)                    /*!< CCM PWM0ICR: CFGDONE (Bit 31)                         */
#define CCM_PWM0ICR_CFGDONE_Msk           (0x80000000UL)            /*!< CCM PWM0ICR: CFGDONE (Bitfield-Mask: 0x01)            */


/* =========================================================================================================================== */
/* ================                                            CPM                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  SYSCCFG  ======================================================== */
#define CPM_SYSCCFG_EoscEn_Pos            (0UL)                     /*!< CPM SYSCCFG: EoscEn (Bit 0)                           */
#define CPM_SYSCCFG_EoscEn_Msk            (0x1UL)                   /*!< CPM SYSCCFG: EoscEn (Bitfield-Mask: 0x01)             */
#define CPM_SYSCCFG_RG_PMU_CLK_EN_Pos     (1UL)                     /*!< CPM SYSCCFG: RG_PMU_CLK_EN (Bit 1)                    */
#define CPM_SYSCCFG_RG_PMU_CLK_EN_Msk     (0x2UL)                   /*!< CPM SYSCCFG: RG_PMU_CLK_EN (Bitfield-Mask: 0x01)      */
#define CPM_SYSCCFG_EoscReady_Pos         (2UL)                     /*!< CPM SYSCCFG: EoscReady (Bit 2)                        */
#define CPM_SYSCCFG_EoscReady_Msk         (0x4UL)                   /*!< CPM SYSCCFG: EoscReady (Bitfield-Mask: 0x01)          */
#define CPM_SYSCCFG_RG_OSC_EN_Pos         (3UL)                     /*!< CPM SYSCCFG: RG_OSC_EN (Bit 3)                        */
#define CPM_SYSCCFG_RG_OSC_EN_Msk         (0x8UL)                   /*!< CPM SYSCCFG: RG_OSC_EN (Bitfield-Mask: 0x01)          */
#define CPM_SYSCCFG_AD_128K_TEST_Pos      (4UL)                     /*!< CPM SYSCCFG: AD_128K_TEST (Bit 4)                     */
#define CPM_SYSCCFG_AD_128K_TEST_Msk      (0x10UL)                  /*!< CPM SYSCCFG: AD_128K_TEST (Bitfield-Mask: 0x01)       */
#define CPM_SYSCCFG_SoftSwitchEn_Pos      (5UL)                     /*!< CPM SYSCCFG: SoftSwitchEn (Bit 5)                     */
#define CPM_SYSCCFG_SoftSwitchEn_Msk      (0x20UL)                  /*!< CPM SYSCCFG: SoftSwitchEn (Bitfield-Mask: 0x01)       */
#define CPM_SYSCCFG_CLK_MUX_Pos           (6UL)                     /*!< CPM SYSCCFG: CLK_MUX (Bit 6)                          */
#define CPM_SYSCCFG_CLK_MUX_Msk           (0xc0UL)                  /*!< CPM SYSCCFG: CLK_MUX (Bitfield-Mask: 0x03)            */
#define CPM_SYSCCFG_BPLC_CLK_DIV_Pos      (8UL)                     /*!< CPM SYSCCFG: BPLC_CLK_DIV (Bit 8)                     */
#define CPM_SYSCCFG_BPLC_CLK_DIV_Msk      (0x700UL)                 /*!< CPM SYSCCFG: BPLC_CLK_DIV (Bitfield-Mask: 0x07)       */
#define CPM_SYSCCFG_SYS_CLK_DIV_Pos       (11UL)                    /*!< CPM SYSCCFG: SYS_CLK_DIV (Bit 11)                     */
#define CPM_SYSCCFG_SYS_CLK_DIV_Msk       (0x1800UL)                /*!< CPM SYSCCFG: SYS_CLK_DIV (Bitfield-Mask: 0x03)        */
#define CPM_SYSCCFG_CLK_OUT_SEL_Pos       (13UL)                    /*!< CPM SYSCCFG: CLK_OUT_SEL (Bit 13)                     */
#define CPM_SYSCCFG_CLK_OUT_SEL_Msk       (0xe000UL)                /*!< CPM SYSCCFG: CLK_OUT_SEL (Bitfield-Mask: 0x07)        */
#define CPM_SYSCCFG_IPS_CLK_Pos           (16UL)                    /*!< CPM SYSCCFG: IPS_CLK (Bit 16)                         */
#define CPM_SYSCCFG_IPS_CLK_Msk           (0xff0000UL)              /*!< CPM SYSCCFG: IPS_CLK (Bitfield-Mask: 0xff)            */
#define CPM_SYSCCFG_HRF_CLK_DIV_Pos       (24UL)                    /*!< CPM SYSCCFG: HRF_CLK_DIV (Bit 24)                     */
#define CPM_SYSCCFG_HRF_CLK_DIV_Msk       (0x7000000UL)             /*!< CPM SYSCCFG: HRF_CLK_DIV (Bitfield-Mask: 0x07)        */
#define CPM_SYSCCFG_CLKSWDONE_Pos         (27UL)                    /*!< CPM SYSCCFG: CLKSWDONE (Bit 27)                       */
#define CPM_SYSCCFG_CLKSWDONE_Msk         (0x8000000UL)             /*!< CPM SYSCCFG: CLKSWDONE (Bitfield-Mask: 0x01)          */
#define CPM_SYSCCFG_TEST_Pos              (30UL)                    /*!< CPM SYSCCFG: TEST (Bit 30)                            */
#define CPM_SYSCCFG_TEST_Msk              (0xc0000000UL)            /*!< CPM SYSCCFG: TEST (Bitfield-Mask: 0x03)               */
/* =========================================================  OSCCR  ========================================================= */
#define CPM_OSCCR_RG_OSC_EN_ALC_Pos       (0UL)                     /*!< CPM OSCCR: RG_OSC_EN_ALC (Bit 0)                      */
#define CPM_OSCCR_RG_OSC_EN_ALC_Msk       (0x1UL)                   /*!< CPM OSCCR: RG_OSC_EN_ALC (Bitfield-Mask: 0x01)        */
#define CPM_OSCCR_RG_OSC_BIAS_TRIM_Pos    (1UL)                     /*!< CPM OSCCR: RG_OSC_BIAS_TRIM (Bit 1)                   */
#define CPM_OSCCR_RG_OSC_BIAS_TRIM_Msk    (0x1eUL)                  /*!< CPM OSCCR: RG_OSC_BIAS_TRIM (Bitfield-Mask: 0x0f)     */
#define CPM_OSCCR_RG_OSC_RANGE_Pos        (5UL)                     /*!< CPM OSCCR: RG_OSC_RANGE (Bit 5)                       */
#define CPM_OSCCR_RG_OSC_RANGE_Msk        (0x20UL)                  /*!< CPM OSCCR: RG_OSC_RANGE (Bitfield-Mask: 0x01)         */
#define CPM_OSCCR_RG_OSC_DRIVE_Pos        (8UL)                     /*!< CPM OSCCR: RG_OSC_DRIVE (Bit 8)                       */
#define CPM_OSCCR_RG_OSC_DRIVE_Msk        (0xff00UL)                /*!< CPM OSCCR: RG_OSC_DRIVE (Bitfield-Mask: 0xff)         */
#define CPM_OSCCR_RG_OSC_CAPTRIM_Pos      (16UL)                    /*!< CPM OSCCR: RG_OSC_CAPTRIM (Bit 16)                    */
#define CPM_OSCCR_RG_OSC_CAPTRIM_Msk      (0xff0000UL)              /*!< CPM OSCCR: RG_OSC_CAPTRIM (Bitfield-Mask: 0xff)       */
#define CPM_OSCCR_RG_PMU_CLK_TRIM_Pos     (24UL)                    /*!< CPM OSCCR: RG_PMU_CLK_TRIM (Bit 24)                   */
#define CPM_OSCCR_RG_PMU_CLK_TRIM_Msk     (0x1f000000UL)            /*!< CPM OSCCR: RG_PMU_CLK_TRIM (Bitfield-Mask: 0x1f)      */
#define CPM_OSCCR_TEST_Pos                (30UL)                    /*!< CPM OSCCR: TEST (Bit 30)                              */
#define CPM_OSCCR_TEST_Msk                (0xc0000000UL)            /*!< CPM OSCCR: TEST (Bitfield-Mask: 0x03)                 */
/* =======================================================  MSCRSTOP  ======================================================== */
/* =========================================================  MSCR  ========================================================== */
/* ======================================================  PLL_CONFIG0  ====================================================== */
#define CPM_PLL_CONFIG0_PLL_FBDIV_Pos     (0UL)                     /*!< CPM PLL_CONFIG0: PLL_FBDIV (Bit 0)                    */
#define CPM_PLL_CONFIG0_PLL_FBDIV_Msk     (0xfffUL)                 /*!< CPM PLL_CONFIG0: PLL_FBDIV (Bitfield-Mask: 0xfff)     */
#define CPM_PLL_CONFIG0_PLL_REFDIV_Pos    (12UL)                    /*!< CPM PLL_CONFIG0: PLL_REFDIV (Bit 12)                  */
#define CPM_PLL_CONFIG0_PLL_REFDIV_Msk    (0x3f000UL)               /*!< CPM PLL_CONFIG0: PLL_REFDIV (Bitfield-Mask: 0x3f)     */
#define CPM_PLL_CONFIG0_PLL_POSTDIV1_Pos  (18UL)                    /*!< CPM PLL_CONFIG0: PLL_POSTDIV1 (Bit 18)                */
#define CPM_PLL_CONFIG0_PLL_POSTDIV1_Msk  (0x3c0000UL)              /*!< CPM PLL_CONFIG0: PLL_POSTDIV1 (Bitfield-Mask: 0x0f)   */
#define CPM_PLL_CONFIG0_PLL_POSTDIV2_Pos  (22UL)                    /*!< CPM PLL_CONFIG0: PLL_POSTDIV2 (Bit 22)                */
#define CPM_PLL_CONFIG0_PLL_POSTDIV2_Msk  (0x1c00000UL)             /*!< CPM PLL_CONFIG0: PLL_POSTDIV2 (Bitfield-Mask: 0x07)   */
#define CPM_PLL_CONFIG0_PLL_PD_Pos        (26UL)                    /*!< CPM PLL_CONFIG0: PLL_PD (Bit 26)                      */
#define CPM_PLL_CONFIG0_PLL_PD_Msk        (0x4000000UL)             /*!< CPM PLL_CONFIG0: PLL_PD (Bitfield-Mask: 0x01)         */
#define CPM_PLL_CONFIG0_PLL_FOUTVCOPD_Pos (27UL)                    /*!< CPM PLL_CONFIG0: PLL_FOUTVCOPD (Bit 27)               */
#define CPM_PLL_CONFIG0_PLL_FOUTVCOPD_Msk (0x8000000UL)             /*!< CPM PLL_CONFIG0: PLL_FOUTVCOPD (Bitfield-Mask: 0x01)  */
#define CPM_PLL_CONFIG0_PLL_FOUT2PD_Pos   (28UL)                    /*!< CPM PLL_CONFIG0: PLL_FOUT2PD (Bit 28)                 */
#define CPM_PLL_CONFIG0_PLL_FOUT2PD_Msk   (0x10000000UL)            /*!< CPM PLL_CONFIG0: PLL_FOUT2PD (Bitfield-Mask: 0x01)    */
#define CPM_PLL_CONFIG0_PLL_FOUT1PD_Pos   (29UL)                    /*!< CPM PLL_CONFIG0: PLL_FOUT1PD (Bit 29)                 */
#define CPM_PLL_CONFIG0_PLL_FOUT1PD_Msk   (0x20000000UL)            /*!< CPM PLL_CONFIG0: PLL_FOUT1PD (Bitfield-Mask: 0x01)    */
#define CPM_PLL_CONFIG0_PLL_DSMPD_Pos     (30UL)                    /*!< CPM PLL_CONFIG0: PLL_DSMPD (Bit 30)                   */
#define CPM_PLL_CONFIG0_PLL_DSMPD_Msk     (0x40000000UL)            /*!< CPM PLL_CONFIG0: PLL_DSMPD (Bitfield-Mask: 0x01)      */
#define CPM_PLL_CONFIG0_PLL_BYPASS_Pos    (31UL)                    /*!< CPM PLL_CONFIG0: PLL_BYPASS (Bit 31)                  */
#define CPM_PLL_CONFIG0_PLL_BYPASS_Msk    (0x80000000UL)            /*!< CPM PLL_CONFIG0: PLL_BYPASS (Bitfield-Mask: 0x01)     */
/* ======================================================  PLL_CONFIG1  ====================================================== */
#define CPM_PLL_CONFIG1_PLL_FRAC_Pos      (0UL)                     /*!< CPM PLL_CONFIG1: PLL_FRAC (Bit 0)                     */
#define CPM_PLL_CONFIG1_PLL_FRAC_Msk      (0xffffffUL)              /*!< CPM PLL_CONFIG1: PLL_FRAC (Bitfield-Mask: 0xffffff)   */
#define CPM_PLL_CONFIG1_PLL_POSTDIV1_Pos  (24UL)                    /*!< CPM PLL_CONFIG1: PLL_POSTDIV1 (Bit 24)                */
#define CPM_PLL_CONFIG1_PLL_POSTDIV1_Msk  (0xf000000UL)             /*!< CPM PLL_CONFIG1: PLL_POSTDIV1 (Bitfield-Mask: 0x0f)   */
#define CPM_PLL_CONFIG1_PLL_POSTDIV2_Pos  (28UL)                    /*!< CPM PLL_CONFIG1: PLL_POSTDIV2 (Bit 28)                */
#define CPM_PLL_CONFIG1_PLL_POSTDIV2_Msk  (0x70000000UL)            /*!< CPM PLL_CONFIG1: PLL_POSTDIV2 (Bitfield-Mask: 0x07)   */
#define CPM_PLL_CONFIG1_PLL_LOCK_Pos      (31UL)                    /*!< CPM PLL_CONFIG1: PLL_LOCK (Bit 31)                    */
#define CPM_PLL_CONFIG1_PLL_LOCK_Msk      (0x80000000UL)            /*!< CPM PLL_CONFIG1: PLL_LOCK (Bitfield-Mask: 0x01)       */
/* ========================================================  AHBMSCR  ======================================================== */
/* ======================================================  AHBMSCRSTOP  ====================================================== */
/* =========================================================  PMUCR  ========================================================= */
#define CPM_PMUCR_DA_REST1V_Pos           (0UL)                     /*!< CPM PMUCR: DA_REST1V (Bit 0)                          */
#define CPM_PMUCR_DA_REST1V_Msk           (0x1UL)                   /*!< CPM PMUCR: DA_REST1V (Bitfield-Mask: 0x01)            */
#define CPM_PMUCR_RG_VDD12_SEL_Pos        (1UL)                     /*!< CPM PMUCR: RG_VDD12_SEL (Bit 1)                       */
#define CPM_PMUCR_RG_VDD12_SEL_Msk        (0x6UL)                   /*!< CPM PMUCR: RG_VDD12_SEL (Bitfield-Mask: 0x03)         */
#define CPM_PMUCR_RG_DCDC_VOUT_TR_Pos     (3UL)                     /*!< CPM PMUCR: RG_DCDC_VOUT_TR (Bit 3)                    */
#define CPM_PMUCR_RG_DCDC_VOUT_TR_Msk     (0x18UL)                  /*!< CPM PMUCR: RG_DCDC_VOUT_TR (Bitfield-Mask: 0x03)      */
#define CPM_PMUCR_RG_BBU_EN_Pos           (5UL)                     /*!< CPM PMUCR: RG_BBU_EN (Bit 5)                          */
#define CPM_PMUCR_RG_BBU_EN_Msk           (0x20UL)                  /*!< CPM PMUCR: RG_BBU_EN (Bitfield-Mask: 0x01)            */
#define CPM_PMUCR_RG_RF1V8_EN_Pos         (6UL)                     /*!< CPM PMUCR: RG_RF1V8_EN (Bit 6)                        */
#define CPM_PMUCR_RG_RF1V8_EN_Msk         (0x40UL)                  /*!< CPM PMUCR: RG_RF1V8_EN (Bitfield-Mask: 0x01)          */
#define CPM_PMUCR_RG_DCDC_BG_TR_Pos       (8UL)                     /*!< CPM PMUCR: RG_DCDC_BG_TR (Bit 8)                      */
#define CPM_PMUCR_RG_DCDC_BG_TR_Msk       (0xf00UL)                 /*!< CPM PMUCR: RG_DCDC_BG_TR (Bitfield-Mask: 0x0f)        */
#define CPM_PMUCR_RG_DCDC_GCS_TR_Pos      (12UL)                    /*!< CPM PMUCR: RG_DCDC_GCS_TR (Bit 12)                    */
#define CPM_PMUCR_RG_DCDC_GCS_TR_Msk      (0x3000UL)                /*!< CPM PMUCR: RG_DCDC_GCS_TR (Bitfield-Mask: 0x03)       */
#define CPM_PMUCR_RG_DCDC_MFGAIN_TR_Pos   (14UL)                    /*!< CPM PMUCR: RG_DCDC_MFGAIN_TR (Bit 14)                 */
#define CPM_PMUCR_RG_DCDC_MFGAIN_TR_Msk   (0xc000UL)                /*!< CPM PMUCR: RG_DCDC_MFGAIN_TR (Bitfield-Mask: 0x03)    */
#define CPM_PMUCR_RG_DCDC_ZCD_TR_Pos      (16UL)                    /*!< CPM PMUCR: RG_DCDC_ZCD_TR (Bit 16)                    */
#define CPM_PMUCR_RG_DCDC_ZCD_TR_Msk      (0x30000UL)               /*!< CPM PMUCR: RG_DCDC_ZCD_TR (Bitfield-Mask: 0x03)       */
#define CPM_PMUCR_RG_DCDC_CCM_Pos         (18UL)                    /*!< CPM PMUCR: RG_DCDC_CCM (Bit 18)                       */
#define CPM_PMUCR_RG_DCDC_CCM_Msk         (0x40000UL)               /*!< CPM PMUCR: RG_DCDC_CCM (Bitfield-Mask: 0x01)          */
#define CPM_PMUCR_RG_DCDC_DCM_Pos         (19UL)                    /*!< CPM PMUCR: RG_DCDC_DCM (Bit 19)                       */
#define CPM_PMUCR_RG_DCDC_DCM_Msk         (0x80000UL)               /*!< CPM PMUCR: RG_DCDC_DCM (Bitfield-Mask: 0x01)          */
#define CPM_PMUCR_RG_RF1V8_TR_Pos         (20UL)                    /*!< CPM PMUCR: RG_RF1V8_TR (Bit 20)                       */
#define CPM_PMUCR_RG_RF1V8_TR_Msk         (0x300000UL)              /*!< CPM PMUCR: RG_RF1V8_TR (Bitfield-Mask: 0x03)          */
#define CPM_PMUCR_TEST_Pos                (30UL)                    /*!< CPM PMUCR: TEST (Bit 30)                              */
#define CPM_PMUCR_TEST_Msk                (0xc0000000UL)            /*!< CPM PMUCR: TEST (Bitfield-Mask: 0x03)                 */
/* =======================================================  VBATDETCR  ======================================================= */
#define CPM_VBATDETCR_VBATDET_EN_Pos      (0UL)                     /*!< CPM VBATDETCR: VBATDET_EN (Bit 0)                     */
#define CPM_VBATDETCR_VBATDET_EN_Msk      (0x1UL)                   /*!< CPM VBATDETCR: VBATDET_EN (Bitfield-Mask: 0x01)       */
#define CPM_VBATDETCR_VBATDET_DOUT_Pos    (8UL)                     /*!< CPM VBATDETCR: VBATDET_DOUT (Bit 8)                   */
#define CPM_VBATDETCR_VBATDET_DOUT_Msk    (0xffff00UL)              /*!< CPM VBATDETCR: VBATDET_DOUT (Bitfield-Mask: 0xffff)   */
#define CPM_VBATDETCR_TEST_Pos            (30UL)                    /*!< CPM VBATDETCR: TEST (Bit 30)                          */
#define CPM_VBATDETCR_TEST_Msk            (0xc0000000UL)            /*!< CPM VBATDETCR: TEST (Bitfield-Mask: 0x03)             */
/* ========================================================  VDETCR  ========================================================= */
#define CPM_VDETCR_VPINDET_EN_Pos         (0UL)                     /*!< CPM VDETCR: VPINDET_EN (Bit 0)                        */
#define CPM_VDETCR_VPINDET_EN_Msk         (0x1UL)                   /*!< CPM VDETCR: VPINDET_EN (Bitfield-Mask: 0x01)          */
#define CPM_VDETCR_VPINDET_S_Pos          (1UL)                     /*!< CPM VDETCR: VPINDET_S (Bit 1)                         */
#define CPM_VDETCR_VPINDET_S_Msk          (0x2UL)                   /*!< CPM VDETCR: VPINDET_S (Bitfield-Mask: 0x01)           */
#define CPM_VDETCR_VPINDET_DOUT_Pos       (8UL)                     /*!< CPM VDETCR: VPINDET_DOUT (Bit 8)                      */
#define CPM_VDETCR_VPINDET_DOUT_Msk       (0xffff00UL)              /*!< CPM VDETCR: VPINDET_DOUT (Bitfield-Mask: 0xffff)      */
#define CPM_VDETCR_TEST_Pos               (30UL)                    /*!< CPM VDETCR: TEST (Bit 30)                             */
#define CPM_VDETCR_TEST_Msk               (0xc0000000UL)            /*!< CPM VDETCR: TEST (Bitfield-Mask: 0x03)                */
/* =======================================================  MISCCLKCR  ======================================================= */
#define CPM_MISCCLKCR_TS_CLK_DIV_Pos      (0UL)                     /*!< CPM MISCCLKCR: TS_CLK_DIV (Bit 0)                     */
#define CPM_MISCCLKCR_TS_CLK_DIV_Msk      (0xfffUL)                 /*!< CPM MISCCLKCR: TS_CLK_DIV (Bitfield-Mask: 0xfff)      */
#define CPM_MISCCLKCR_TS_CLK_EN_Pos       (12UL)                    /*!< CPM MISCCLKCR: TS_CLK_EN (Bit 12)                     */
#define CPM_MISCCLKCR_TS_CLK_EN_Msk       (0x1000UL)                /*!< CPM MISCCLKCR: TS_CLK_EN (Bitfield-Mask: 0x01)        */
#define CPM_MISCCLKCR_ATRITH_CLK_DIV_Pos  (13UL)                    /*!< CPM MISCCLKCR: ATRITH_CLK_DIV (Bit 13)                */
#define CPM_MISCCLKCR_ATRITH_CLK_DIV_Msk  (0x6000UL)                /*!< CPM MISCCLKCR: ATRITH_CLK_DIV (Bitfield-Mask: 0x03)   */
#define CPM_MISCCLKCR_ARITH_CLK_EN_Pos    (15UL)                    /*!< CPM MISCCLKCR: ARITH_CLK_EN (Bit 15)                  */
#define CPM_MISCCLKCR_ARITH_CLK_EN_Msk    (0x8000UL)                /*!< CPM MISCCLKCR: ARITH_CLK_EN (Bitfield-Mask: 0x01)     */
#define CPM_MISCCLKCR_HRF_BBP_CLK_EN_Pos  (16UL)                    /*!< CPM MISCCLKCR: HRF_BBP_CLK_EN (Bit 16)                */
#define CPM_MISCCLKCR_HRF_BBP_CLK_EN_Msk  (0x10000UL)               /*!< CPM MISCCLKCR: HRF_BBP_CLK_EN (Bitfield-Mask: 0x01)   */
#define CPM_MISCCLKCR_HRF_MEM_CLK_EN_Pos  (17UL)                    /*!< CPM MISCCLKCR: HRF_MEM_CLK_EN (Bit 17)                */
#define CPM_MISCCLKCR_HRF_MEM_CLK_EN_Msk  (0x20000UL)               /*!< CPM MISCCLKCR: HRF_MEM_CLK_EN (Bitfield-Mask: 0x01)   */
#define CPM_MISCCLKCR_HPLC_BBP_CLK_EN_Pos (18UL)                    /*!< CPM MISCCLKCR: HPLC_BBP_CLK_EN (Bit 18)               */
#define CPM_MISCCLKCR_HPLC_BBP_CLK_EN_Msk (0x40000UL)               /*!< CPM MISCCLKCR: HPLC_BBP_CLK_EN (Bitfield-Mask: 0x01)  */
#define CPM_MISCCLKCR_HPLC_MEM_CLK_EN_Pos (19UL)                    /*!< CPM MISCCLKCR: HPLC_MEM_CLK_EN (Bit 19)               */
#define CPM_MISCCLKCR_HPLC_MEM_CLK_EN_Msk (0x80000UL)               /*!< CPM MISCCLKCR: HPLC_MEM_CLK_EN (Bitfield-Mask: 0x01)  */
#define CPM_MISCCLKCR_QSPI_FCK_EN_Pos     (20UL)                    /*!< CPM MISCCLKCR: QSPI_FCK_EN (Bit 20)                   */
#define CPM_MISCCLKCR_QSPI_FCK_EN_Msk     (0x100000UL)              /*!< CPM MISCCLKCR: QSPI_FCK_EN (Bitfield-Mask: 0x01)      */
#define CPM_MISCCLKCR_SPIBUS_CLK_EN_Pos   (21UL)                    /*!< CPM MISCCLKCR: SPIBUS_CLK_EN (Bit 21)                 */
#define CPM_MISCCLKCR_SPIBUS_CLK_EN_Msk   (0x200000UL)              /*!< CPM MISCCLKCR: SPIBUS_CLK_EN (Bitfield-Mask: 0x01)    */
#define CPM_MISCCLKCR_PSRAM_CLK_EN_Pos    (22UL)                    /*!< CPM MISCCLKCR: PSRAM_CLK_EN (Bit 22)                  */
#define CPM_MISCCLKCR_PSRAM_CLK_EN_Msk    (0x400000UL)              /*!< CPM MISCCLKCR: PSRAM_CLK_EN (Bitfield-Mask: 0x01)     */
#define CPM_MISCCLKCR_TEST_Pos            (30UL)                    /*!< CPM MISCCLKCR: TEST (Bit 30)                          */
#define CPM_MISCCLKCR_TEST_Msk            (0xc0000000UL)            /*!< CPM MISCCLKCR: TEST (Bitfield-Mask: 0x03)             */
/* =====================================================  MISCCLKCRSTOP  ===================================================== */
#define CPM_MISCCLKCRSTOP_TS_CLK_EN_Pos   (0UL)                     /*!< CPM MISCCLKCRSTOP: TS_CLK_EN (Bit 0)                  */
#define CPM_MISCCLKCRSTOP_TS_CLK_EN_Msk   (0x1UL)                   /*!< CPM MISCCLKCRSTOP: TS_CLK_EN (Bitfield-Mask: 0x01)    */
#define CPM_MISCCLKCRSTOP_ARITH_CLK_EN_Pos (1UL)                    /*!< CPM MISCCLKCRSTOP: ARITH_CLK_EN (Bit 1)               */
#define CPM_MISCCLKCRSTOP_ARITH_CLK_EN_Msk (0x2UL)                  /*!< CPM MISCCLKCRSTOP: ARITH_CLK_EN (Bitfield-Mask: 0x01) */
#define CPM_MISCCLKCRSTOP_HRF_BBP_CLK_EN_Pos (2UL)                  /*!< CPM MISCCLKCRSTOP: HRF_BBP_CLK_EN (Bit 2)             */
#define CPM_MISCCLKCRSTOP_HRF_BBP_CLK_EN_Msk (0x4UL)                /*!< CPM MISCCLKCRSTOP: HRF_BBP_CLK_EN (Bitfield-Mask: 0x01) */
#define CPM_MISCCLKCRSTOP_HRF_MEM_CLK_EN_Pos (3UL)                  /*!< CPM MISCCLKCRSTOP: HRF_MEM_CLK_EN (Bit 3)             */
#define CPM_MISCCLKCRSTOP_HRF_MEM_CLK_EN_Msk (0x8UL)                /*!< CPM MISCCLKCRSTOP: HRF_MEM_CLK_EN (Bitfield-Mask: 0x01) */
#define CPM_MISCCLKCRSTOP_HPLC_BBP_CLK_EN_Pos (4UL)                 /*!< CPM MISCCLKCRSTOP: HPLC_BBP_CLK_EN (Bit 4)            */
#define CPM_MISCCLKCRSTOP_HPLC_BBP_CLK_EN_Msk (0x10UL)              /*!< CPM MISCCLKCRSTOP: HPLC_BBP_CLK_EN (Bitfield-Mask: 0x01) */
#define CPM_MISCCLKCRSTOP_HPLC_MEM_CLK_EN_Pos (5UL)                 /*!< CPM MISCCLKCRSTOP: HPLC_MEM_CLK_EN (Bit 5)            */
#define CPM_MISCCLKCRSTOP_HPLC_MEM_CLK_EN_Msk (0x20UL)              /*!< CPM MISCCLKCRSTOP: HPLC_MEM_CLK_EN (Bitfield-Mask: 0x01) */
#define CPM_MISCCLKCRSTOP_QSPI_FCK_EN_Pos (6UL)                     /*!< CPM MISCCLKCRSTOP: QSPI_FCK_EN (Bit 6)                */
#define CPM_MISCCLKCRSTOP_QSPI_FCK_EN_Msk (0x40UL)                  /*!< CPM MISCCLKCRSTOP: QSPI_FCK_EN (Bitfield-Mask: 0x01)  */
#define CPM_MISCCLKCRSTOP_SPIBUS_CLK_EN_Pos (7UL)                   /*!< CPM MISCCLKCRSTOP: SPIBUS_CLK_EN (Bit 7)              */
#define CPM_MISCCLKCRSTOP_SPIBUS_CLK_EN_Msk (0x80UL)                /*!< CPM MISCCLKCRSTOP: SPIBUS_CLK_EN (Bitfield-Mask: 0x01) */
#define CPM_MISCCLKCRSTOP_PSRAM_CLK_EN_Pos (8UL)                    /*!< CPM MISCCLKCRSTOP: PSRAM_CLK_EN (Bit 8)               */
#define CPM_MISCCLKCRSTOP_PSRAM_CLK_EN_Msk (0x100UL)                /*!< CPM MISCCLKCRSTOP: PSRAM_CLK_EN (Bitfield-Mask: 0x01) */
#define CPM_MISCCLKCRSTOP_TEST_Pos        (30UL)                    /*!< CPM MISCCLKCRSTOP: TEST (Bit 30)                      */
#define CPM_MISCCLKCRSTOP_TEST_Msk        (0xc0000000UL)            /*!< CPM MISCCLKCRSTOP: TEST (Bitfield-Mask: 0x03)         */
/* =======================================================  BATVDCFGR  ======================================================= */
#define CPM_BATVDCFGR_BatVolDetLValue_Rst_Pos (0UL)                 /*!< CPM BATVDCFGR: BatVolDetLValue_Rst (Bit 0)            */
#define CPM_BATVDCFGR_BatVolDetLValue_Rst_Msk (0xfUL)               /*!< CPM BATVDCFGR: BatVolDetLValue_Rst (Bitfield-Mask: 0x0f) */
#define CPM_BATVDCFGR_BatVolDetHValue_Rst_Pos (4UL)                 /*!< CPM BATVDCFGR: BatVolDetHValue_Rst (Bit 4)            */
#define CPM_BATVDCFGR_BatVolDetHValue_Rst_Msk (0xf0UL)              /*!< CPM BATVDCFGR: BatVolDetHValue_Rst (Bitfield-Mask: 0x0f) */
#define CPM_BATVDCFGR_BatVolDetLValue_Int_Pos (8UL)                 /*!< CPM BATVDCFGR: BatVolDetLValue_Int (Bit 8)            */
#define CPM_BATVDCFGR_BatVolDetLValue_Int_Msk (0xf00UL)             /*!< CPM BATVDCFGR: BatVolDetLValue_Int (Bitfield-Mask: 0x0f) */
#define CPM_BATVDCFGR_BatVolDetHValue_Int_Pos (12UL)                /*!< CPM BATVDCFGR: BatVolDetHValue_Int (Bit 12)           */
#define CPM_BATVDCFGR_BatVolDetHValue_Int_Msk (0xf000UL)            /*!< CPM BATVDCFGR: BatVolDetHValue_Int (Bitfield-Mask: 0x0f) */
#define CPM_BATVDCFGR_BatVolDetRstEn_Pos  (24UL)                    /*!< CPM BATVDCFGR: BatVolDetRstEn (Bit 24)                */
#define CPM_BATVDCFGR_BatVolDetRstEn_Msk  (0x1000000UL)             /*!< CPM BATVDCFGR: BatVolDetRstEn (Bitfield-Mask: 0x01)   */
#define CPM_BATVDCFGR_BatVolDetRstFlag_Pos (25UL)                   /*!< CPM BATVDCFGR: BatVolDetRstFlag (Bit 25)              */
#define CPM_BATVDCFGR_BatVolDetRstFlag_Msk (0x2000000UL)            /*!< CPM BATVDCFGR: BatVolDetRstFlag (Bitfield-Mask: 0x01) */
#define CPM_BATVDCFGR_BatVolDetLIE_Pos    (26UL)                    /*!< CPM BATVDCFGR: BatVolDetLIE (Bit 26)                  */
#define CPM_BATVDCFGR_BatVolDetLIE_Msk    (0x4000000UL)             /*!< CPM BATVDCFGR: BatVolDetLIE (Bitfield-Mask: 0x01)     */
#define CPM_BATVDCFGR_BatVolDetHIE_Pos    (27UL)                    /*!< CPM BATVDCFGR: BatVolDetHIE (Bit 27)                  */
#define CPM_BATVDCFGR_BatVolDetHIE_Msk    (0x8000000UL)             /*!< CPM BATVDCFGR: BatVolDetHIE (Bitfield-Mask: 0x01)     */
#define CPM_BATVDCFGR_BatVolDetLFlag_Pos  (28UL)                    /*!< CPM BATVDCFGR: BatVolDetLFlag (Bit 28)                */
#define CPM_BATVDCFGR_BatVolDetLFlag_Msk  (0x10000000UL)            /*!< CPM BATVDCFGR: BatVolDetLFlag (Bitfield-Mask: 0x01)   */
#define CPM_BATVDCFGR_BatVolDetHFlag_Pos  (29UL)                    /*!< CPM BATVDCFGR: BatVolDetHFlag (Bit 29)                */
#define CPM_BATVDCFGR_BatVolDetHFlag_Msk  (0x20000000UL)            /*!< CPM BATVDCFGR: BatVolDetHFlag (Bitfield-Mask: 0x01)   */
#define CPM_BATVDCFGR_TEST_Pos            (30UL)                    /*!< CPM BATVDCFGR: TEST (Bit 30)                          */
#define CPM_BATVDCFGR_TEST_Msk            (0xc0000000UL)            /*!< CPM BATVDCFGR: TEST (Bitfield-Mask: 0x03)             */
/* =======================================================  PINVDCFGR  ======================================================= */
#define CPM_PINVDCFGR_PinVolDetLValue_Pos (0UL)                     /*!< CPM PINVDCFGR: PinVolDetLValue (Bit 0)                */
#define CPM_PINVDCFGR_PinVolDetLValue_Msk (0xfUL)                   /*!< CPM PINVDCFGR: PinVolDetLValue (Bitfield-Mask: 0x0f)  */
#define CPM_PINVDCFGR_PinVolDetHValue_Pos (4UL)                     /*!< CPM PINVDCFGR: PinVolDetHValue (Bit 4)                */
#define CPM_PINVDCFGR_PinVolDetHValue_Msk (0xf0UL)                  /*!< CPM PINVDCFGR: PinVolDetHValue (Bitfield-Mask: 0x0f)  */
#define CPM_PINVDCFGR_PinVolDetLIE_Pos    (24UL)                    /*!< CPM PINVDCFGR: PinVolDetLIE (Bit 24)                  */
#define CPM_PINVDCFGR_PinVolDetLIE_Msk    (0x1000000UL)             /*!< CPM PINVDCFGR: PinVolDetLIE (Bitfield-Mask: 0x01)     */
#define CPM_PINVDCFGR_PinVolDetHIE_Pos    (25UL)                    /*!< CPM PINVDCFGR: PinVolDetHIE (Bit 25)                  */
#define CPM_PINVDCFGR_PinVolDetHIE_Msk    (0x2000000UL)             /*!< CPM PINVDCFGR: PinVolDetHIE (Bitfield-Mask: 0x01)     */
#define CPM_PINVDCFGR_PinVolDetLFlag_Pos  (26UL)                    /*!< CPM PINVDCFGR: PinVolDetLFlag (Bit 26)                */
#define CPM_PINVDCFGR_PinVolDetLFlag_Msk  (0x4000000UL)             /*!< CPM PINVDCFGR: PinVolDetLFlag (Bitfield-Mask: 0x01)   */
#define CPM_PINVDCFGR_PinVolDetHFlag_Pos  (27UL)                    /*!< CPM PINVDCFGR: PinVolDetHFlag (Bit 27)                */
#define CPM_PINVDCFGR_PinVolDetHFlag_Msk  (0x8000000UL)             /*!< CPM PINVDCFGR: PinVolDetHFlag (Bitfield-Mask: 0x01)   */
#define CPM_PINVDCFGR_TEST_Pos            (30UL)                    /*!< CPM PINVDCFGR: TEST (Bit 30)                          */
#define CPM_PINVDCFGR_TEST_Msk            (0xc0000000UL)            /*!< CPM PINVDCFGR: TEST (Bitfield-Mask: 0x03)             */


/* =========================================================================================================================== */
/* ================                                            PWM                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  PPR  ========================================================== */
#define PWM_PPR_CP0_Pos                   (0UL)                     /*!< PWM PPR: CP0 (Bit 0)                                  */
#define PWM_PPR_CP0_Msk                   (0xffUL)                  /*!< PWM PPR: CP0 (Bitfield-Mask: 0xff)                    */
#define PWM_PPR_CP1_Pos                   (8UL)                     /*!< PWM PPR: CP1 (Bit 8)                                  */
#define PWM_PPR_CP1_Msk                   (0xff00UL)                /*!< PWM PPR: CP1 (Bitfield-Mask: 0xff)                    */
#define PWM_PPR_DZI0_Pos                  (16UL)                    /*!< PWM PPR: DZI0 (Bit 16)                                */
#define PWM_PPR_DZI0_Msk                  (0xff0000UL)              /*!< PWM PPR: DZI0 (Bitfield-Mask: 0xff)                   */
#define PWM_PPR_DZI1_Pos                  (24UL)                    /*!< PWM PPR: DZI1 (Bit 24)                                */
#define PWM_PPR_DZI1_Msk                  (0xff000000UL)            /*!< PWM PPR: DZI1 (Bitfield-Mask: 0xff)                   */
/* =========================================================  PCSR  ========================================================== */
#define PWM_PCSR_CSR0_Pos                 (0UL)                     /*!< PWM PCSR: CSR0 (Bit 0)                                */
#define PWM_PCSR_CSR0_Msk                 (0x7UL)                   /*!< PWM PCSR: CSR0 (Bitfield-Mask: 0x07)                  */
#define PWM_PCSR_CSR1_Pos                 (4UL)                     /*!< PWM PCSR: CSR1 (Bit 4)                                */
#define PWM_PCSR_CSR1_Msk                 (0x70UL)                  /*!< PWM PCSR: CSR1 (Bitfield-Mask: 0x07)                  */
#define PWM_PCSR_CSR2_Pos                 (8UL)                     /*!< PWM PCSR: CSR2 (Bit 8)                                */
#define PWM_PCSR_CSR2_Msk                 (0x700UL)                 /*!< PWM PCSR: CSR2 (Bitfield-Mask: 0x07)                  */
#define PWM_PCSR_CSR3_Pos                 (12UL)                    /*!< PWM PCSR: CSR3 (Bit 12)                               */
#define PWM_PCSR_CSR3_Msk                 (0x7000UL)                /*!< PWM PCSR: CSR3 (Bitfield-Mask: 0x07)                  */
/* ==========================================================  PCR  ========================================================== */
#define PWM_PCR_CH0EN_Pos                 (0UL)                     /*!< PWM PCR: CH0EN (Bit 0)                                */
#define PWM_PCR_CH0EN_Msk                 (0x1UL)                   /*!< PWM PCR: CH0EN (Bitfield-Mask: 0x01)                  */
#define PWM_PCR_CH0INV_Pos                (2UL)                     /*!< PWM PCR: CH0INV (Bit 2)                               */
#define PWM_PCR_CH0INV_Msk                (0x4UL)                   /*!< PWM PCR: CH0INV (Bitfield-Mask: 0x01)                 */
#define PWM_PCR_CH0MOD_Pos                (3UL)                     /*!< PWM PCR: CH0MOD (Bit 3)                               */
#define PWM_PCR_CH0MOD_Msk                (0x8UL)                   /*!< PWM PCR: CH0MOD (Bitfield-Mask: 0x01)                 */
#define PWM_PCR_DZEN0_Pos                 (4UL)                     /*!< PWM PCR: DZEN0 (Bit 4)                                */
#define PWM_PCR_DZEN0_Msk                 (0x10UL)                  /*!< PWM PCR: DZEN0 (Bitfield-Mask: 0x01)                  */
#define PWM_PCR_DZEN1_Pos                 (5UL)                     /*!< PWM PCR: DZEN1 (Bit 5)                                */
#define PWM_PCR_DZEN1_Msk                 (0x20UL)                  /*!< PWM PCR: DZEN1 (Bitfield-Mask: 0x01)                  */
#define PWM_PCR_CH0_HDU_Pos               (7UL)                     /*!< PWM PCR: CH0_HDU (Bit 7)                              */
#define PWM_PCR_CH0_HDU_Msk               (0x80UL)                  /*!< PWM PCR: CH0_HDU (Bitfield-Mask: 0x01)                */
#define PWM_PCR_CH1EN_Pos                 (8UL)                     /*!< PWM PCR: CH1EN (Bit 8)                                */
#define PWM_PCR_CH1EN_Msk                 (0x100UL)                 /*!< PWM PCR: CH1EN (Bitfield-Mask: 0x01)                  */
#define PWM_PCR_CH1INV_Pos                (10UL)                    /*!< PWM PCR: CH1INV (Bit 10)                              */
#define PWM_PCR_CH1INV_Msk                (0x400UL)                 /*!< PWM PCR: CH1INV (Bitfield-Mask: 0x01)                 */
#define PWM_PCR_CH1MOD_Pos                (11UL)                    /*!< PWM PCR: CH1MOD (Bit 11)                              */
#define PWM_PCR_CH1MOD_Msk                (0x800UL)                 /*!< PWM PCR: CH1MOD (Bitfield-Mask: 0x01)                 */
#define PWM_PCR_CH1_HDU_Pos               (15UL)                    /*!< PWM PCR: CH1_HDU (Bit 15)                             */
#define PWM_PCR_CH1_HDU_Msk               (0x8000UL)                /*!< PWM PCR: CH1_HDU (Bitfield-Mask: 0x01)                */
#define PWM_PCR_CH2EN_Pos                 (16UL)                    /*!< PWM PCR: CH2EN (Bit 16)                               */
#define PWM_PCR_CH2EN_Msk                 (0x10000UL)               /*!< PWM PCR: CH2EN (Bitfield-Mask: 0x01)                  */
#define PWM_PCR_CH2INV_Pos                (18UL)                    /*!< PWM PCR: CH2INV (Bit 18)                              */
#define PWM_PCR_CH2INV_Msk                (0x40000UL)               /*!< PWM PCR: CH2INV (Bitfield-Mask: 0x01)                 */
#define PWM_PCR_CH2MOD_Pos                (19UL)                    /*!< PWM PCR: CH2MOD (Bit 19)                              */
#define PWM_PCR_CH2MOD_Msk                (0x80000UL)               /*!< PWM PCR: CH2MOD (Bitfield-Mask: 0x01)                 */
#define PWM_PCR_CH2_HDU_Pos               (23UL)                    /*!< PWM PCR: CH2_HDU (Bit 23)                             */
#define PWM_PCR_CH2_HDU_Msk               (0x800000UL)              /*!< PWM PCR: CH2_HDU (Bitfield-Mask: 0x01)                */
#define PWM_PCR_CH3EN_Pos                 (24UL)                    /*!< PWM PCR: CH3EN (Bit 24)                               */
#define PWM_PCR_CH3EN_Msk                 (0x1000000UL)             /*!< PWM PCR: CH3EN (Bitfield-Mask: 0x01)                  */
#define PWM_PCR_CH3INV_Pos                (26UL)                    /*!< PWM PCR: CH3INV (Bit 26)                              */
#define PWM_PCR_CH3INV_Msk                (0x4000000UL)             /*!< PWM PCR: CH3INV (Bitfield-Mask: 0x01)                 */
#define PWM_PCR_CH3MOD_Pos                (27UL)                    /*!< PWM PCR: CH3MOD (Bit 27)                              */
#define PWM_PCR_CH3MOD_Msk                (0x8000000UL)             /*!< PWM PCR: CH3MOD (Bitfield-Mask: 0x01)                 */
#define PWM_PCR_CH3_HDU_Pos               (31UL)                    /*!< PWM PCR: CH3_HDU (Bit 31)                             */
#define PWM_PCR_CH3_HDU_Msk               (0x80000000UL)            /*!< PWM PCR: CH3_HDU (Bitfield-Mask: 0x01)                */
/* =========================================================  PCNR0  ========================================================= */
#define PWM_PCNR0_CNR_Pos                 (0UL)                     /*!< PWM PCNR0: CNR (Bit 0)                                */
#define PWM_PCNR0_CNR_Msk                 (0xffffUL)                /*!< PWM PCNR0: CNR (Bitfield-Mask: 0xffff)                */
/* =========================================================  PCMR0  ========================================================= */
#define PWM_PCMR0_CMR_Pos                 (0UL)                     /*!< PWM PCMR0: CMR (Bit 0)                                */
#define PWM_PCMR0_CMR_Msk                 (0xffffUL)                /*!< PWM PCMR0: CMR (Bitfield-Mask: 0xffff)                */
/* =========================================================  PTR0  ========================================================== */
#define PWM_PTR0_CTR_Pos                  (0UL)                     /*!< PWM PTR0: CTR (Bit 0)                                 */
#define PWM_PTR0_CTR_Msk                  (0xffffUL)                /*!< PWM PTR0: CTR (Bitfield-Mask: 0xffff)                 */
/* =========================================================  PCNR1  ========================================================= */
#define PWM_PCNR1_CNR_Pos                 (0UL)                     /*!< PWM PCNR1: CNR (Bit 0)                                */
#define PWM_PCNR1_CNR_Msk                 (0xffffUL)                /*!< PWM PCNR1: CNR (Bitfield-Mask: 0xffff)                */
/* =========================================================  PCMR1  ========================================================= */
#define PWM_PCMR1_CMR_Pos                 (0UL)                     /*!< PWM PCMR1: CMR (Bit 0)                                */
#define PWM_PCMR1_CMR_Msk                 (0xffffUL)                /*!< PWM PCMR1: CMR (Bitfield-Mask: 0xffff)                */
/* =========================================================  PTR1  ========================================================== */
#define PWM_PTR1_CTR_Pos                  (0UL)                     /*!< PWM PTR1: CTR (Bit 0)                                 */
#define PWM_PTR1_CTR_Msk                  (0xffffUL)                /*!< PWM PTR1: CTR (Bitfield-Mask: 0xffff)                 */
/* =========================================================  PCNR2  ========================================================= */
#define PWM_PCNR2_CNR_Pos                 (0UL)                     /*!< PWM PCNR2: CNR (Bit 0)                                */
#define PWM_PCNR2_CNR_Msk                 (0xffffUL)                /*!< PWM PCNR2: CNR (Bitfield-Mask: 0xffff)                */
/* =========================================================  PCMR2  ========================================================= */
#define PWM_PCMR2_CMR_Pos                 (0UL)                     /*!< PWM PCMR2: CMR (Bit 0)                                */
#define PWM_PCMR2_CMR_Msk                 (0xffffUL)                /*!< PWM PCMR2: CMR (Bitfield-Mask: 0xffff)                */
/* =========================================================  PTR2  ========================================================== */
#define PWM_PTR2_CTR_Pos                  (0UL)                     /*!< PWM PTR2: CTR (Bit 0)                                 */
#define PWM_PTR2_CTR_Msk                  (0xffffUL)                /*!< PWM PTR2: CTR (Bitfield-Mask: 0xffff)                 */
/* =========================================================  PCNR3  ========================================================= */
#define PWM_PCNR3_CNR_Pos                 (0UL)                     /*!< PWM PCNR3: CNR (Bit 0)                                */
#define PWM_PCNR3_CNR_Msk                 (0xffffUL)                /*!< PWM PCNR3: CNR (Bitfield-Mask: 0xffff)                */
/* =========================================================  PCMR3  ========================================================= */
#define PWM_PCMR3_CMR_Pos                 (0UL)                     /*!< PWM PCMR3: CMR (Bit 0)                                */
#define PWM_PCMR3_CMR_Msk                 (0xffffUL)                /*!< PWM PCMR3: CMR (Bitfield-Mask: 0xffff)                */
/* =========================================================  PTR3  ========================================================== */
#define PWM_PTR3_CTR_Pos                  (0UL)                     /*!< PWM PTR3: CTR (Bit 0)                                 */
#define PWM_PTR3_CTR_Msk                  (0xffffUL)                /*!< PWM PTR3: CTR (Bitfield-Mask: 0xffff)                 */
/* =========================================================  PIER  ========================================================== */
#define PWM_PIER_PIER_Pos                 (0UL)                     /*!< PWM PIER: PIER (Bit 0)                                */
#define PWM_PIER_PIER_Msk                 (0xfUL)                   /*!< PWM PIER: PIER (Bitfield-Mask: 0x0f)                  */
/* =========================================================  PIFR  ========================================================== */
#define PWM_PIFR_PIFR_Pos                 (0UL)                     /*!< PWM PIFR: PIFR (Bit 0)                                */
#define PWM_PIFR_PIFR_Msk                 (0xfUL)                   /*!< PWM PIFR: PIFR (Bitfield-Mask: 0x0f)                  */
/* =========================================================  PCCR  ========================================================== */
#define PWM_PCCR_INV_Pos                  (0UL)                     /*!< PWM PCCR: INV (Bit 0)                                 */
#define PWM_PCCR_INV_Msk                  (0x1UL)                   /*!< PWM PCCR: INV (Bitfield-Mask: 0x01)                   */
#define PWM_PCCR_RL_IE_Pos                (1UL)                     /*!< PWM PCCR: RL_IE (Bit 1)                               */
#define PWM_PCCR_RL_IE_Msk                (0x2UL)                   /*!< PWM PCCR: RL_IE (Bitfield-Mask: 0x01)                 */
#define PWM_PCCR_FL_IE0_Pos               (2UL)                     /*!< PWM PCCR: FL_IE0 (Bit 2)                              */
#define PWM_PCCR_FL_IE0_Msk               (0x4UL)                   /*!< PWM PCCR: FL_IE0 (Bitfield-Mask: 0x01)                */
#define PWM_PCCR_CAPCHEN_Pos              (3UL)                     /*!< PWM PCCR: CAPCHEN (Bit 3)                             */
#define PWM_PCCR_CAPCHEN_Msk              (0x8UL)                   /*!< PWM PCCR: CAPCHEN (Bitfield-Mask: 0x01)               */
#define PWM_PCCR_CAPIF_Pos                (4UL)                     /*!< PWM PCCR: CAPIF (Bit 4)                               */
#define PWM_PCCR_CAPIF_Msk                (0x10UL)                  /*!< PWM PCCR: CAPIF (Bitfield-Mask: 0x01)                 */
#define PWM_PCCR_CRLRD_Pos                (6UL)                     /*!< PWM PCCR: CRLRD (Bit 6)                               */
#define PWM_PCCR_CRLRD_Msk                (0x40UL)                  /*!< PWM PCCR: CRLRD (Bitfield-Mask: 0x01)                 */
#define PWM_PCCR_CFLRD_Pos                (7UL)                     /*!< PWM PCCR: CFLRD (Bit 7)                               */
#define PWM_PCCR_CFLRD_Msk                (0x80UL)                  /*!< PWM PCCR: CFLRD (Bitfield-Mask: 0x01)                 */
/* ========================================================  PCRLR0  ========================================================= */
#define PWM_PCRLR0_CRLR_Pos               (0UL)                     /*!< PWM PCRLR0: CRLR (Bit 0)                              */
#define PWM_PCRLR0_CRLR_Msk               (0xffffUL)                /*!< PWM PCRLR0: CRLR (Bitfield-Mask: 0xffff)              */
/* ========================================================  PCFLR0  ========================================================= */
#define PWM_PCFLR0_CFLR_Pos               (0UL)                     /*!< PWM PCFLR0: CFLR (Bit 0)                              */
#define PWM_PCFLR0_CFLR_Msk               (0xffffUL)                /*!< PWM PCFLR0: CFLR (Bitfield-Mask: 0xffff)              */
/* ========================================================  PCRLR1  ========================================================= */
#define PWM_PCRLR1_CRLR_Pos               (0UL)                     /*!< PWM PCRLR1: CRLR (Bit 0)                              */
#define PWM_PCRLR1_CRLR_Msk               (0xffffUL)                /*!< PWM PCRLR1: CRLR (Bitfield-Mask: 0xffff)              */
/* ========================================================  PCFLR1  ========================================================= */
#define PWM_PCFLR1_CFLR_Pos               (0UL)                     /*!< PWM PCFLR1: CFLR (Bit 0)                              */
#define PWM_PCFLR1_CFLR_Msk               (0xffffUL)                /*!< PWM PCFLR1: CFLR (Bitfield-Mask: 0xffff)              */
/* ========================================================  PCRLR2  ========================================================= */
#define PWM_PCRLR2_CRLR_Pos               (0UL)                     /*!< PWM PCRLR2: CRLR (Bit 0)                              */
#define PWM_PCRLR2_CRLR_Msk               (0xffffUL)                /*!< PWM PCRLR2: CRLR (Bitfield-Mask: 0xffff)              */
/* ========================================================  PCFLR2  ========================================================= */
#define PWM_PCFLR2_CFLR_Pos               (0UL)                     /*!< PWM PCFLR2: CFLR (Bit 0)                              */
#define PWM_PCFLR2_CFLR_Msk               (0xffffUL)                /*!< PWM PCFLR2: CFLR (Bitfield-Mask: 0xffff)              */
/* ========================================================  PCRLR3  ========================================================= */
#define PWM_PCRLR3_CRLR_Pos               (0UL)                     /*!< PWM PCRLR3: CRLR (Bit 0)                              */
#define PWM_PCRLR3_CRLR_Msk               (0xffffUL)                /*!< PWM PCRLR3: CRLR (Bitfield-Mask: 0xffff)              */
/* ========================================================  PCFLR3  ========================================================= */
#define PWM_PCFLR3_CFLR_Pos               (0UL)                     /*!< PWM PCFLR3: CFLR (Bit 0)                              */
#define PWM_PCFLR3_CFLR_Msk               (0xffffUL)                /*!< PWM PCFLR3: CFLR (Bitfield-Mask: 0xffff)              */
/* =========================================================  PPCR  ========================================================== */
#define PWM_PPCR_PDR_Pos                  (0UL)                     /*!< PWM PPCR: PDR (Bit 0)                                 */
#define PWM_PPCR_PDR_Msk                  (0xfUL)                   /*!< PWM PPCR: PDR (Bitfield-Mask: 0x0f)                   */
#define PWM_PPCR_PULLUP_EN_Pos            (8UL)                     /*!< PWM PPCR: PULLUP_EN (Bit 8)                           */
#define PWM_PPCR_PULLUP_EN_Msk            (0xf00UL)                 /*!< PWM PPCR: PULLUP_EN (Bitfield-Mask: 0x0f)             */
#define PWM_PPCR_PDDR_Pos                 (16UL)                    /*!< PWM PPCR: PDDR (Bit 16)                               */
#define PWM_PPCR_PDDR_Msk                 (0xf0000UL)               /*!< PWM PPCR: PDDR (Bitfield-Mask: 0x0f)                  */


/* =========================================================================================================================== */
/* ================                                           EPORT                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  EPPAR  ========================================================= */
#define EPORT_EPPAR_EPPA0_Pos             (0UL)                     /*!< EPORT EPPAR: EPPA0 (Bit 0)                            */
#define EPORT_EPPAR_EPPA0_Msk             (0x3UL)                   /*!< EPORT EPPAR: EPPA0 (Bitfield-Mask: 0x03)              */
#define EPORT_EPPAR_EPPA1_Pos             (2UL)                     /*!< EPORT EPPAR: EPPA1 (Bit 2)                            */
#define EPORT_EPPAR_EPPA1_Msk             (0xcUL)                   /*!< EPORT EPPAR: EPPA1 (Bitfield-Mask: 0x03)              */
#define EPORT_EPPAR_EPPA2_Pos             (4UL)                     /*!< EPORT EPPAR: EPPA2 (Bit 4)                            */
#define EPORT_EPPAR_EPPA2_Msk             (0x30UL)                  /*!< EPORT EPPAR: EPPA2 (Bitfield-Mask: 0x03)              */
#define EPORT_EPPAR_EPPA3_Pos             (6UL)                     /*!< EPORT EPPAR: EPPA3 (Bit 6)                            */
#define EPORT_EPPAR_EPPA3_Msk             (0xc0UL)                  /*!< EPORT EPPAR: EPPA3 (Bitfield-Mask: 0x03)              */
#define EPORT_EPPAR_EPPA4_Pos             (8UL)                     /*!< EPORT EPPAR: EPPA4 (Bit 8)                            */
#define EPORT_EPPAR_EPPA4_Msk             (0x300UL)                 /*!< EPORT EPPAR: EPPA4 (Bitfield-Mask: 0x03)              */
#define EPORT_EPPAR_EPPA5_Pos             (10UL)                    /*!< EPORT EPPAR: EPPA5 (Bit 10)                           */
#define EPORT_EPPAR_EPPA5_Msk             (0xc00UL)                 /*!< EPORT EPPAR: EPPA5 (Bitfield-Mask: 0x03)              */
#define EPORT_EPPAR_EPPA6_Pos             (12UL)                    /*!< EPORT EPPAR: EPPA6 (Bit 12)                           */
#define EPORT_EPPAR_EPPA6_Msk             (0x3000UL)                /*!< EPORT EPPAR: EPPA6 (Bitfield-Mask: 0x03)              */
#define EPORT_EPPAR_EPPA7_Pos             (14UL)                    /*!< EPORT EPPAR: EPPA7 (Bit 14)                           */
#define EPORT_EPPAR_EPPA7_Msk             (0xc000UL)                /*!< EPORT EPPAR: EPPA7 (Bitfield-Mask: 0x03)              */
/* =========================================================  EPDDR  ========================================================= */
/* =========================================================  EPIER  ========================================================= */
/* =========================================================  EPDR  ========================================================== */
/* =========================================================  EPPDR  ========================================================= */
/* =========================================================  EPFR  ========================================================== */
/* =========================================================  EPLPR  ========================================================= */
/* =========================================================  EPBSR  ========================================================= */
/* =========================================================  EPBCR  ========================================================= */
/* =========================================================  EPBTR  ========================================================= */
/* =========================================================  EPLFR  ========================================================= */


/* =========================================================================================================================== */
/* ================                                           PORTS                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  PORT_CR  ======================================================== */
#define PORTS_PORT_CR_SRE_Pos             (0UL)                     /*!< PORTS PORT_CR: SRE (Bit 0)                            */
#define PORTS_PORT_CR_SRE_Msk             (0x1UL)                   /*!< PORTS PORT_CR: SRE (Bitfield-Mask: 0x01)              */
#define PORTS_PORT_CR_DSE_Pos             (1UL)                     /*!< PORTS PORT_CR: DSE (Bit 1)                            */
#define PORTS_PORT_CR_DSE_Msk             (0x2UL)                   /*!< PORTS PORT_CR: DSE (Bitfield-Mask: 0x01)              */
#define PORTS_PORT_CR_PS_Pos              (2UL)                     /*!< PORTS PORT_CR: PS (Bit 2)                             */
#define PORTS_PORT_CR_PS_Msk              (0x4UL)                   /*!< PORTS PORT_CR: PS (Bitfield-Mask: 0x01)               */
#define PORTS_PORT_CR_PE_Pos              (3UL)                     /*!< PORTS PORT_CR: PE (Bit 3)                             */
#define PORTS_PORT_CR_PE_Msk              (0x8UL)                   /*!< PORTS PORT_CR: PE (Bitfield-Mask: 0x01)               */
#define PORTS_PORT_CR_ODE_Pos             (4UL)                     /*!< PORTS PORT_CR: ODE (Bit 4)                            */
#define PORTS_PORT_CR_ODE_Msk             (0x10UL)                  /*!< PORTS PORT_CR: ODE (Bitfield-Mask: 0x01)              */
#define PORTS_PORT_CR_MUX_Pos             (5UL)                     /*!< PORTS PORT_CR: MUX (Bit 5)                            */
#define PORTS_PORT_CR_MUX_Msk             (0x60UL)                  /*!< PORTS PORT_CR: MUX (Bitfield-Mask: 0x03)              */


/* =========================================================================================================================== */
/* ================                                           DMAC                                            ================ */
/* =========================================================================================================================== */

/* =======================================================  IntStatus  ======================================================= */
#define DMAC_IntStatus_Intstatus_Pos      (0UL)                     /*!< DMAC IntStatus: Intstatus (Bit 0)                     */
#define DMAC_IntStatus_Intstatus_Msk      (0xffUL)                  /*!< DMAC IntStatus: Intstatus (Bitfield-Mask: 0xff)       */
/* ======================================================  IntTCStatus  ====================================================== */
#define DMAC_IntTCStatus_IntTCStatus_Pos  (0UL)                     /*!< DMAC IntTCStatus: IntTCStatus (Bit 0)                 */
#define DMAC_IntTCStatus_IntTCStatus_Msk  (0xffUL)                  /*!< DMAC IntTCStatus: IntTCStatus (Bitfield-Mask: 0xff)   */
/* ======================================================  IntTCClear  ======================================================= */
#define DMAC_IntTCClear_IntTCClear_Pos    (0UL)                     /*!< DMAC IntTCClear: IntTCClear (Bit 0)                   */
#define DMAC_IntTCClear_IntTCClear_Msk    (0xffUL)                  /*!< DMAC IntTCClear: IntTCClear (Bitfield-Mask: 0xff)     */
/* ====================================================  IntErrorStatus  ===================================================== */
#define DMAC_IntErrorStatus_IntErrorStatus_Pos (0UL)                /*!< DMAC IntErrorStatus: IntErrorStatus (Bit 0)           */
#define DMAC_IntErrorStatus_IntErrorStatus_Msk (0xffUL)             /*!< DMAC IntErrorStatus: IntErrorStatus (Bitfield-Mask: 0xff) */
/* =======================================================  IntErrClr  ======================================================= */
#define DMAC_IntErrClr_IntErrClr_Pos      (0UL)                     /*!< DMAC IntErrClr: IntErrClr (Bit 0)                     */
#define DMAC_IntErrClr_IntErrClr_Msk      (0xffUL)                  /*!< DMAC IntErrClr: IntErrClr (Bitfield-Mask: 0xff)       */
/* ====================================================  RawIntTCStatus  ===================================================== */
#define DMAC_RawIntTCStatus_RawIntTCStatus_Pos (0UL)                /*!< DMAC RawIntTCStatus: RawIntTCStatus (Bit 0)           */
#define DMAC_RawIntTCStatus_RawIntTCStatus_Msk (0xffUL)             /*!< DMAC RawIntTCStatus: RawIntTCStatus (Bitfield-Mask: 0xff) */
/* ===================================================  RawIntErrorStatus  =================================================== */
#define DMAC_RawIntErrorStatus_RawIntErrorStatus_Pos (0UL)          /*!< DMAC RawIntErrorStatus: RawIntErrorStatus (Bit 0)     */
#define DMAC_RawIntErrorStatus_RawIntErrorStatus_Msk (0xffUL)       /*!< DMAC RawIntErrorStatus: RawIntErrorStatus (Bitfield-Mask: 0xff) */
/* =======================================================  EnbldChns  ======================================================= */
#define DMAC_EnbldChns_EnabledChannels_Pos (0UL)                    /*!< DMAC EnbldChns: EnabledChannels (Bit 0)               */
#define DMAC_EnbldChns_EnabledChannels_Msk (0xffUL)                 /*!< DMAC EnbldChns: EnabledChannels (Bitfield-Mask: 0xff) */
/* =======================================================  SoftBReq  ======================================================== */
#define DMAC_SoftBReq_SoftBReq_Pos        (0UL)                     /*!< DMAC SoftBReq: SoftBReq (Bit 0)                       */
#define DMAC_SoftBReq_SoftBReq_Msk        (0xffffUL)                /*!< DMAC SoftBReq: SoftBReq (Bitfield-Mask: 0xffff)       */
/* =======================================================  SoftSReq  ======================================================== */
#define DMAC_SoftSReq_SoftSReq_Pos        (0UL)                     /*!< DMAC SoftSReq: SoftSReq (Bit 0)                       */
#define DMAC_SoftSReq_SoftSReq_Msk        (0xffffUL)                /*!< DMAC SoftSReq: SoftSReq (Bitfield-Mask: 0xffff)       */
/* =======================================================  SoftLBReq  ======================================================= */
#define DMAC_SoftLBReq_SoftLBReq_Pos      (0UL)                     /*!< DMAC SoftLBReq: SoftLBReq (Bit 0)                     */
#define DMAC_SoftLBReq_SoftLBReq_Msk      (0xffffUL)                /*!< DMAC SoftLBReq: SoftLBReq (Bitfield-Mask: 0xffff)     */
/* =======================================================  SoftLSReq  ======================================================= */
#define DMAC_SoftLSReq_SoftLSReq_Pos      (0UL)                     /*!< DMAC SoftLSReq: SoftLSReq (Bit 0)                     */
#define DMAC_SoftLSReq_SoftLSReq_Msk      (0xffffUL)                /*!< DMAC SoftLSReq: SoftLSReq (Bitfield-Mask: 0xffff)     */
/* =====================================================  Configuration  ===================================================== */
#define DMAC_Configuration_E_Pos          (0UL)                     /*!< DMAC Configuration: E (Bit 0)                         */
#define DMAC_Configuration_E_Msk          (0x1UL)                   /*!< DMAC Configuration: E (Bitfield-Mask: 0x01)           */
#define DMAC_Configuration_M1_Pos         (1UL)                     /*!< DMAC Configuration: M1 (Bit 1)                        */
#define DMAC_Configuration_M1_Msk         (0x2UL)                   /*!< DMAC Configuration: M1 (Bitfield-Mask: 0x01)          */
#define DMAC_Configuration_M2_Pos         (2UL)                     /*!< DMAC Configuration: M2 (Bit 2)                        */
#define DMAC_Configuration_M2_Msk         (0x4UL)                   /*!< DMAC Configuration: M2 (Bitfield-Mask: 0x01)          */
/* =========================================================  Sync  ========================================================== */
#define DMAC_Sync_Sync_Pos                (0UL)                     /*!< DMAC Sync: Sync (Bit 0)                               */
#define DMAC_Sync_Sync_Msk                (0xffffUL)                /*!< DMAC Sync: Sync (Bitfield-Mask: 0xffff)               */
/* =======================================================  C0SrcAddr  ======================================================= */
#define DMAC_C0SrcAddr_SrcAddr_Pos        (0UL)                     /*!< DMAC C0SrcAddr: SrcAddr (Bit 0)                       */
#define DMAC_C0SrcAddr_SrcAddr_Msk        (0xffffffffUL)            /*!< DMAC C0SrcAddr: SrcAddr (Bitfield-Mask: 0xffffffff)   */
/* ======================================================  C0DestAddr  ======================================================= */
#define DMAC_C0DestAddr_DestAddr_Pos      (0UL)                     /*!< DMAC C0DestAddr: DestAddr (Bit 0)                     */
#define DMAC_C0DestAddr_DestAddr_Msk      (0xffffffffUL)            /*!< DMAC C0DestAddr: DestAddr (Bitfield-Mask: 0xffffffff) */
/* =========================================================  C0LLI  ========================================================= */
#define DMAC_C0LLI_LM_Pos                 (0UL)                     /*!< DMAC C0LLI: LM (Bit 0)                                */
#define DMAC_C0LLI_LM_Msk                 (0x1UL)                   /*!< DMAC C0LLI: LM (Bitfield-Mask: 0x01)                  */
#define DMAC_C0LLI_R_Pos                  (1UL)                     /*!< DMAC C0LLI: R (Bit 1)                                 */
#define DMAC_C0LLI_R_Msk                  (0x2UL)                   /*!< DMAC C0LLI: R (Bitfield-Mask: 0x01)                   */
#define DMAC_C0LLI_LLI_Pos                (2UL)                     /*!< DMAC C0LLI: LLI (Bit 2)                               */
#define DMAC_C0LLI_LLI_Msk                (0xfffffffcUL)            /*!< DMAC C0LLI: LLI (Bitfield-Mask: 0x3fffffff)           */
/* =======================================================  C0Control  ======================================================= */
#define DMAC_C0Control_TransferSize_Pos   (0UL)                     /*!< DMAC C0Control: TransferSize (Bit 0)                  */
#define DMAC_C0Control_TransferSize_Msk   (0xfffUL)                 /*!< DMAC C0Control: TransferSize (Bitfield-Mask: 0xfff)   */
#define DMAC_C0Control_SBSize_Pos         (12UL)                    /*!< DMAC C0Control: SBSize (Bit 12)                       */
#define DMAC_C0Control_SBSize_Msk         (0x7000UL)                /*!< DMAC C0Control: SBSize (Bitfield-Mask: 0x07)          */
#define DMAC_C0Control_DBSize_Pos         (15UL)                    /*!< DMAC C0Control: DBSize (Bit 15)                       */
#define DMAC_C0Control_DBSize_Msk         (0x38000UL)               /*!< DMAC C0Control: DBSize (Bitfield-Mask: 0x07)          */
#define DMAC_C0Control_SWidth_Pos         (18UL)                    /*!< DMAC C0Control: SWidth (Bit 18)                       */
#define DMAC_C0Control_SWidth_Msk         (0x1c0000UL)              /*!< DMAC C0Control: SWidth (Bitfield-Mask: 0x07)          */
#define DMAC_C0Control_DWidth_Pos         (21UL)                    /*!< DMAC C0Control: DWidth (Bit 21)                       */
#define DMAC_C0Control_DWidth_Msk         (0xe00000UL)              /*!< DMAC C0Control: DWidth (Bitfield-Mask: 0x07)          */
#define DMAC_C0Control_S_Pos              (24UL)                    /*!< DMAC C0Control: S (Bit 24)                            */
#define DMAC_C0Control_S_Msk              (0x1000000UL)             /*!< DMAC C0Control: S (Bitfield-Mask: 0x01)               */
#define DMAC_C0Control_D_Pos              (25UL)                    /*!< DMAC C0Control: D (Bit 25)                            */
#define DMAC_C0Control_D_Msk              (0x2000000UL)             /*!< DMAC C0Control: D (Bitfield-Mask: 0x01)               */
#define DMAC_C0Control_SI_Pos             (26UL)                    /*!< DMAC C0Control: SI (Bit 26)                           */
#define DMAC_C0Control_SI_Msk             (0x4000000UL)             /*!< DMAC C0Control: SI (Bitfield-Mask: 0x01)              */
#define DMAC_C0Control_DI_Pos             (27UL)                    /*!< DMAC C0Control: DI (Bit 27)                           */
#define DMAC_C0Control_DI_Msk             (0x8000000UL)             /*!< DMAC C0Control: DI (Bitfield-Mask: 0x01)              */
#define DMAC_C0Control_Prot_Pos           (28UL)                    /*!< DMAC C0Control: Prot (Bit 28)                         */
#define DMAC_C0Control_Prot_Msk           (0x70000000UL)            /*!< DMAC C0Control: Prot (Bitfield-Mask: 0x07)            */
#define DMAC_C0Control_I_Pos              (31UL)                    /*!< DMAC C0Control: I (Bit 31)                            */
#define DMAC_C0Control_I_Msk              (0x80000000UL)            /*!< DMAC C0Control: I (Bitfield-Mask: 0x01)               */
/* ====================================================  C0Configuration  ==================================================== */
#define DMAC_C0Configuration_E_Pos        (0UL)                     /*!< DMAC C0Configuration: E (Bit 0)                       */
#define DMAC_C0Configuration_E_Msk        (0x1UL)                   /*!< DMAC C0Configuration: E (Bitfield-Mask: 0x01)         */
#define DMAC_C0Configuration_SrcPeripheral_Pos (1UL)                /*!< DMAC C0Configuration: SrcPeripheral (Bit 1)           */
#define DMAC_C0Configuration_SrcPeripheral_Msk (0x1eUL)             /*!< DMAC C0Configuration: SrcPeripheral (Bitfield-Mask: 0x0f) */
#define DMAC_C0Configuration_DestPeripheral_Pos (6UL)               /*!< DMAC C0Configuration: DestPeripheral (Bit 6)          */
#define DMAC_C0Configuration_DestPeripheral_Msk (0x3c0UL)           /*!< DMAC C0Configuration: DestPeripheral (Bitfield-Mask: 0x0f) */
#define DMAC_C0Configuration_FlowCntrl_Pos (11UL)                   /*!< DMAC C0Configuration: FlowCntrl (Bit 11)              */
#define DMAC_C0Configuration_FlowCntrl_Msk (0x3800UL)               /*!< DMAC C0Configuration: FlowCntrl (Bitfield-Mask: 0x07) */
#define DMAC_C0Configuration_IE_Pos       (14UL)                    /*!< DMAC C0Configuration: IE (Bit 14)                     */
#define DMAC_C0Configuration_IE_Msk       (0x4000UL)                /*!< DMAC C0Configuration: IE (Bitfield-Mask: 0x01)        */
#define DMAC_C0Configuration_ITC_Pos      (15UL)                    /*!< DMAC C0Configuration: ITC (Bit 15)                    */
#define DMAC_C0Configuration_ITC_Msk      (0x8000UL)                /*!< DMAC C0Configuration: ITC (Bitfield-Mask: 0x01)       */
#define DMAC_C0Configuration_L_Pos        (16UL)                    /*!< DMAC C0Configuration: L (Bit 16)                      */
#define DMAC_C0Configuration_L_Msk        (0x10000UL)               /*!< DMAC C0Configuration: L (Bitfield-Mask: 0x01)         */
#define DMAC_C0Configuration_A_Pos        (17UL)                    /*!< DMAC C0Configuration: A (Bit 17)                      */
#define DMAC_C0Configuration_A_Msk        (0x20000UL)               /*!< DMAC C0Configuration: A (Bitfield-Mask: 0x01)         */
#define DMAC_C0Configuration_H_Pos        (18UL)                    /*!< DMAC C0Configuration: H (Bit 18)                      */
#define DMAC_C0Configuration_H_Msk        (0x40000UL)               /*!< DMAC C0Configuration: H (Bitfield-Mask: 0x01)         */
/* =======================================================  C1SrcAddr  ======================================================= */
#define DMAC_C1SrcAddr_SrcAddr_Pos        (0UL)                     /*!< DMAC C1SrcAddr: SrcAddr (Bit 0)                       */
#define DMAC_C1SrcAddr_SrcAddr_Msk        (0xffffffffUL)            /*!< DMAC C1SrcAddr: SrcAddr (Bitfield-Mask: 0xffffffff)   */
/* ======================================================  C1DestAddr  ======================================================= */
#define DMAC_C1DestAddr_DestAddr_Pos      (0UL)                     /*!< DMAC C1DestAddr: DestAddr (Bit 0)                     */
#define DMAC_C1DestAddr_DestAddr_Msk      (0xffffffffUL)            /*!< DMAC C1DestAddr: DestAddr (Bitfield-Mask: 0xffffffff) */
/* =========================================================  C1LLI  ========================================================= */
#define DMAC_C1LLI_LM_Pos                 (0UL)                     /*!< DMAC C1LLI: LM (Bit 0)                                */
#define DMAC_C1LLI_LM_Msk                 (0x1UL)                   /*!< DMAC C1LLI: LM (Bitfield-Mask: 0x01)                  */
#define DMAC_C1LLI_R_Pos                  (1UL)                     /*!< DMAC C1LLI: R (Bit 1)                                 */
#define DMAC_C1LLI_R_Msk                  (0x2UL)                   /*!< DMAC C1LLI: R (Bitfield-Mask: 0x01)                   */
#define DMAC_C1LLI_LLI_Pos                (2UL)                     /*!< DMAC C1LLI: LLI (Bit 2)                               */
#define DMAC_C1LLI_LLI_Msk                (0xfffffffcUL)            /*!< DMAC C1LLI: LLI (Bitfield-Mask: 0x3fffffff)           */
/* =======================================================  C1Control  ======================================================= */
#define DMAC_C1Control_TransferSize_Pos   (0UL)                     /*!< DMAC C1Control: TransferSize (Bit 0)                  */
#define DMAC_C1Control_TransferSize_Msk   (0xfffUL)                 /*!< DMAC C1Control: TransferSize (Bitfield-Mask: 0xfff)   */
#define DMAC_C1Control_SBSize_Pos         (12UL)                    /*!< DMAC C1Control: SBSize (Bit 12)                       */
#define DMAC_C1Control_SBSize_Msk         (0x7000UL)                /*!< DMAC C1Control: SBSize (Bitfield-Mask: 0x07)          */
#define DMAC_C1Control_DBSize_Pos         (15UL)                    /*!< DMAC C1Control: DBSize (Bit 15)                       */
#define DMAC_C1Control_DBSize_Msk         (0x38000UL)               /*!< DMAC C1Control: DBSize (Bitfield-Mask: 0x07)          */
#define DMAC_C1Control_SWidth_Pos         (18UL)                    /*!< DMAC C1Control: SWidth (Bit 18)                       */
#define DMAC_C1Control_SWidth_Msk         (0x1c0000UL)              /*!< DMAC C1Control: SWidth (Bitfield-Mask: 0x07)          */
#define DMAC_C1Control_DWidth_Pos         (21UL)                    /*!< DMAC C1Control: DWidth (Bit 21)                       */
#define DMAC_C1Control_DWidth_Msk         (0xe00000UL)              /*!< DMAC C1Control: DWidth (Bitfield-Mask: 0x07)          */
#define DMAC_C1Control_S_Pos              (24UL)                    /*!< DMAC C1Control: S (Bit 24)                            */
#define DMAC_C1Control_S_Msk              (0x1000000UL)             /*!< DMAC C1Control: S (Bitfield-Mask: 0x01)               */
#define DMAC_C1Control_D_Pos              (25UL)                    /*!< DMAC C1Control: D (Bit 25)                            */
#define DMAC_C1Control_D_Msk              (0x2000000UL)             /*!< DMAC C1Control: D (Bitfield-Mask: 0x01)               */
#define DMAC_C1Control_SI_Pos             (26UL)                    /*!< DMAC C1Control: SI (Bit 26)                           */
#define DMAC_C1Control_SI_Msk             (0x4000000UL)             /*!< DMAC C1Control: SI (Bitfield-Mask: 0x01)              */
#define DMAC_C1Control_DI_Pos             (27UL)                    /*!< DMAC C1Control: DI (Bit 27)                           */
#define DMAC_C1Control_DI_Msk             (0x8000000UL)             /*!< DMAC C1Control: DI (Bitfield-Mask: 0x01)              */
#define DMAC_C1Control_Prot_Pos           (28UL)                    /*!< DMAC C1Control: Prot (Bit 28)                         */
#define DMAC_C1Control_Prot_Msk           (0x70000000UL)            /*!< DMAC C1Control: Prot (Bitfield-Mask: 0x07)            */
#define DMAC_C1Control_I_Pos              (31UL)                    /*!< DMAC C1Control: I (Bit 31)                            */
#define DMAC_C1Control_I_Msk              (0x80000000UL)            /*!< DMAC C1Control: I (Bitfield-Mask: 0x01)               */
/* ====================================================  C1Configuration  ==================================================== */
#define DMAC_C1Configuration_E_Pos        (0UL)                     /*!< DMAC C1Configuration: E (Bit 0)                       */
#define DMAC_C1Configuration_E_Msk        (0x1UL)                   /*!< DMAC C1Configuration: E (Bitfield-Mask: 0x01)         */
#define DMAC_C1Configuration_SrcPeripheral_Pos (1UL)                /*!< DMAC C1Configuration: SrcPeripheral (Bit 1)           */
#define DMAC_C1Configuration_SrcPeripheral_Msk (0x1eUL)             /*!< DMAC C1Configuration: SrcPeripheral (Bitfield-Mask: 0x0f) */
#define DMAC_C1Configuration_DestPeripheral_Pos (6UL)               /*!< DMAC C1Configuration: DestPeripheral (Bit 6)          */
#define DMAC_C1Configuration_DestPeripheral_Msk (0x3c0UL)           /*!< DMAC C1Configuration: DestPeripheral (Bitfield-Mask: 0x0f) */
#define DMAC_C1Configuration_FlowCntrl_Pos (11UL)                   /*!< DMAC C1Configuration: FlowCntrl (Bit 11)              */
#define DMAC_C1Configuration_FlowCntrl_Msk (0x3800UL)               /*!< DMAC C1Configuration: FlowCntrl (Bitfield-Mask: 0x07) */
#define DMAC_C1Configuration_IE_Pos       (14UL)                    /*!< DMAC C1Configuration: IE (Bit 14)                     */
#define DMAC_C1Configuration_IE_Msk       (0x4000UL)                /*!< DMAC C1Configuration: IE (Bitfield-Mask: 0x01)        */
#define DMAC_C1Configuration_ITC_Pos      (15UL)                    /*!< DMAC C1Configuration: ITC (Bit 15)                    */
#define DMAC_C1Configuration_ITC_Msk      (0x8000UL)                /*!< DMAC C1Configuration: ITC (Bitfield-Mask: 0x01)       */
#define DMAC_C1Configuration_L_Pos        (16UL)                    /*!< DMAC C1Configuration: L (Bit 16)                      */
#define DMAC_C1Configuration_L_Msk        (0x10000UL)               /*!< DMAC C1Configuration: L (Bitfield-Mask: 0x01)         */
#define DMAC_C1Configuration_A_Pos        (17UL)                    /*!< DMAC C1Configuration: A (Bit 17)                      */
#define DMAC_C1Configuration_A_Msk        (0x20000UL)               /*!< DMAC C1Configuration: A (Bitfield-Mask: 0x01)         */
#define DMAC_C1Configuration_H_Pos        (18UL)                    /*!< DMAC C1Configuration: H (Bit 18)                      */
#define DMAC_C1Configuration_H_Msk        (0x40000UL)               /*!< DMAC C1Configuration: H (Bitfield-Mask: 0x01)         */
/* =======================================================  C2SrcAddr  ======================================================= */
#define DMAC_C2SrcAddr_SrcAddr_Pos        (0UL)                     /*!< DMAC C2SrcAddr: SrcAddr (Bit 0)                       */
#define DMAC_C2SrcAddr_SrcAddr_Msk        (0xffffffffUL)            /*!< DMAC C2SrcAddr: SrcAddr (Bitfield-Mask: 0xffffffff)   */
/* ======================================================  C2DestAddr  ======================================================= */
#define DMAC_C2DestAddr_DestAddr_Pos      (0UL)                     /*!< DMAC C2DestAddr: DestAddr (Bit 0)                     */
#define DMAC_C2DestAddr_DestAddr_Msk      (0xffffffffUL)            /*!< DMAC C2DestAddr: DestAddr (Bitfield-Mask: 0xffffffff) */
/* =========================================================  C2LLI  ========================================================= */
#define DMAC_C2LLI_LM_Pos                 (0UL)                     /*!< DMAC C2LLI: LM (Bit 0)                                */
#define DMAC_C2LLI_LM_Msk                 (0x1UL)                   /*!< DMAC C2LLI: LM (Bitfield-Mask: 0x01)                  */
#define DMAC_C2LLI_R_Pos                  (1UL)                     /*!< DMAC C2LLI: R (Bit 1)                                 */
#define DMAC_C2LLI_R_Msk                  (0x2UL)                   /*!< DMAC C2LLI: R (Bitfield-Mask: 0x01)                   */
#define DMAC_C2LLI_LLI_Pos                (2UL)                     /*!< DMAC C2LLI: LLI (Bit 2)                               */
#define DMAC_C2LLI_LLI_Msk                (0xfffffffcUL)            /*!< DMAC C2LLI: LLI (Bitfield-Mask: 0x3fffffff)           */
/* =======================================================  C2Control  ======================================================= */
#define DMAC_C2Control_TransferSize_Pos   (0UL)                     /*!< DMAC C2Control: TransferSize (Bit 0)                  */
#define DMAC_C2Control_TransferSize_Msk   (0xfffUL)                 /*!< DMAC C2Control: TransferSize (Bitfield-Mask: 0xfff)   */
#define DMAC_C2Control_SBSize_Pos         (12UL)                    /*!< DMAC C2Control: SBSize (Bit 12)                       */
#define DMAC_C2Control_SBSize_Msk         (0x7000UL)                /*!< DMAC C2Control: SBSize (Bitfield-Mask: 0x07)          */
#define DMAC_C2Control_DBSize_Pos         (15UL)                    /*!< DMAC C2Control: DBSize (Bit 15)                       */
#define DMAC_C2Control_DBSize_Msk         (0x38000UL)               /*!< DMAC C2Control: DBSize (Bitfield-Mask: 0x07)          */
#define DMAC_C2Control_SWidth_Pos         (18UL)                    /*!< DMAC C2Control: SWidth (Bit 18)                       */
#define DMAC_C2Control_SWidth_Msk         (0x1c0000UL)              /*!< DMAC C2Control: SWidth (Bitfield-Mask: 0x07)          */
#define DMAC_C2Control_DWidth_Pos         (21UL)                    /*!< DMAC C2Control: DWidth (Bit 21)                       */
#define DMAC_C2Control_DWidth_Msk         (0xe00000UL)              /*!< DMAC C2Control: DWidth (Bitfield-Mask: 0x07)          */
#define DMAC_C2Control_S_Pos              (24UL)                    /*!< DMAC C2Control: S (Bit 24)                            */
#define DMAC_C2Control_S_Msk              (0x1000000UL)             /*!< DMAC C2Control: S (Bitfield-Mask: 0x01)               */
#define DMAC_C2Control_D_Pos              (25UL)                    /*!< DMAC C2Control: D (Bit 25)                            */
#define DMAC_C2Control_D_Msk              (0x2000000UL)             /*!< DMAC C2Control: D (Bitfield-Mask: 0x01)               */
#define DMAC_C2Control_SI_Pos             (26UL)                    /*!< DMAC C2Control: SI (Bit 26)                           */
#define DMAC_C2Control_SI_Msk             (0x4000000UL)             /*!< DMAC C2Control: SI (Bitfield-Mask: 0x01)              */
#define DMAC_C2Control_DI_Pos             (27UL)                    /*!< DMAC C2Control: DI (Bit 27)                           */
#define DMAC_C2Control_DI_Msk             (0x8000000UL)             /*!< DMAC C2Control: DI (Bitfield-Mask: 0x01)              */
#define DMAC_C2Control_Prot_Pos           (28UL)                    /*!< DMAC C2Control: Prot (Bit 28)                         */
#define DMAC_C2Control_Prot_Msk           (0x70000000UL)            /*!< DMAC C2Control: Prot (Bitfield-Mask: 0x07)            */
#define DMAC_C2Control_I_Pos              (31UL)                    /*!< DMAC C2Control: I (Bit 31)                            */
#define DMAC_C2Control_I_Msk              (0x80000000UL)            /*!< DMAC C2Control: I (Bitfield-Mask: 0x01)               */
/* ====================================================  C2Configuration  ==================================================== */
#define DMAC_C2Configuration_E_Pos        (0UL)                     /*!< DMAC C2Configuration: E (Bit 0)                       */
#define DMAC_C2Configuration_E_Msk        (0x1UL)                   /*!< DMAC C2Configuration: E (Bitfield-Mask: 0x01)         */
#define DMAC_C2Configuration_SrcPeripheral_Pos (1UL)                /*!< DMAC C2Configuration: SrcPeripheral (Bit 1)           */
#define DMAC_C2Configuration_SrcPeripheral_Msk (0x1eUL)             /*!< DMAC C2Configuration: SrcPeripheral (Bitfield-Mask: 0x0f) */
#define DMAC_C2Configuration_DestPeripheral_Pos (6UL)               /*!< DMAC C2Configuration: DestPeripheral (Bit 6)          */
#define DMAC_C2Configuration_DestPeripheral_Msk (0x3c0UL)           /*!< DMAC C2Configuration: DestPeripheral (Bitfield-Mask: 0x0f) */
#define DMAC_C2Configuration_FlowCntrl_Pos (11UL)                   /*!< DMAC C2Configuration: FlowCntrl (Bit 11)              */
#define DMAC_C2Configuration_FlowCntrl_Msk (0x3800UL)               /*!< DMAC C2Configuration: FlowCntrl (Bitfield-Mask: 0x07) */
#define DMAC_C2Configuration_IE_Pos       (14UL)                    /*!< DMAC C2Configuration: IE (Bit 14)                     */
#define DMAC_C2Configuration_IE_Msk       (0x4000UL)                /*!< DMAC C2Configuration: IE (Bitfield-Mask: 0x01)        */
#define DMAC_C2Configuration_ITC_Pos      (15UL)                    /*!< DMAC C2Configuration: ITC (Bit 15)                    */
#define DMAC_C2Configuration_ITC_Msk      (0x8000UL)                /*!< DMAC C2Configuration: ITC (Bitfield-Mask: 0x01)       */
#define DMAC_C2Configuration_L_Pos        (16UL)                    /*!< DMAC C2Configuration: L (Bit 16)                      */
#define DMAC_C2Configuration_L_Msk        (0x10000UL)               /*!< DMAC C2Configuration: L (Bitfield-Mask: 0x01)         */
#define DMAC_C2Configuration_A_Pos        (17UL)                    /*!< DMAC C2Configuration: A (Bit 17)                      */
#define DMAC_C2Configuration_A_Msk        (0x20000UL)               /*!< DMAC C2Configuration: A (Bitfield-Mask: 0x01)         */
#define DMAC_C2Configuration_H_Pos        (18UL)                    /*!< DMAC C2Configuration: H (Bit 18)                      */
#define DMAC_C2Configuration_H_Msk        (0x40000UL)               /*!< DMAC C2Configuration: H (Bitfield-Mask: 0x01)         */
/* =======================================================  C3SrcAddr  ======================================================= */
#define DMAC_C3SrcAddr_SrcAddr_Pos        (0UL)                     /*!< DMAC C3SrcAddr: SrcAddr (Bit 0)                       */
#define DMAC_C3SrcAddr_SrcAddr_Msk        (0xffffffffUL)            /*!< DMAC C3SrcAddr: SrcAddr (Bitfield-Mask: 0xffffffff)   */
/* ======================================================  C3DestAddr  ======================================================= */
#define DMAC_C3DestAddr_DestAddr_Pos      (0UL)                     /*!< DMAC C3DestAddr: DestAddr (Bit 0)                     */
#define DMAC_C3DestAddr_DestAddr_Msk      (0xffffffffUL)            /*!< DMAC C3DestAddr: DestAddr (Bitfield-Mask: 0xffffffff) */
/* =========================================================  C3LLI  ========================================================= */
#define DMAC_C3LLI_LM_Pos                 (0UL)                     /*!< DMAC C3LLI: LM (Bit 0)                                */
#define DMAC_C3LLI_LM_Msk                 (0x1UL)                   /*!< DMAC C3LLI: LM (Bitfield-Mask: 0x01)                  */
#define DMAC_C3LLI_R_Pos                  (1UL)                     /*!< DMAC C3LLI: R (Bit 1)                                 */
#define DMAC_C3LLI_R_Msk                  (0x2UL)                   /*!< DMAC C3LLI: R (Bitfield-Mask: 0x01)                   */
#define DMAC_C3LLI_LLI_Pos                (2UL)                     /*!< DMAC C3LLI: LLI (Bit 2)                               */
#define DMAC_C3LLI_LLI_Msk                (0xfffffffcUL)            /*!< DMAC C3LLI: LLI (Bitfield-Mask: 0x3fffffff)           */
/* =======================================================  C3Control  ======================================================= */
#define DMAC_C3Control_TransferSize_Pos   (0UL)                     /*!< DMAC C3Control: TransferSize (Bit 0)                  */
#define DMAC_C3Control_TransferSize_Msk   (0xfffUL)                 /*!< DMAC C3Control: TransferSize (Bitfield-Mask: 0xfff)   */
#define DMAC_C3Control_SBSize_Pos         (12UL)                    /*!< DMAC C3Control: SBSize (Bit 12)                       */
#define DMAC_C3Control_SBSize_Msk         (0x7000UL)                /*!< DMAC C3Control: SBSize (Bitfield-Mask: 0x07)          */
#define DMAC_C3Control_DBSize_Pos         (15UL)                    /*!< DMAC C3Control: DBSize (Bit 15)                       */
#define DMAC_C3Control_DBSize_Msk         (0x38000UL)               /*!< DMAC C3Control: DBSize (Bitfield-Mask: 0x07)          */
#define DMAC_C3Control_SWidth_Pos         (18UL)                    /*!< DMAC C3Control: SWidth (Bit 18)                       */
#define DMAC_C3Control_SWidth_Msk         (0x1c0000UL)              /*!< DMAC C3Control: SWidth (Bitfield-Mask: 0x07)          */
#define DMAC_C3Control_DWidth_Pos         (21UL)                    /*!< DMAC C3Control: DWidth (Bit 21)                       */
#define DMAC_C3Control_DWidth_Msk         (0xe00000UL)              /*!< DMAC C3Control: DWidth (Bitfield-Mask: 0x07)          */
#define DMAC_C3Control_S_Pos              (24UL)                    /*!< DMAC C3Control: S (Bit 24)                            */
#define DMAC_C3Control_S_Msk              (0x1000000UL)             /*!< DMAC C3Control: S (Bitfield-Mask: 0x01)               */
#define DMAC_C3Control_D_Pos              (25UL)                    /*!< DMAC C3Control: D (Bit 25)                            */
#define DMAC_C3Control_D_Msk              (0x2000000UL)             /*!< DMAC C3Control: D (Bitfield-Mask: 0x01)               */
#define DMAC_C3Control_SI_Pos             (26UL)                    /*!< DMAC C3Control: SI (Bit 26)                           */
#define DMAC_C3Control_SI_Msk             (0x4000000UL)             /*!< DMAC C3Control: SI (Bitfield-Mask: 0x01)              */
#define DMAC_C3Control_DI_Pos             (27UL)                    /*!< DMAC C3Control: DI (Bit 27)                           */
#define DMAC_C3Control_DI_Msk             (0x8000000UL)             /*!< DMAC C3Control: DI (Bitfield-Mask: 0x01)              */
#define DMAC_C3Control_Prot_Pos           (28UL)                    /*!< DMAC C3Control: Prot (Bit 28)                         */
#define DMAC_C3Control_Prot_Msk           (0x70000000UL)            /*!< DMAC C3Control: Prot (Bitfield-Mask: 0x07)            */
#define DMAC_C3Control_I_Pos              (31UL)                    /*!< DMAC C3Control: I (Bit 31)                            */
#define DMAC_C3Control_I_Msk              (0x80000000UL)            /*!< DMAC C3Control: I (Bitfield-Mask: 0x01)               */
/* ====================================================  C3Configuration  ==================================================== */
#define DMAC_C3Configuration_E_Pos        (0UL)                     /*!< DMAC C3Configuration: E (Bit 0)                       */
#define DMAC_C3Configuration_E_Msk        (0x1UL)                   /*!< DMAC C3Configuration: E (Bitfield-Mask: 0x01)         */
#define DMAC_C3Configuration_SrcPeripheral_Pos (1UL)                /*!< DMAC C3Configuration: SrcPeripheral (Bit 1)           */
#define DMAC_C3Configuration_SrcPeripheral_Msk (0x1eUL)             /*!< DMAC C3Configuration: SrcPeripheral (Bitfield-Mask: 0x0f) */
#define DMAC_C3Configuration_DestPeripheral_Pos (6UL)               /*!< DMAC C3Configuration: DestPeripheral (Bit 6)          */
#define DMAC_C3Configuration_DestPeripheral_Msk (0x3c0UL)           /*!< DMAC C3Configuration: DestPeripheral (Bitfield-Mask: 0x0f) */
#define DMAC_C3Configuration_FlowCntrl_Pos (11UL)                   /*!< DMAC C3Configuration: FlowCntrl (Bit 11)              */
#define DMAC_C3Configuration_FlowCntrl_Msk (0x3800UL)               /*!< DMAC C3Configuration: FlowCntrl (Bitfield-Mask: 0x07) */
#define DMAC_C3Configuration_IE_Pos       (14UL)                    /*!< DMAC C3Configuration: IE (Bit 14)                     */
#define DMAC_C3Configuration_IE_Msk       (0x4000UL)                /*!< DMAC C3Configuration: IE (Bitfield-Mask: 0x01)        */
#define DMAC_C3Configuration_ITC_Pos      (15UL)                    /*!< DMAC C3Configuration: ITC (Bit 15)                    */
#define DMAC_C3Configuration_ITC_Msk      (0x8000UL)                /*!< DMAC C3Configuration: ITC (Bitfield-Mask: 0x01)       */
#define DMAC_C3Configuration_L_Pos        (16UL)                    /*!< DMAC C3Configuration: L (Bit 16)                      */
#define DMAC_C3Configuration_L_Msk        (0x10000UL)               /*!< DMAC C3Configuration: L (Bitfield-Mask: 0x01)         */
#define DMAC_C3Configuration_A_Pos        (17UL)                    /*!< DMAC C3Configuration: A (Bit 17)                      */
#define DMAC_C3Configuration_A_Msk        (0x20000UL)               /*!< DMAC C3Configuration: A (Bitfield-Mask: 0x01)         */
#define DMAC_C3Configuration_H_Pos        (18UL)                    /*!< DMAC C3Configuration: H (Bit 18)                      */
#define DMAC_C3Configuration_H_Msk        (0x40000UL)               /*!< DMAC C3Configuration: H (Bitfield-Mask: 0x01)         */
/* =======================================================  C4SrcAddr  ======================================================= */
#define DMAC_C4SrcAddr_SrcAddr_Pos        (0UL)                     /*!< DMAC C4SrcAddr: SrcAddr (Bit 0)                       */
#define DMAC_C4SrcAddr_SrcAddr_Msk        (0xffffffffUL)            /*!< DMAC C4SrcAddr: SrcAddr (Bitfield-Mask: 0xffffffff)   */
/* ======================================================  C4DestAddr  ======================================================= */
#define DMAC_C4DestAddr_DestAddr_Pos      (0UL)                     /*!< DMAC C4DestAddr: DestAddr (Bit 0)                     */
#define DMAC_C4DestAddr_DestAddr_Msk      (0xffffffffUL)            /*!< DMAC C4DestAddr: DestAddr (Bitfield-Mask: 0xffffffff) */
/* =========================================================  C4LLI  ========================================================= */
#define DMAC_C4LLI_LM_Pos                 (0UL)                     /*!< DMAC C4LLI: LM (Bit 0)                                */
#define DMAC_C4LLI_LM_Msk                 (0x1UL)                   /*!< DMAC C4LLI: LM (Bitfield-Mask: 0x01)                  */
#define DMAC_C4LLI_R_Pos                  (1UL)                     /*!< DMAC C4LLI: R (Bit 1)                                 */
#define DMAC_C4LLI_R_Msk                  (0x2UL)                   /*!< DMAC C4LLI: R (Bitfield-Mask: 0x01)                   */
#define DMAC_C4LLI_LLI_Pos                (2UL)                     /*!< DMAC C4LLI: LLI (Bit 2)                               */
#define DMAC_C4LLI_LLI_Msk                (0xfffffffcUL)            /*!< DMAC C4LLI: LLI (Bitfield-Mask: 0x3fffffff)           */
/* =======================================================  C4Control  ======================================================= */
#define DMAC_C4Control_TransferSize_Pos   (0UL)                     /*!< DMAC C4Control: TransferSize (Bit 0)                  */
#define DMAC_C4Control_TransferSize_Msk   (0xfffUL)                 /*!< DMAC C4Control: TransferSize (Bitfield-Mask: 0xfff)   */
#define DMAC_C4Control_SBSize_Pos         (12UL)                    /*!< DMAC C4Control: SBSize (Bit 12)                       */
#define DMAC_C4Control_SBSize_Msk         (0x7000UL)                /*!< DMAC C4Control: SBSize (Bitfield-Mask: 0x07)          */
#define DMAC_C4Control_DBSize_Pos         (15UL)                    /*!< DMAC C4Control: DBSize (Bit 15)                       */
#define DMAC_C4Control_DBSize_Msk         (0x38000UL)               /*!< DMAC C4Control: DBSize (Bitfield-Mask: 0x07)          */
#define DMAC_C4Control_SWidth_Pos         (18UL)                    /*!< DMAC C4Control: SWidth (Bit 18)                       */
#define DMAC_C4Control_SWidth_Msk         (0x1c0000UL)              /*!< DMAC C4Control: SWidth (Bitfield-Mask: 0x07)          */
#define DMAC_C4Control_DWidth_Pos         (21UL)                    /*!< DMAC C4Control: DWidth (Bit 21)                       */
#define DMAC_C4Control_DWidth_Msk         (0xe00000UL)              /*!< DMAC C4Control: DWidth (Bitfield-Mask: 0x07)          */
#define DMAC_C4Control_S_Pos              (24UL)                    /*!< DMAC C4Control: S (Bit 24)                            */
#define DMAC_C4Control_S_Msk              (0x1000000UL)             /*!< DMAC C4Control: S (Bitfield-Mask: 0x01)               */
#define DMAC_C4Control_D_Pos              (25UL)                    /*!< DMAC C4Control: D (Bit 25)                            */
#define DMAC_C4Control_D_Msk              (0x2000000UL)             /*!< DMAC C4Control: D (Bitfield-Mask: 0x01)               */
#define DMAC_C4Control_SI_Pos             (26UL)                    /*!< DMAC C4Control: SI (Bit 26)                           */
#define DMAC_C4Control_SI_Msk             (0x4000000UL)             /*!< DMAC C4Control: SI (Bitfield-Mask: 0x01)              */
#define DMAC_C4Control_DI_Pos             (27UL)                    /*!< DMAC C4Control: DI (Bit 27)                           */
#define DMAC_C4Control_DI_Msk             (0x8000000UL)             /*!< DMAC C4Control: DI (Bitfield-Mask: 0x01)              */
#define DMAC_C4Control_Prot_Pos           (28UL)                    /*!< DMAC C4Control: Prot (Bit 28)                         */
#define DMAC_C4Control_Prot_Msk           (0x70000000UL)            /*!< DMAC C4Control: Prot (Bitfield-Mask: 0x07)            */
#define DMAC_C4Control_I_Pos              (31UL)                    /*!< DMAC C4Control: I (Bit 31)                            */
#define DMAC_C4Control_I_Msk              (0x80000000UL)            /*!< DMAC C4Control: I (Bitfield-Mask: 0x01)               */
/* ====================================================  C4Configuration  ==================================================== */
#define DMAC_C4Configuration_E_Pos        (0UL)                     /*!< DMAC C4Configuration: E (Bit 0)                       */
#define DMAC_C4Configuration_E_Msk        (0x1UL)                   /*!< DMAC C4Configuration: E (Bitfield-Mask: 0x01)         */
#define DMAC_C4Configuration_SrcPeripheral_Pos (1UL)                /*!< DMAC C4Configuration: SrcPeripheral (Bit 1)           */
#define DMAC_C4Configuration_SrcPeripheral_Msk (0x1eUL)             /*!< DMAC C4Configuration: SrcPeripheral (Bitfield-Mask: 0x0f) */
#define DMAC_C4Configuration_DestPeripheral_Pos (6UL)               /*!< DMAC C4Configuration: DestPeripheral (Bit 6)          */
#define DMAC_C4Configuration_DestPeripheral_Msk (0x3c0UL)           /*!< DMAC C4Configuration: DestPeripheral (Bitfield-Mask: 0x0f) */
#define DMAC_C4Configuration_FlowCntrl_Pos (11UL)                   /*!< DMAC C4Configuration: FlowCntrl (Bit 11)              */
#define DMAC_C4Configuration_FlowCntrl_Msk (0x3800UL)               /*!< DMAC C4Configuration: FlowCntrl (Bitfield-Mask: 0x07) */
#define DMAC_C4Configuration_IE_Pos       (14UL)                    /*!< DMAC C4Configuration: IE (Bit 14)                     */
#define DMAC_C4Configuration_IE_Msk       (0x4000UL)                /*!< DMAC C4Configuration: IE (Bitfield-Mask: 0x01)        */
#define DMAC_C4Configuration_ITC_Pos      (15UL)                    /*!< DMAC C4Configuration: ITC (Bit 15)                    */
#define DMAC_C4Configuration_ITC_Msk      (0x8000UL)                /*!< DMAC C4Configuration: ITC (Bitfield-Mask: 0x01)       */
#define DMAC_C4Configuration_L_Pos        (16UL)                    /*!< DMAC C4Configuration: L (Bit 16)                      */
#define DMAC_C4Configuration_L_Msk        (0x10000UL)               /*!< DMAC C4Configuration: L (Bitfield-Mask: 0x01)         */
#define DMAC_C4Configuration_A_Pos        (17UL)                    /*!< DMAC C4Configuration: A (Bit 17)                      */
#define DMAC_C4Configuration_A_Msk        (0x20000UL)               /*!< DMAC C4Configuration: A (Bitfield-Mask: 0x01)         */
#define DMAC_C4Configuration_H_Pos        (18UL)                    /*!< DMAC C4Configuration: H (Bit 18)                      */
#define DMAC_C4Configuration_H_Msk        (0x40000UL)               /*!< DMAC C4Configuration: H (Bitfield-Mask: 0x01)         */
/* =======================================================  C5SrcAddr  ======================================================= */
#define DMAC_C5SrcAddr_SrcAddr_Pos        (0UL)                     /*!< DMAC C5SrcAddr: SrcAddr (Bit 0)                       */
#define DMAC_C5SrcAddr_SrcAddr_Msk        (0xffffffffUL)            /*!< DMAC C5SrcAddr: SrcAddr (Bitfield-Mask: 0xffffffff)   */
/* ======================================================  C5DestAddr  ======================================================= */
#define DMAC_C5DestAddr_DestAddr_Pos      (0UL)                     /*!< DMAC C5DestAddr: DestAddr (Bit 0)                     */
#define DMAC_C5DestAddr_DestAddr_Msk      (0xffffffffUL)            /*!< DMAC C5DestAddr: DestAddr (Bitfield-Mask: 0xffffffff) */
/* =========================================================  C5LLI  ========================================================= */
#define DMAC_C5LLI_LM_Pos                 (0UL)                     /*!< DMAC C5LLI: LM (Bit 0)                                */
#define DMAC_C5LLI_LM_Msk                 (0x1UL)                   /*!< DMAC C5LLI: LM (Bitfield-Mask: 0x01)                  */
#define DMAC_C5LLI_R_Pos                  (1UL)                     /*!< DMAC C5LLI: R (Bit 1)                                 */
#define DMAC_C5LLI_R_Msk                  (0x2UL)                   /*!< DMAC C5LLI: R (Bitfield-Mask: 0x01)                   */
#define DMAC_C5LLI_LLI_Pos                (2UL)                     /*!< DMAC C5LLI: LLI (Bit 2)                               */
#define DMAC_C5LLI_LLI_Msk                (0xfffffffcUL)            /*!< DMAC C5LLI: LLI (Bitfield-Mask: 0x3fffffff)           */
/* =======================================================  C5Control  ======================================================= */
#define DMAC_C5Control_TransferSize_Pos   (0UL)                     /*!< DMAC C5Control: TransferSize (Bit 0)                  */
#define DMAC_C5Control_TransferSize_Msk   (0xfffUL)                 /*!< DMAC C5Control: TransferSize (Bitfield-Mask: 0xfff)   */
#define DMAC_C5Control_SBSize_Pos         (12UL)                    /*!< DMAC C5Control: SBSize (Bit 12)                       */
#define DMAC_C5Control_SBSize_Msk         (0x7000UL)                /*!< DMAC C5Control: SBSize (Bitfield-Mask: 0x07)          */
#define DMAC_C5Control_DBSize_Pos         (15UL)                    /*!< DMAC C5Control: DBSize (Bit 15)                       */
#define DMAC_C5Control_DBSize_Msk         (0x38000UL)               /*!< DMAC C5Control: DBSize (Bitfield-Mask: 0x07)          */
#define DMAC_C5Control_SWidth_Pos         (18UL)                    /*!< DMAC C5Control: SWidth (Bit 18)                       */
#define DMAC_C5Control_SWidth_Msk         (0x1c0000UL)              /*!< DMAC C5Control: SWidth (Bitfield-Mask: 0x07)          */
#define DMAC_C5Control_DWidth_Pos         (21UL)                    /*!< DMAC C5Control: DWidth (Bit 21)                       */
#define DMAC_C5Control_DWidth_Msk         (0xe00000UL)              /*!< DMAC C5Control: DWidth (Bitfield-Mask: 0x07)          */
#define DMAC_C5Control_S_Pos              (24UL)                    /*!< DMAC C5Control: S (Bit 24)                            */
#define DMAC_C5Control_S_Msk              (0x1000000UL)             /*!< DMAC C5Control: S (Bitfield-Mask: 0x01)               */
#define DMAC_C5Control_D_Pos              (25UL)                    /*!< DMAC C5Control: D (Bit 25)                            */
#define DMAC_C5Control_D_Msk              (0x2000000UL)             /*!< DMAC C5Control: D (Bitfield-Mask: 0x01)               */
#define DMAC_C5Control_SI_Pos             (26UL)                    /*!< DMAC C5Control: SI (Bit 26)                           */
#define DMAC_C5Control_SI_Msk             (0x4000000UL)             /*!< DMAC C5Control: SI (Bitfield-Mask: 0x01)              */
#define DMAC_C5Control_DI_Pos             (27UL)                    /*!< DMAC C5Control: DI (Bit 27)                           */
#define DMAC_C5Control_DI_Msk             (0x8000000UL)             /*!< DMAC C5Control: DI (Bitfield-Mask: 0x01)              */
#define DMAC_C5Control_Prot_Pos           (28UL)                    /*!< DMAC C5Control: Prot (Bit 28)                         */
#define DMAC_C5Control_Prot_Msk           (0x70000000UL)            /*!< DMAC C5Control: Prot (Bitfield-Mask: 0x07)            */
#define DMAC_C5Control_I_Pos              (31UL)                    /*!< DMAC C5Control: I (Bit 31)                            */
#define DMAC_C5Control_I_Msk              (0x80000000UL)            /*!< DMAC C5Control: I (Bitfield-Mask: 0x01)               */
/* ====================================================  C5Configuration  ==================================================== */
#define DMAC_C5Configuration_E_Pos        (0UL)                     /*!< DMAC C5Configuration: E (Bit 0)                       */
#define DMAC_C5Configuration_E_Msk        (0x1UL)                   /*!< DMAC C5Configuration: E (Bitfield-Mask: 0x01)         */
#define DMAC_C5Configuration_SrcPeripheral_Pos (1UL)                /*!< DMAC C5Configuration: SrcPeripheral (Bit 1)           */
#define DMAC_C5Configuration_SrcPeripheral_Msk (0x1eUL)             /*!< DMAC C5Configuration: SrcPeripheral (Bitfield-Mask: 0x0f) */
#define DMAC_C5Configuration_DestPeripheral_Pos (6UL)               /*!< DMAC C5Configuration: DestPeripheral (Bit 6)          */
#define DMAC_C5Configuration_DestPeripheral_Msk (0x3c0UL)           /*!< DMAC C5Configuration: DestPeripheral (Bitfield-Mask: 0x0f) */
#define DMAC_C5Configuration_FlowCntrl_Pos (11UL)                   /*!< DMAC C5Configuration: FlowCntrl (Bit 11)              */
#define DMAC_C5Configuration_FlowCntrl_Msk (0x3800UL)               /*!< DMAC C5Configuration: FlowCntrl (Bitfield-Mask: 0x07) */
#define DMAC_C5Configuration_IE_Pos       (14UL)                    /*!< DMAC C5Configuration: IE (Bit 14)                     */
#define DMAC_C5Configuration_IE_Msk       (0x4000UL)                /*!< DMAC C5Configuration: IE (Bitfield-Mask: 0x01)        */
#define DMAC_C5Configuration_ITC_Pos      (15UL)                    /*!< DMAC C5Configuration: ITC (Bit 15)                    */
#define DMAC_C5Configuration_ITC_Msk      (0x8000UL)                /*!< DMAC C5Configuration: ITC (Bitfield-Mask: 0x01)       */
#define DMAC_C5Configuration_L_Pos        (16UL)                    /*!< DMAC C5Configuration: L (Bit 16)                      */
#define DMAC_C5Configuration_L_Msk        (0x10000UL)               /*!< DMAC C5Configuration: L (Bitfield-Mask: 0x01)         */
#define DMAC_C5Configuration_A_Pos        (17UL)                    /*!< DMAC C5Configuration: A (Bit 17)                      */
#define DMAC_C5Configuration_A_Msk        (0x20000UL)               /*!< DMAC C5Configuration: A (Bitfield-Mask: 0x01)         */
#define DMAC_C5Configuration_H_Pos        (18UL)                    /*!< DMAC C5Configuration: H (Bit 18)                      */
#define DMAC_C5Configuration_H_Msk        (0x40000UL)               /*!< DMAC C5Configuration: H (Bitfield-Mask: 0x01)         */
/* =======================================================  C6SrcAddr  ======================================================= */
#define DMAC_C6SrcAddr_SrcAddr_Pos        (0UL)                     /*!< DMAC C6SrcAddr: SrcAddr (Bit 0)                       */
#define DMAC_C6SrcAddr_SrcAddr_Msk        (0xffffffffUL)            /*!< DMAC C6SrcAddr: SrcAddr (Bitfield-Mask: 0xffffffff)   */
/* ======================================================  C6DestAddr  ======================================================= */
#define DMAC_C6DestAddr_DestAddr_Pos      (0UL)                     /*!< DMAC C6DestAddr: DestAddr (Bit 0)                     */
#define DMAC_C6DestAddr_DestAddr_Msk      (0xffffffffUL)            /*!< DMAC C6DestAddr: DestAddr (Bitfield-Mask: 0xffffffff) */
/* =========================================================  C6LLI  ========================================================= */
#define DMAC_C6LLI_LM_Pos                 (0UL)                     /*!< DMAC C6LLI: LM (Bit 0)                                */
#define DMAC_C6LLI_LM_Msk                 (0x1UL)                   /*!< DMAC C6LLI: LM (Bitfield-Mask: 0x01)                  */
#define DMAC_C6LLI_R_Pos                  (1UL)                     /*!< DMAC C6LLI: R (Bit 1)                                 */
#define DMAC_C6LLI_R_Msk                  (0x2UL)                   /*!< DMAC C6LLI: R (Bitfield-Mask: 0x01)                   */
#define DMAC_C6LLI_LLI_Pos                (2UL)                     /*!< DMAC C6LLI: LLI (Bit 2)                               */
#define DMAC_C6LLI_LLI_Msk                (0xfffffffcUL)            /*!< DMAC C6LLI: LLI (Bitfield-Mask: 0x3fffffff)           */
/* ======================================================  C6Controll  ======================================================= */
#define DMAC_C6Controll_TransferSize_Pos  (0UL)                     /*!< DMAC C6Controll: TransferSize (Bit 0)                 */
#define DMAC_C6Controll_TransferSize_Msk  (0xfffUL)                 /*!< DMAC C6Controll: TransferSize (Bitfield-Mask: 0xfff)  */
#define DMAC_C6Controll_SBSize_Pos        (12UL)                    /*!< DMAC C6Controll: SBSize (Bit 12)                      */
#define DMAC_C6Controll_SBSize_Msk        (0x7000UL)                /*!< DMAC C6Controll: SBSize (Bitfield-Mask: 0x07)         */
#define DMAC_C6Controll_DBSize_Pos        (15UL)                    /*!< DMAC C6Controll: DBSize (Bit 15)                      */
#define DMAC_C6Controll_DBSize_Msk        (0x38000UL)               /*!< DMAC C6Controll: DBSize (Bitfield-Mask: 0x07)         */
#define DMAC_C6Controll_SWidth_Pos        (18UL)                    /*!< DMAC C6Controll: SWidth (Bit 18)                      */
#define DMAC_C6Controll_SWidth_Msk        (0x1c0000UL)              /*!< DMAC C6Controll: SWidth (Bitfield-Mask: 0x07)         */
#define DMAC_C6Controll_DWidth_Pos        (21UL)                    /*!< DMAC C6Controll: DWidth (Bit 21)                      */
#define DMAC_C6Controll_DWidth_Msk        (0xe00000UL)              /*!< DMAC C6Controll: DWidth (Bitfield-Mask: 0x07)         */
#define DMAC_C6Controll_S_Pos             (24UL)                    /*!< DMAC C6Controll: S (Bit 24)                           */
#define DMAC_C6Controll_S_Msk             (0x1000000UL)             /*!< DMAC C6Controll: S (Bitfield-Mask: 0x01)              */
#define DMAC_C6Controll_D_Pos             (25UL)                    /*!< DMAC C6Controll: D (Bit 25)                           */
#define DMAC_C6Controll_D_Msk             (0x2000000UL)             /*!< DMAC C6Controll: D (Bitfield-Mask: 0x01)              */
#define DMAC_C6Controll_SI_Pos            (26UL)                    /*!< DMAC C6Controll: SI (Bit 26)                          */
#define DMAC_C6Controll_SI_Msk            (0x4000000UL)             /*!< DMAC C6Controll: SI (Bitfield-Mask: 0x01)             */
#define DMAC_C6Controll_DI_Pos            (27UL)                    /*!< DMAC C6Controll: DI (Bit 27)                          */
#define DMAC_C6Controll_DI_Msk            (0x8000000UL)             /*!< DMAC C6Controll: DI (Bitfield-Mask: 0x01)             */
#define DMAC_C6Controll_Prot_Pos          (28UL)                    /*!< DMAC C6Controll: Prot (Bit 28)                        */
#define DMAC_C6Controll_Prot_Msk          (0x70000000UL)            /*!< DMAC C6Controll: Prot (Bitfield-Mask: 0x07)           */
#define DMAC_C6Controll_I_Pos             (31UL)                    /*!< DMAC C6Controll: I (Bit 31)                           */
#define DMAC_C6Controll_I_Msk             (0x80000000UL)            /*!< DMAC C6Controll: I (Bitfield-Mask: 0x01)              */
/* ====================================================  C6Configuration  ==================================================== */
#define DMAC_C6Configuration_E_Pos        (0UL)                     /*!< DMAC C6Configuration: E (Bit 0)                       */
#define DMAC_C6Configuration_E_Msk        (0x1UL)                   /*!< DMAC C6Configuration: E (Bitfield-Mask: 0x01)         */
#define DMAC_C6Configuration_SrcPeripheral_Pos (1UL)                /*!< DMAC C6Configuration: SrcPeripheral (Bit 1)           */
#define DMAC_C6Configuration_SrcPeripheral_Msk (0x1eUL)             /*!< DMAC C6Configuration: SrcPeripheral (Bitfield-Mask: 0x0f) */
#define DMAC_C6Configuration_DestPeripheral_Pos (6UL)               /*!< DMAC C6Configuration: DestPeripheral (Bit 6)          */
#define DMAC_C6Configuration_DestPeripheral_Msk (0x3c0UL)           /*!< DMAC C6Configuration: DestPeripheral (Bitfield-Mask: 0x0f) */
#define DMAC_C6Configuration_FlowCntrl_Pos (11UL)                   /*!< DMAC C6Configuration: FlowCntrl (Bit 11)              */
#define DMAC_C6Configuration_FlowCntrl_Msk (0x3800UL)               /*!< DMAC C6Configuration: FlowCntrl (Bitfield-Mask: 0x07) */
#define DMAC_C6Configuration_IE_Pos       (14UL)                    /*!< DMAC C6Configuration: IE (Bit 14)                     */
#define DMAC_C6Configuration_IE_Msk       (0x4000UL)                /*!< DMAC C6Configuration: IE (Bitfield-Mask: 0x01)        */
#define DMAC_C6Configuration_ITC_Pos      (15UL)                    /*!< DMAC C6Configuration: ITC (Bit 15)                    */
#define DMAC_C6Configuration_ITC_Msk      (0x8000UL)                /*!< DMAC C6Configuration: ITC (Bitfield-Mask: 0x01)       */
#define DMAC_C6Configuration_L_Pos        (16UL)                    /*!< DMAC C6Configuration: L (Bit 16)                      */
#define DMAC_C6Configuration_L_Msk        (0x10000UL)               /*!< DMAC C6Configuration: L (Bitfield-Mask: 0x01)         */
#define DMAC_C6Configuration_A_Pos        (17UL)                    /*!< DMAC C6Configuration: A (Bit 17)                      */
#define DMAC_C6Configuration_A_Msk        (0x20000UL)               /*!< DMAC C6Configuration: A (Bitfield-Mask: 0x01)         */
#define DMAC_C6Configuration_H_Pos        (18UL)                    /*!< DMAC C6Configuration: H (Bit 18)                      */
#define DMAC_C6Configuration_H_Msk        (0x40000UL)               /*!< DMAC C6Configuration: H (Bitfield-Mask: 0x01)         */
/* =======================================================  C7SrcAddr  ======================================================= */
#define DMAC_C7SrcAddr_SrcAddr_Pos        (0UL)                     /*!< DMAC C7SrcAddr: SrcAddr (Bit 0)                       */
#define DMAC_C7SrcAddr_SrcAddr_Msk        (0xffffffffUL)            /*!< DMAC C7SrcAddr: SrcAddr (Bitfield-Mask: 0xffffffff)   */
/* ======================================================  C7DestAddr  ======================================================= */
#define DMAC_C7DestAddr_DestAddr_Pos      (0UL)                     /*!< DMAC C7DestAddr: DestAddr (Bit 0)                     */
#define DMAC_C7DestAddr_DestAddr_Msk      (0xffffffffUL)            /*!< DMAC C7DestAddr: DestAddr (Bitfield-Mask: 0xffffffff) */
/* =========================================================  C7LLI  ========================================================= */
#define DMAC_C7LLI_LM_Pos                 (0UL)                     /*!< DMAC C7LLI: LM (Bit 0)                                */
#define DMAC_C7LLI_LM_Msk                 (0x1UL)                   /*!< DMAC C7LLI: LM (Bitfield-Mask: 0x01)                  */
#define DMAC_C7LLI_R_Pos                  (1UL)                     /*!< DMAC C7LLI: R (Bit 1)                                 */
#define DMAC_C7LLI_R_Msk                  (0x2UL)                   /*!< DMAC C7LLI: R (Bitfield-Mask: 0x01)                   */
#define DMAC_C7LLI_LLI_Pos                (2UL)                     /*!< DMAC C7LLI: LLI (Bit 2)                               */
#define DMAC_C7LLI_LLI_Msk                (0xfffffffcUL)            /*!< DMAC C7LLI: LLI (Bitfield-Mask: 0x3fffffff)           */
/* =======================================================  C7Control  ======================================================= */
#define DMAC_C7Control_TransferSize_Pos   (0UL)                     /*!< DMAC C7Control: TransferSize (Bit 0)                  */
#define DMAC_C7Control_TransferSize_Msk   (0xfffUL)                 /*!< DMAC C7Control: TransferSize (Bitfield-Mask: 0xfff)   */
#define DMAC_C7Control_SBSize_Pos         (12UL)                    /*!< DMAC C7Control: SBSize (Bit 12)                       */
#define DMAC_C7Control_SBSize_Msk         (0x7000UL)                /*!< DMAC C7Control: SBSize (Bitfield-Mask: 0x07)          */
#define DMAC_C7Control_DBSize_Pos         (15UL)                    /*!< DMAC C7Control: DBSize (Bit 15)                       */
#define DMAC_C7Control_DBSize_Msk         (0x38000UL)               /*!< DMAC C7Control: DBSize (Bitfield-Mask: 0x07)          */
#define DMAC_C7Control_SWidth_Pos         (18UL)                    /*!< DMAC C7Control: SWidth (Bit 18)                       */
#define DMAC_C7Control_SWidth_Msk         (0x1c0000UL)              /*!< DMAC C7Control: SWidth (Bitfield-Mask: 0x07)          */
#define DMAC_C7Control_DWidth_Pos         (21UL)                    /*!< DMAC C7Control: DWidth (Bit 21)                       */
#define DMAC_C7Control_DWidth_Msk         (0xe00000UL)              /*!< DMAC C7Control: DWidth (Bitfield-Mask: 0x07)          */
#define DMAC_C7Control_S_Pos              (24UL)                    /*!< DMAC C7Control: S (Bit 24)                            */
#define DMAC_C7Control_S_Msk              (0x1000000UL)             /*!< DMAC C7Control: S (Bitfield-Mask: 0x01)               */
#define DMAC_C7Control_D_Pos              (25UL)                    /*!< DMAC C7Control: D (Bit 25)                            */
#define DMAC_C7Control_D_Msk              (0x2000000UL)             /*!< DMAC C7Control: D (Bitfield-Mask: 0x01)               */
#define DMAC_C7Control_SI_Pos             (26UL)                    /*!< DMAC C7Control: SI (Bit 26)                           */
#define DMAC_C7Control_SI_Msk             (0x4000000UL)             /*!< DMAC C7Control: SI (Bitfield-Mask: 0x01)              */
#define DMAC_C7Control_DI_Pos             (27UL)                    /*!< DMAC C7Control: DI (Bit 27)                           */
#define DMAC_C7Control_DI_Msk             (0x8000000UL)             /*!< DMAC C7Control: DI (Bitfield-Mask: 0x01)              */
#define DMAC_C7Control_Prot_Pos           (28UL)                    /*!< DMAC C7Control: Prot (Bit 28)                         */
#define DMAC_C7Control_Prot_Msk           (0x70000000UL)            /*!< DMAC C7Control: Prot (Bitfield-Mask: 0x07)            */
#define DMAC_C7Control_I_Pos              (31UL)                    /*!< DMAC C7Control: I (Bit 31)                            */
#define DMAC_C7Control_I_Msk              (0x80000000UL)            /*!< DMAC C7Control: I (Bitfield-Mask: 0x01)               */
/* ====================================================  C7Configuration  ==================================================== */
#define DMAC_C7Configuration_E_Pos        (0UL)                     /*!< DMAC C7Configuration: E (Bit 0)                       */
#define DMAC_C7Configuration_E_Msk        (0x1UL)                   /*!< DMAC C7Configuration: E (Bitfield-Mask: 0x01)         */
#define DMAC_C7Configuration_SrcPeripheral_Pos (1UL)                /*!< DMAC C7Configuration: SrcPeripheral (Bit 1)           */
#define DMAC_C7Configuration_SrcPeripheral_Msk (0x1eUL)             /*!< DMAC C7Configuration: SrcPeripheral (Bitfield-Mask: 0x0f) */
#define DMAC_C7Configuration_DestPeripheral_Pos (6UL)               /*!< DMAC C7Configuration: DestPeripheral (Bit 6)          */
#define DMAC_C7Configuration_DestPeripheral_Msk (0x3c0UL)           /*!< DMAC C7Configuration: DestPeripheral (Bitfield-Mask: 0x0f) */
#define DMAC_C7Configuration_FlowCntrl_Pos (11UL)                   /*!< DMAC C7Configuration: FlowCntrl (Bit 11)              */
#define DMAC_C7Configuration_FlowCntrl_Msk (0x3800UL)               /*!< DMAC C7Configuration: FlowCntrl (Bitfield-Mask: 0x07) */
#define DMAC_C7Configuration_IE_Pos       (14UL)                    /*!< DMAC C7Configuration: IE (Bit 14)                     */
#define DMAC_C7Configuration_IE_Msk       (0x4000UL)                /*!< DMAC C7Configuration: IE (Bitfield-Mask: 0x01)        */
#define DMAC_C7Configuration_ITC_Pos      (15UL)                    /*!< DMAC C7Configuration: ITC (Bit 15)                    */
#define DMAC_C7Configuration_ITC_Msk      (0x8000UL)                /*!< DMAC C7Configuration: ITC (Bitfield-Mask: 0x01)       */
#define DMAC_C7Configuration_L_Pos        (16UL)                    /*!< DMAC C7Configuration: L (Bit 16)                      */
#define DMAC_C7Configuration_L_Msk        (0x10000UL)               /*!< DMAC C7Configuration: L (Bitfield-Mask: 0x01)         */
#define DMAC_C7Configuration_A_Pos        (17UL)                    /*!< DMAC C7Configuration: A (Bit 17)                      */
#define DMAC_C7Configuration_A_Msk        (0x20000UL)               /*!< DMAC C7Configuration: A (Bitfield-Mask: 0x01)         */
#define DMAC_C7Configuration_H_Pos        (18UL)                    /*!< DMAC C7Configuration: H (Bit 18)                      */
#define DMAC_C7Configuration_H_Msk        (0x40000UL)               /*!< DMAC C7Configuration: H (Bitfield-Mask: 0x01)         */
/* =======================================================  PeriphID0  ======================================================= */
#define DMAC_PeriphID0_PartNumber0_Pos    (0UL)                     /*!< DMAC PeriphID0: PartNumber0 (Bit 0)                   */
#define DMAC_PeriphID0_PartNumber0_Msk    (0xffUL)                  /*!< DMAC PeriphID0: PartNumber0 (Bitfield-Mask: 0xff)     */
/* =======================================================  PeriphID1  ======================================================= */
#define DMAC_PeriphID1_PartNumber1_Pos    (0UL)                     /*!< DMAC PeriphID1: PartNumber1 (Bit 0)                   */
#define DMAC_PeriphID1_PartNumber1_Msk    (0xfUL)                   /*!< DMAC PeriphID1: PartNumber1 (Bitfield-Mask: 0x0f)     */
#define DMAC_PeriphID1_Designer0_Pos      (4UL)                     /*!< DMAC PeriphID1: Designer0 (Bit 4)                     */
#define DMAC_PeriphID1_Designer0_Msk      (0xf0UL)                  /*!< DMAC PeriphID1: Designer0 (Bitfield-Mask: 0x0f)       */
/* =======================================================  PeriphID2  ======================================================= */
#define DMAC_PeriphID2_Designer1_Pos      (0UL)                     /*!< DMAC PeriphID2: Designer1 (Bit 0)                     */
#define DMAC_PeriphID2_Designer1_Msk      (0xfUL)                   /*!< DMAC PeriphID2: Designer1 (Bitfield-Mask: 0x0f)       */
#define DMAC_PeriphID2_Revision_Pos       (4UL)                     /*!< DMAC PeriphID2: Revision (Bit 4)                      */
#define DMAC_PeriphID2_Revision_Msk       (0xf0UL)                  /*!< DMAC PeriphID2: Revision (Bitfield-Mask: 0x0f)        */
/* =======================================================  PeriphID3  ======================================================= */
#define DMAC_PeriphID3_Channel_Pos        (0UL)                     /*!< DMAC PeriphID3: Channel (Bit 0)                       */
#define DMAC_PeriphID3_Channel_Msk        (0x7UL)                   /*!< DMAC PeriphID3: Channel (Bitfield-Mask: 0x07)         */
#define DMAC_PeriphID3_Number_Pos         (3UL)                     /*!< DMAC PeriphID3: Number (Bit 3)                        */
#define DMAC_PeriphID3_Number_Msk         (0x8UL)                   /*!< DMAC PeriphID3: Number (Bitfield-Mask: 0x01)          */
#define DMAC_PeriphID3_Sidth_Pos          (4UL)                     /*!< DMAC PeriphID3: Sidth (Bit 4)                         */
#define DMAC_PeriphID3_Sidth_Msk          (0x70UL)                  /*!< DMAC PeriphID3: Sidth (Bitfield-Mask: 0x07)           */
#define DMAC_PeriphID3_Source_Pos         (7UL)                     /*!< DMAC PeriphID3: Source (Bit 7)                        */
#define DMAC_PeriphID3_Source_Msk         (0x80UL)                  /*!< DMAC PeriphID3: Source (Bitfield-Mask: 0x01)          */
/* =======================================================  PCellID0  ======================================================== */
/* =======================================================  PCellID1  ======================================================== */
/* =======================================================  PCellID2  ======================================================== */
/* =======================================================  PCellID3  ======================================================== */
/* =========================================================  ITCR  ========================================================== */
/* =========================================================  ITOP1  ========================================================= */
/* =========================================================  ITOP2  ========================================================= */
/* =========================================================  ITOP3  ========================================================= */
#define DMAC_ITOP3_E_Pos                  (0UL)                     /*!< DMAC ITOP3: E (Bit 0)                                 */
#define DMAC_ITOP3_E_Msk                  (0x1UL)                   /*!< DMAC ITOP3: E (Bitfield-Mask: 0x01)                   */
#define DMAC_ITOP3_TC_Pos                 (1UL)                     /*!< DMAC ITOP3: TC (Bit 1)                                */
#define DMAC_ITOP3_TC_Msk                 (0x2UL)                   /*!< DMAC ITOP3: TC (Bitfield-Mask: 0x01)                  */


/* =========================================================================================================================== */
/* ================                                           QSPI                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  MCR  ========================================================== */
#define QSPI_MCR_SWRSTSD_Pos              (0UL)                     /*!< QSPI MCR: SWRSTSD (Bit 0)                             */
#define QSPI_MCR_SWRSTSD_Msk              (0x1UL)                   /*!< QSPI MCR: SWRSTSD (Bitfield-Mask: 0x01)               */
#define QSPI_MCR_SWRSTHD_Pos              (1UL)                     /*!< QSPI MCR: SWRSTHD (Bit 1)                             */
#define QSPI_MCR_SWRSTHD_Msk              (0x2UL)                   /*!< QSPI MCR: SWRSTHD (Bitfield-Mask: 0x01)               */
#define QSPI_MCR_END_CFG_Pos              (2UL)                     /*!< QSPI MCR: END_CFG (Bit 2)                             */
#define QSPI_MCR_END_CFG_Msk              (0xcUL)                   /*!< QSPI MCR: END_CFG (Bitfield-Mask: 0x03)               */
#define QSPI_MCR_DQS_LAT_EN_Pos           (5UL)                     /*!< QSPI MCR: DQS_LAT_EN (Bit 5)                          */
#define QSPI_MCR_DQS_LAT_EN_Msk           (0x20UL)                  /*!< QSPI MCR: DQS_LAT_EN (Bitfield-Mask: 0x01)            */
#define QSPI_MCR_DQS_EN_Pos               (6UL)                     /*!< QSPI MCR: DQS_EN (Bit 6)                              */
#define QSPI_MCR_DQS_EN_Msk               (0x40UL)                  /*!< QSPI MCR: DQS_EN (Bitfield-Mask: 0x01)                */
#define QSPI_MCR_DDR_EN_Pos               (7UL)                     /*!< QSPI MCR: DDR_EN (Bit 7)                              */
#define QSPI_MCR_DDR_EN_Msk               (0x80UL)                  /*!< QSPI MCR: DDR_EN (Bitfield-Mask: 0x01)                */
#define QSPI_MCR_CLR_RXF_Pos              (10UL)                    /*!< QSPI MCR: CLR_RXF (Bit 10)                            */
#define QSPI_MCR_CLR_RXF_Msk              (0x400UL)                 /*!< QSPI MCR: CLR_RXF (Bitfield-Mask: 0x01)               */
#define QSPI_MCR_CLR_TXF_Pos              (11UL)                    /*!< QSPI MCR: CLR_TXF (Bit 11)                            */
#define QSPI_MCR_CLR_TXF_Msk              (0x800UL)                 /*!< QSPI MCR: CLR_TXF (Bitfield-Mask: 0x01)               */
#define QSPI_MCR_MDIS_Pos                 (14UL)                    /*!< QSPI MCR: MDIS (Bit 14)                               */
#define QSPI_MCR_MDIS_Msk                 (0x4000UL)                /*!< QSPI MCR: MDIS (Bitfield-Mask: 0x01)                  */
#define QSPI_MCR_SCLKCFG_Pos              (24UL)                    /*!< QSPI MCR: SCLKCFG (Bit 24)                            */
#define QSPI_MCR_SCLKCFG_Msk              (0xff000000UL)            /*!< QSPI MCR: SCLKCFG (Bitfield-Mask: 0xff)               */
/* =========================================================  IPCR  ========================================================== */
#define QSPI_IPCR_IDATSZ_Pos              (0UL)                     /*!< QSPI IPCR: IDATSZ (Bit 0)                             */
#define QSPI_IPCR_IDATSZ_Msk              (0xffffUL)                /*!< QSPI IPCR: IDATSZ (Bitfield-Mask: 0xffff)             */
#define QSPI_IPCR_PAR_EN_Pos              (16UL)                    /*!< QSPI IPCR: PAR_EN (Bit 16)                            */
#define QSPI_IPCR_PAR_EN_Msk              (0x10000UL)               /*!< QSPI IPCR: PAR_EN (Bitfield-Mask: 0x01)               */
#define QSPI_IPCR_SEQID_Pos               (24UL)                    /*!< QSPI IPCR: SEQID (Bit 24)                             */
#define QSPI_IPCR_SEQID_Msk               (0xf000000UL)             /*!< QSPI IPCR: SEQID (Bitfield-Mask: 0x0f)                */
/* ========================================================  FLSHCR  ========================================================= */
#define QSPI_FLSHCR_TCSS_Pos              (0UL)                     /*!< QSPI FLSHCR: TCSS (Bit 0)                             */
#define QSPI_FLSHCR_TCSS_Msk              (0xfUL)                   /*!< QSPI FLSHCR: TCSS (Bitfield-Mask: 0x0f)               */
#define QSPI_FLSHCR_TCSH_Pos              (8UL)                     /*!< QSPI FLSHCR: TCSH (Bit 8)                             */
#define QSPI_FLSHCR_TCSH_Msk              (0xf00UL)                 /*!< QSPI FLSHCR: TCSH (Bitfield-Mask: 0x0f)               */
#define QSPI_FLSHCR_TDH_Pos               (16UL)                    /*!< QSPI FLSHCR: TDH (Bit 16)                             */
#define QSPI_FLSHCR_TDH_Msk               (0x30000UL)               /*!< QSPI FLSHCR: TDH (Bitfield-Mask: 0x03)                */
/* ========================================================  BUF0CR  ========================================================= */
#define QSPI_BUF0CR_MSTRID_Pos            (0UL)                     /*!< QSPI BUF0CR: MSTRID (Bit 0)                           */
#define QSPI_BUF0CR_MSTRID_Msk            (0xfUL)                   /*!< QSPI BUF0CR: MSTRID (Bitfield-Mask: 0x0f)             */
#define QSPI_BUF0CR_ADATSZ_Pos            (8UL)                     /*!< QSPI BUF0CR: ADATSZ (Bit 8)                           */
#define QSPI_BUF0CR_ADATSZ_Msk            (0x7f00UL)                /*!< QSPI BUF0CR: ADATSZ (Bitfield-Mask: 0x7f)             */
#define QSPI_BUF0CR_HP_EN_Pos             (31UL)                    /*!< QSPI BUF0CR: HP_EN (Bit 31)                           */
#define QSPI_BUF0CR_HP_EN_Msk             (0x80000000UL)            /*!< QSPI BUF0CR: HP_EN (Bitfield-Mask: 0x01)              */
/* ========================================================  BUF1CR  ========================================================= */
#define QSPI_BUF1CR_MSTRID_Pos            (0UL)                     /*!< QSPI BUF1CR: MSTRID (Bit 0)                           */
#define QSPI_BUF1CR_MSTRID_Msk            (0xfUL)                   /*!< QSPI BUF1CR: MSTRID (Bitfield-Mask: 0x0f)             */
#define QSPI_BUF1CR_ADATSZ_Pos            (8UL)                     /*!< QSPI BUF1CR: ADATSZ (Bit 8)                           */
#define QSPI_BUF1CR_ADATSZ_Msk            (0x7f00UL)                /*!< QSPI BUF1CR: ADATSZ (Bitfield-Mask: 0x7f)             */
/* ========================================================  BUF2CR  ========================================================= */
#define QSPI_BUF2CR_MSTRID_Pos            (0UL)                     /*!< QSPI BUF2CR: MSTRID (Bit 0)                           */
#define QSPI_BUF2CR_MSTRID_Msk            (0xfUL)                   /*!< QSPI BUF2CR: MSTRID (Bitfield-Mask: 0x0f)             */
#define QSPI_BUF2CR_ADATSZ_Pos            (8UL)                     /*!< QSPI BUF2CR: ADATSZ (Bit 8)                           */
#define QSPI_BUF2CR_ADATSZ_Msk            (0x7f00UL)                /*!< QSPI BUF2CR: ADATSZ (Bitfield-Mask: 0x7f)             */
/* ========================================================  BUF3CR  ========================================================= */
#define QSPI_BUF3CR_MSTRID_Pos            (0UL)                     /*!< QSPI BUF3CR: MSTRID (Bit 0)                           */
#define QSPI_BUF3CR_MSTRID_Msk            (0xfUL)                   /*!< QSPI BUF3CR: MSTRID (Bitfield-Mask: 0x0f)             */
#define QSPI_BUF3CR_ADATSZ_Pos            (8UL)                     /*!< QSPI BUF3CR: ADATSZ (Bit 8)                           */
#define QSPI_BUF3CR_ADATSZ_Msk            (0x7f00UL)                /*!< QSPI BUF3CR: ADATSZ (Bitfield-Mask: 0x7f)             */
#define QSPI_BUF3CR_ALLMST_Pos            (31UL)                    /*!< QSPI BUF3CR: ALLMST (Bit 31)                          */
#define QSPI_BUF3CR_ALLMST_Msk            (0x80000000UL)            /*!< QSPI BUF3CR: ALLMST (Bitfield-Mask: 0x01)             */
/* ========================================================  BFGENCR  ======================================================== */
#define QSPI_BFGENCR_SEQID_Pos            (12UL)                    /*!< QSPI BFGENCR: SEQID (Bit 12)                          */
#define QSPI_BFGENCR_SEQID_Msk            (0xf000UL)                /*!< QSPI BFGENCR: SEQID (Bitfield-Mask: 0x0f)             */
#define QSPI_BFGENCR_PAR_EN_Pos           (16UL)                    /*!< QSPI BFGENCR: PAR_EN (Bit 16)                         */
#define QSPI_BFGENCR_PAR_EN_Msk           (0x10000UL)               /*!< QSPI BFGENCR: PAR_EN (Bitfield-Mask: 0x01)            */
/* =========================================================  SOCCR  ========================================================= */
#define QSPI_SOCCR_SOCCFG_Pos             (0UL)                     /*!< QSPI SOCCR: SOCCFG (Bit 0)                            */
#define QSPI_SOCCR_SOCCFG_Msk             (0xffffffffUL)            /*!< QSPI SOCCR: SOCCFG (Bitfield-Mask: 0xffffffff)        */
/* ========================================================  BUF0IND  ======================================================== */
/* ========================================================  BUF1IND  ======================================================== */
#define QSPI_BUF1IND_TPINDX1_Pos          (3UL)                     /*!< QSPI BUF1IND: TPINDX1 (Bit 3)                         */
#define QSPI_BUF1IND_TPINDX1_Msk          (0xfffffff8UL)            /*!< QSPI BUF1IND: TPINDX1 (Bitfield-Mask: 0x1fffffff)     */
/* ========================================================  BUF2IND  ======================================================== */
#define QSPI_BUF2IND_TPINDX2_Pos          (3UL)                     /*!< QSPI BUF2IND: TPINDX2 (Bit 3)                         */
#define QSPI_BUF2IND_TPINDX2_Msk          (0xfffffff8UL)            /*!< QSPI BUF2IND: TPINDX2 (Bitfield-Mask: 0x1fffffff)     */
/* =========================================================  SFAR  ========================================================== */
#define QSPI_SFAR_SFADR_Pos               (0UL)                     /*!< QSPI SFAR: SFADR (Bit 0)                              */
#define QSPI_SFAR_SFADR_Msk               (0xffffffffUL)            /*!< QSPI SFAR: SFADR (Bitfield-Mask: 0xffffffff)          */
/* =========================================================  SFACR  ========================================================= */
#define QSPI_SFACR_CAS_Pos                (0UL)                     /*!< QSPI SFACR: CAS (Bit 0)                               */
#define QSPI_SFACR_CAS_Msk                (0xfUL)                   /*!< QSPI SFACR: CAS (Bitfield-Mask: 0x0f)                 */
#define QSPI_SFACR_WA_Pos                 (16UL)                    /*!< QSPI SFACR: WA (Bit 16)                               */
#define QSPI_SFACR_WA_Msk                 (0x10000UL)               /*!< QSPI SFACR: WA (Bitfield-Mask: 0x01)                  */
/* =========================================================  SMPR  ========================================================== */
#define QSPI_SMPR_HSENA_Pos               (0UL)                     /*!< QSPI SMPR: HSENA (Bit 0)                              */
#define QSPI_SMPR_HSENA_Msk               (0x1UL)                   /*!< QSPI SMPR: HSENA (Bitfield-Mask: 0x01)                */
#define QSPI_SMPR_HSPHS_Pos               (1UL)                     /*!< QSPI SMPR: HSPHS (Bit 1)                              */
#define QSPI_SMPR_HSPHS_Msk               (0x2UL)                   /*!< QSPI SMPR: HSPHS (Bitfield-Mask: 0x01)                */
#define QSPI_SMPR_HSDLY_Pos               (2UL)                     /*!< QSPI SMPR: HSDLY (Bit 2)                              */
#define QSPI_SMPR_HSDLY_Msk               (0x4UL)                   /*!< QSPI SMPR: HSDLY (Bitfield-Mask: 0x01)                */
#define QSPI_SMPR_FSPHS_Pos               (5UL)                     /*!< QSPI SMPR: FSPHS (Bit 5)                              */
#define QSPI_SMPR_FSPHS_Msk               (0x20UL)                  /*!< QSPI SMPR: FSPHS (Bitfield-Mask: 0x01)                */
#define QSPI_SMPR_FSDLY_Pos               (6UL)                     /*!< QSPI SMPR: FSDLY (Bit 6)                              */
#define QSPI_SMPR_FSDLY_Msk               (0x40UL)                  /*!< QSPI SMPR: FSDLY (Bitfield-Mask: 0x01)                */
#define QSPI_SMPR_DDRSMP_Pos              (16UL)                    /*!< QSPI SMPR: DDRSMP (Bit 16)                            */
#define QSPI_SMPR_DDRSMP_Msk              (0x70000UL)               /*!< QSPI SMPR: DDRSMP (Bitfield-Mask: 0x07)               */
/* =========================================================  RBSR  ========================================================== */
#define QSPI_RBSR_RDBFL_Pos               (8UL)                     /*!< QSPI RBSR: RDBFL (Bit 8)                              */
#define QSPI_RBSR_RDBFL_Msk               (0x1f00UL)                /*!< QSPI RBSR: RDBFL (Bitfield-Mask: 0x1f)                */
#define QSPI_RBSR_RDCTR_Pos               (16UL)                    /*!< QSPI RBSR: RDCTR (Bit 16)                             */
#define QSPI_RBSR_RDCTR_Msk               (0xffff0000UL)            /*!< QSPI RBSR: RDCTR (Bitfield-Mask: 0xffff)              */
/* =========================================================  RBCT  ========================================================== */
#define QSPI_RBCT_WMRK_Pos                (0UL)                     /*!< QSPI RBCT: WMRK (Bit 0)                               */
#define QSPI_RBCT_WMRK_Msk                (0xfUL)                   /*!< QSPI RBCT: WMRK (Bitfield-Mask: 0x0f)                 */
#define QSPI_RBCT_RXBRD_Pos               (8UL)                     /*!< QSPI RBCT: RXBRD (Bit 8)                              */
#define QSPI_RBCT_RXBRD_Msk               (0x700UL)                 /*!< QSPI RBCT: RXBRD (Bitfield-Mask: 0x07)                */
/* =========================================================  TBSR  ========================================================== */
#define QSPI_TBSR_TRBFL_Pos               (8UL)                     /*!< QSPI TBSR: TRBFL (Bit 8)                              */
#define QSPI_TBSR_TRBFL_Msk               (0x1f00UL)                /*!< QSPI TBSR: TRBFL (Bitfield-Mask: 0x1f)                */
#define QSPI_TBSR_TRCTR_Pos               (16UL)                    /*!< QSPI TBSR: TRCTR (Bit 16)                             */
#define QSPI_TBSR_TRCTR_Msk               (0xffff0000UL)            /*!< QSPI TBSR: TRCTR (Bitfield-Mask: 0xffff)              */
/* =========================================================  TBDR  ========================================================== */
#define QSPI_TBDR_TXDATA_Pos              (0UL)                     /*!< QSPI TBDR: TXDATA (Bit 0)                             */
#define QSPI_TBDR_TXDATA_Msk              (0xffffffffUL)            /*!< QSPI TBDR: TXDATA (Bitfield-Mask: 0xffffffff)         */
/* =========================================================  TBCT  ========================================================== */
#define QSPI_TBCT_WMRK_Pos                (0UL)                     /*!< QSPI TBCT: WMRK (Bit 0)                               */
#define QSPI_TBCT_WMRK_Msk                (0xfUL)                   /*!< QSPI TBCT: WMRK (Bitfield-Mask: 0x0f)                 */
/* ==========================================================  SR  =========================================================== */
#define QSPI_SR_BUSY_Pos                  (0UL)                     /*!< QSPI SR: BUSY (Bit 0)                                 */
#define QSPI_SR_BUSY_Msk                  (0x1UL)                   /*!< QSPI SR: BUSY (Bitfield-Mask: 0x01)                   */
#define QSPI_SR_IP_ACC_Pos                (1UL)                     /*!< QSPI SR: IP_ACC (Bit 1)                               */
#define QSPI_SR_IP_ACC_Msk                (0x2UL)                   /*!< QSPI SR: IP_ACC (Bitfield-Mask: 0x01)                 */
#define QSPI_SR_AHB_ACC_Pos               (2UL)                     /*!< QSPI SR: AHB_ACC (Bit 2)                              */
#define QSPI_SR_AHB_ACC_Msk               (0x4UL)                   /*!< QSPI SR: AHB_ACC (Bitfield-Mask: 0x01)                */
#define QSPI_SR_AHBGNT_Pos                (5UL)                     /*!< QSPI SR: AHBGNT (Bit 5)                               */
#define QSPI_SR_AHBGNT_Msk                (0x20UL)                  /*!< QSPI SR: AHBGNT (Bitfield-Mask: 0x01)                 */
#define QSPI_SR_AHBTRN_Pos                (6UL)                     /*!< QSPI SR: AHBTRN (Bit 6)                               */
#define QSPI_SR_AHBTRN_Msk                (0x40UL)                  /*!< QSPI SR: AHBTRN (Bitfield-Mask: 0x01)                 */
#define QSPI_SR_AHB0NE_Pos                (7UL)                     /*!< QSPI SR: AHB0NE (Bit 7)                               */
#define QSPI_SR_AHB0NE_Msk                (0x80UL)                  /*!< QSPI SR: AHB0NE (Bitfield-Mask: 0x01)                 */
#define QSPI_SR_AHB1NE_Pos                (8UL)                     /*!< QSPI SR: AHB1NE (Bit 8)                               */
#define QSPI_SR_AHB1NE_Msk                (0x100UL)                 /*!< QSPI SR: AHB1NE (Bitfield-Mask: 0x01)                 */
#define QSPI_SR_AHB2NE_Pos                (9UL)                     /*!< QSPI SR: AHB2NE (Bit 9)                               */
#define QSPI_SR_AHB2NE_Msk                (0x200UL)                 /*!< QSPI SR: AHB2NE (Bitfield-Mask: 0x01)                 */
#define QSPI_SR_AHB3NE_Pos                (10UL)                    /*!< QSPI SR: AHB3NE (Bit 10)                              */
#define QSPI_SR_AHB3NE_Msk                (0x400UL)                 /*!< QSPI SR: AHB3NE (Bitfield-Mask: 0x01)                 */
#define QSPI_SR_AHB0FUL_Pos               (11UL)                    /*!< QSPI SR: AHB0FUL (Bit 11)                             */
#define QSPI_SR_AHB0FUL_Msk               (0x800UL)                 /*!< QSPI SR: AHB0FUL (Bitfield-Mask: 0x01)                */
#define QSPI_SR_AHB1FUL_Pos               (12UL)                    /*!< QSPI SR: AHB1FUL (Bit 12)                             */
#define QSPI_SR_AHB1FUL_Msk               (0x1000UL)                /*!< QSPI SR: AHB1FUL (Bitfield-Mask: 0x01)                */
#define QSPI_SR_AHB2FUL_Pos               (13UL)                    /*!< QSPI SR: AHB2FUL (Bit 13)                             */
#define QSPI_SR_AHB2FUL_Msk               (0x2000UL)                /*!< QSPI SR: AHB2FUL (Bitfield-Mask: 0x01)                */
#define QSPI_SR_AHB3FUL_Pos               (14UL)                    /*!< QSPI SR: AHB3FUL (Bit 14)                             */
#define QSPI_SR_AHB3FUL_Msk               (0x4000UL)                /*!< QSPI SR: AHB3FUL (Bitfield-Mask: 0x01)                */
#define QSPI_SR_RXWE_Pos                  (16UL)                    /*!< QSPI SR: RXWE (Bit 16)                                */
#define QSPI_SR_RXWE_Msk                  (0x10000UL)               /*!< QSPI SR: RXWE (Bitfield-Mask: 0x01)                   */
#define QSPI_SR_RXFULL_Pos                (19UL)                    /*!< QSPI SR: RXFULL (Bit 19)                              */
#define QSPI_SR_RXFULL_Msk                (0x80000UL)               /*!< QSPI SR: RXFULL (Bitfield-Mask: 0x01)                 */
#define QSPI_SR_RXDMA_Pos                 (23UL)                    /*!< QSPI SR: RXDMA (Bit 23)                               */
#define QSPI_SR_RXDMA_Msk                 (0x800000UL)              /*!< QSPI SR: RXDMA (Bitfield-Mask: 0x01)                  */
#define QSPI_SR_TXEDA_Pos                 (24UL)                    /*!< QSPI SR: TXEDA (Bit 24)                               */
#define QSPI_SR_TXEDA_Msk                 (0x1000000UL)             /*!< QSPI SR: TXEDA (Bitfield-Mask: 0x01)                  */
#define QSPI_SR_TXWA_Pos                  (25UL)                    /*!< QSPI SR: TXWA (Bit 25)                                */
#define QSPI_SR_TXWA_Msk                  (0x2000000UL)             /*!< QSPI SR: TXWA (Bitfield-Mask: 0x01)                   */
#define QSPI_SR_TXDMA_Pos                 (26UL)                    /*!< QSPI SR: TXDMA (Bit 26)                               */
#define QSPI_SR_TXDMA_Msk                 (0x4000000UL)             /*!< QSPI SR: TXDMA (Bitfield-Mask: 0x01)                  */
#define QSPI_SR_TXFULL_Pos                (27UL)                    /*!< QSPI SR: TXFULL (Bit 27)                              */
#define QSPI_SR_TXFULL_Msk                (0x8000000UL)             /*!< QSPI SR: TXFULL (Bitfield-Mask: 0x01)                 */
#define QSPI_SR_DLPSMP_Pos                (29UL)                    /*!< QSPI SR: DLPSMP (Bit 29)                              */
#define QSPI_SR_DLPSMP_Msk                (0xe0000000UL)            /*!< QSPI SR: DLPSMP (Bitfield-Mask: 0x07)                 */
/* ==========================================================  FR  =========================================================== */
#define QSPI_FR_TFF_Pos                   (0UL)                     /*!< QSPI FR: TFF (Bit 0)                                  */
#define QSPI_FR_TFF_Msk                   (0x1UL)                   /*!< QSPI FR: TFF (Bitfield-Mask: 0x01)                    */
#define QSPI_FR_IPGEF_Pos                 (4UL)                     /*!< QSPI FR: IPGEF (Bit 4)                                */
#define QSPI_FR_IPGEF_Msk                 (0x10UL)                  /*!< QSPI FR: IPGEF (Bitfield-Mask: 0x01)                  */
#define QSPI_FR_IPIEF_Pos                 (6UL)                     /*!< QSPI FR: IPIEF (Bit 6)                                */
#define QSPI_FR_IPIEF_Msk                 (0x40UL)                  /*!< QSPI FR: IPIEF (Bitfield-Mask: 0x01)                  */
#define QSPI_FR_IPAEF_Pos                 (7UL)                     /*!< QSPI FR: IPAEF (Bit 7)                                */
#define QSPI_FR_IPAEF_Msk                 (0x80UL)                  /*!< QSPI FR: IPAEF (Bitfield-Mask: 0x01)                  */
#define QSPI_FR_IUEF_Pos                  (11UL)                    /*!< QSPI FR: IUEF (Bit 11)                                */
#define QSPI_FR_IUEF_Msk                  (0x800UL)                 /*!< QSPI FR: IUEF (Bitfield-Mask: 0x01)                   */
#define QSPI_FR_ABOF_Pos                  (12UL)                    /*!< QSPI FR: ABOF (Bit 12)                                */
#define QSPI_FR_ABOF_Msk                  (0x1000UL)                /*!< QSPI FR: ABOF (Bitfield-Mask: 0x01)                   */
#define QSPI_FR_AIBSEF_Pos                (13UL)                    /*!< QSPI FR: AIBSEF (Bit 13)                              */
#define QSPI_FR_AIBSEF_Msk                (0x2000UL)                /*!< QSPI FR: AIBSEF (Bitfield-Mask: 0x01)                 */
#define QSPI_FR_AITEF_Pos                 (14UL)                    /*!< QSPI FR: AITEF (Bit 14)                               */
#define QSPI_FR_AITEF_Msk                 (0x4000UL)                /*!< QSPI FR: AITEF (Bitfield-Mask: 0x01)                  */
#define QSPI_FR_ABSEF_Pos                 (15UL)                    /*!< QSPI FR: ABSEF (Bit 15)                               */
#define QSPI_FR_ABSEF_Msk                 (0x8000UL)                /*!< QSPI FR: ABSEF (Bitfield-Mask: 0x01)                  */
#define QSPI_FR_RBDF_Pos                  (16UL)                    /*!< QSPI FR: RBDF (Bit 16)                                */
#define QSPI_FR_RBDF_Msk                  (0x10000UL)               /*!< QSPI FR: RBDF (Bitfield-Mask: 0x01)                   */
#define QSPI_FR_RBOF_Pos                  (17UL)                    /*!< QSPI FR: RBOF (Bit 17)                                */
#define QSPI_FR_RBOF_Msk                  (0x20000UL)               /*!< QSPI FR: RBOF (Bitfield-Mask: 0x01)                   */
#define QSPI_FR_ILLINE_Pos                (23UL)                    /*!< QSPI FR: ILLINE (Bit 23)                              */
#define QSPI_FR_ILLINE_Msk                (0x800000UL)              /*!< QSPI FR: ILLINE (Bitfield-Mask: 0x01)                 */
#define QSPI_FR_TBUF_Pos                  (26UL)                    /*!< QSPI FR: TBUF (Bit 26)                                */
#define QSPI_FR_TBUF_Msk                  (0x4000000UL)             /*!< QSPI FR: TBUF (Bitfield-Mask: 0x01)                   */
#define QSPI_FR_TBFF_Pos                  (27UL)                    /*!< QSPI FR: TBFF (Bit 27)                                */
#define QSPI_FR_TBFF_Msk                  (0x8000000UL)             /*!< QSPI FR: TBFF (Bitfield-Mask: 0x01)                   */
#define QSPI_FR_DLPFF_Pos                 (31UL)                    /*!< QSPI FR: DLPFF (Bit 31)                               */
#define QSPI_FR_DLPFF_Msk                 (0x80000000UL)            /*!< QSPI FR: DLPFF (Bitfield-Mask: 0x01)                  */
/* =========================================================  RSER  ========================================================== */
#define QSPI_RSER_TFIE_Pos                (0UL)                     /*!< QSPI RSER: TFIE (Bit 0)                               */
#define QSPI_RSER_TFIE_Msk                (0x1UL)                   /*!< QSPI RSER: TFIE (Bitfield-Mask: 0x01)                 */
#define QSPI_RSER_IPGEIE_Pos              (4UL)                     /*!< QSPI RSER: IPGEIE (Bit 4)                             */
#define QSPI_RSER_IPGEIE_Msk              (0x10UL)                  /*!< QSPI RSER: IPGEIE (Bitfield-Mask: 0x01)               */
#define QSPI_RSER_IPIEIE_Pos              (6UL)                     /*!< QSPI RSER: IPIEIE (Bit 6)                             */
#define QSPI_RSER_IPIEIE_Msk              (0x40UL)                  /*!< QSPI RSER: IPIEIE (Bitfield-Mask: 0x01)               */
#define QSPI_RSER_IPAEIE_Pos              (7UL)                     /*!< QSPI RSER: IPAEIE (Bit 7)                             */
#define QSPI_RSER_IPAEIE_Msk              (0x80UL)                  /*!< QSPI RSER: IPAEIE (Bitfield-Mask: 0x01)               */
#define QSPI_RSER_IUEIE_Pos               (11UL)                    /*!< QSPI RSER: IUEIE (Bit 11)                             */
#define QSPI_RSER_IUEIE_Msk               (0x800UL)                 /*!< QSPI RSER: IUEIE (Bitfield-Mask: 0x01)                */
#define QSPI_RSER_ABOIE_Pos               (12UL)                    /*!< QSPI RSER: ABOIE (Bit 12)                             */
#define QSPI_RSER_ABOIE_Msk               (0x1000UL)                /*!< QSPI RSER: ABOIE (Bitfield-Mask: 0x01)                */
#define QSPI_RSER_AIBSIE_Pos              (13UL)                    /*!< QSPI RSER: AIBSIE (Bit 13)                            */
#define QSPI_RSER_AIBSIE_Msk              (0x2000UL)                /*!< QSPI RSER: AIBSIE (Bitfield-Mask: 0x01)               */
#define QSPI_RSER_AITIE_Pos               (14UL)                    /*!< QSPI RSER: AITIE (Bit 14)                             */
#define QSPI_RSER_AITIE_Msk               (0x4000UL)                /*!< QSPI RSER: AITIE (Bitfield-Mask: 0x01)                */
#define QSPI_RSER_ABSEIE_Pos              (15UL)                    /*!< QSPI RSER: ABSEIE (Bit 15)                            */
#define QSPI_RSER_ABSEIE_Msk              (0x8000UL)                /*!< QSPI RSER: ABSEIE (Bitfield-Mask: 0x01)               */
#define QSPI_RSER_RBDIE_Pos               (16UL)                    /*!< QSPI RSER: RBDIE (Bit 16)                             */
#define QSPI_RSER_RBDIE_Msk               (0x10000UL)               /*!< QSPI RSER: RBDIE (Bitfield-Mask: 0x01)                */
#define QSPI_RSER_RBOIE_Pos               (17UL)                    /*!< QSPI RSER: RBOIE (Bit 17)                             */
#define QSPI_RSER_RBOIE_Msk               (0x20000UL)               /*!< QSPI RSER: RBOIE (Bitfield-Mask: 0x01)                */
#define QSPI_RSER_RBDDE_Pos               (21UL)                    /*!< QSPI RSER: RBDDE (Bit 21)                             */
#define QSPI_RSER_RBDDE_Msk               (0x200000UL)              /*!< QSPI RSER: RBDDE (Bitfield-Mask: 0x01)                */
#define QSPI_RSER_ILLINIE_Pos             (23UL)                    /*!< QSPI RSER: ILLINIE (Bit 23)                           */
#define QSPI_RSER_ILLINIE_Msk             (0x800000UL)              /*!< QSPI RSER: ILLINIE (Bitfield-Mask: 0x01)              */
#define QSPI_RSER_TBFDE_Pos               (25UL)                    /*!< QSPI RSER: TBFDE (Bit 25)                             */
#define QSPI_RSER_TBFDE_Msk               (0x2000000UL)             /*!< QSPI RSER: TBFDE (Bitfield-Mask: 0x01)                */
#define QSPI_RSER_TBUIE_Pos               (26UL)                    /*!< QSPI RSER: TBUIE (Bit 26)                             */
#define QSPI_RSER_TBUIE_Msk               (0x4000000UL)             /*!< QSPI RSER: TBUIE (Bitfield-Mask: 0x01)                */
#define QSPI_RSER_TBFIE_Pos               (27UL)                    /*!< QSPI RSER: TBFIE (Bit 27)                             */
#define QSPI_RSER_TBFIE_Msk               (0x8000000UL)             /*!< QSPI RSER: TBFIE (Bitfield-Mask: 0x01)                */
#define QSPI_RSER_DLPFIE_Pos              (31UL)                    /*!< QSPI RSER: DLPFIE (Bit 31)                            */
#define QSPI_RSER_DLPFIE_Msk              (0x80000000UL)            /*!< QSPI RSER: DLPFIE (Bitfield-Mask: 0x01)               */
/* ========================================================  SPNDST  ========================================================= */
#define QSPI_SPNDST_SUSPND_Pos            (0UL)                     /*!< QSPI SPNDST: SUSPND (Bit 0)                           */
#define QSPI_SPNDST_SUSPND_Msk            (0x1UL)                   /*!< QSPI SPNDST: SUSPND (Bitfield-Mask: 0x01)             */
#define QSPI_SPNDST_SPDBUF_Pos            (6UL)                     /*!< QSPI SPNDST: SPDBUF (Bit 6)                           */
#define QSPI_SPNDST_SPDBUF_Msk            (0xc0UL)                  /*!< QSPI SPNDST: SPDBUF (Bitfield-Mask: 0x03)             */
#define QSPI_SPNDST_DATLFT_Pos            (9UL)                     /*!< QSPI SPNDST: DATLFT (Bit 9)                           */
#define QSPI_SPNDST_DATLFT_Msk            (0x7e00UL)                /*!< QSPI SPNDST: DATLFT (Bitfield-Mask: 0x3f)             */
/* ========================================================  SPTRCLR  ======================================================== */
#define QSPI_SPTRCLR_BFPTRC_Pos           (0UL)                     /*!< QSPI SPTRCLR: BFPTRC (Bit 0)                          */
#define QSPI_SPTRCLR_BFPTRC_Msk           (0x1UL)                   /*!< QSPI SPTRCLR: BFPTRC (Bitfield-Mask: 0x01)            */
#define QSPI_SPTRCLR_IPPTRC_Pos           (8UL)                     /*!< QSPI SPTRCLR: IPPTRC (Bit 8)                          */
#define QSPI_SPTRCLR_IPPTRC_Msk           (0x100UL)                 /*!< QSPI SPTRCLR: IPPTRC (Bitfield-Mask: 0x01)            */
/* ========================================================  SFA1AD  ========================================================= */
#define QSPI_SFA1AD_TPADA1_Pos            (10UL)                    /*!< QSPI SFA1AD: TPADA1 (Bit 10)                          */
#define QSPI_SFA1AD_TPADA1_Msk            (0xfffffc00UL)            /*!< QSPI SFA1AD: TPADA1 (Bitfield-Mask: 0x3fffff)         */
/* ========================================================  SFA2AD  ========================================================= */
#define QSPI_SFA2AD_TPADA2_Pos            (10UL)                    /*!< QSPI SFA2AD: TPADA2 (Bit 10)                          */
#define QSPI_SFA2AD_TPADA2_Msk            (0xfffffc00UL)            /*!< QSPI SFA2AD: TPADA2 (Bitfield-Mask: 0x3fffff)         */
/* ========================================================  SFB1AD  ========================================================= */
#define QSPI_SFB1AD_TPADB1_Pos            (10UL)                    /*!< QSPI SFB1AD: TPADB1 (Bit 10)                          */
#define QSPI_SFB1AD_TPADB1_Msk            (0xfffffc00UL)            /*!< QSPI SFB1AD: TPADB1 (Bitfield-Mask: 0x3fffff)         */
/* ========================================================  SFB2AD  ========================================================= */
#define QSPI_SFB2AD_TPADB2_Pos            (10UL)                    /*!< QSPI SFB2AD: TPADB2 (Bit 10)                          */
#define QSPI_SFB2AD_TPADB2_Msk            (0xfffffc00UL)            /*!< QSPI SFB2AD: TPADB2 (Bitfield-Mask: 0x3fffff)         */
/* =========================================================  DLPR  ========================================================== */
#define QSPI_DLPR_DLPV_Pos                (0UL)                     /*!< QSPI DLPR: DLPV (Bit 0)                               */
#define QSPI_DLPR_DLPV_Msk                (0xffffffffUL)            /*!< QSPI DLPR: DLPV (Bitfield-Mask: 0xffffffff)           */
/* =========================================================  RBDR  ========================================================== */
#define QSPI_RBDR_RXDATA_Pos              (0UL)                     /*!< QSPI RBDR: RXDATA (Bit 0)                             */
#define QSPI_RBDR_RXDATA_Msk              (0xffffffffUL)            /*!< QSPI RBDR: RXDATA (Bitfield-Mask: 0xffffffff)         */
/* ========================================================  LUTKEY  ========================================================= */
#define QSPI_LUTKEY_KEY_Pos               (0UL)                     /*!< QSPI LUTKEY: KEY (Bit 0)                              */
#define QSPI_LUTKEY_KEY_Msk               (0xffffffffUL)            /*!< QSPI LUTKEY: KEY (Bitfield-Mask: 0xffffffff)          */
/* =========================================================  LCKCR  ========================================================= */
#define QSPI_LCKCR_LOCK_Pos               (0UL)                     /*!< QSPI LCKCR: LOCK (Bit 0)                              */
#define QSPI_LCKCR_LOCK_Msk               (0x1UL)                   /*!< QSPI LCKCR: LOCK (Bitfield-Mask: 0x01)                */
#define QSPI_LCKCR_UNLOCK_Pos             (1UL)                     /*!< QSPI LCKCR: UNLOCK (Bit 1)                            */
#define QSPI_LCKCR_UNLOCK_Msk             (0x2UL)                   /*!< QSPI LCKCR: UNLOCK (Bitfield-Mask: 0x01)              */
/* ==========================================================  LUT  ========================================================== */
#define QSPI_LUT_OPRND0_Pos               (0UL)                     /*!< QSPI LUT: OPRND0 (Bit 0)                              */
#define QSPI_LUT_OPRND0_Msk               (0xffUL)                  /*!< QSPI LUT: OPRND0 (Bitfield-Mask: 0xff)                */
#define QSPI_LUT_PAD0_Pos                 (8UL)                     /*!< QSPI LUT: PAD0 (Bit 8)                                */
#define QSPI_LUT_PAD0_Msk                 (0x300UL)                 /*!< QSPI LUT: PAD0 (Bitfield-Mask: 0x03)                  */
#define QSPI_LUT_INSTR0_Pos               (10UL)                    /*!< QSPI LUT: INSTR0 (Bit 10)                             */
#define QSPI_LUT_INSTR0_Msk               (0xfc00UL)                /*!< QSPI LUT: INSTR0 (Bitfield-Mask: 0x3f)                */
#define QSPI_LUT_OPRND1_Pos               (16UL)                    /*!< QSPI LUT: OPRND1 (Bit 16)                             */
#define QSPI_LUT_OPRND1_Msk               (0xff0000UL)              /*!< QSPI LUT: OPRND1 (Bitfield-Mask: 0xff)                */
#define QSPI_LUT_PAD1_Pos                 (24UL)                    /*!< QSPI LUT: PAD1 (Bit 24)                               */
#define QSPI_LUT_PAD1_Msk                 (0x3000000UL)             /*!< QSPI LUT: PAD1 (Bitfield-Mask: 0x03)                  */
#define QSPI_LUT_INSTR1_Pos               (26UL)                    /*!< QSPI LUT: INSTR1 (Bit 26)                             */
#define QSPI_LUT_INSTR1_Msk               (0xfc000000UL)            /*!< QSPI LUT: INSTR1 (Bitfield-Mask: 0x3f)                */

/** @} */ /* End of group PosMask_peripherals */


#ifdef __cplusplus
}
#endif

#endif /* ZB204_H */


/** @} */ /* End of group ZB204 */

/** @} */ /* End of group GS */
